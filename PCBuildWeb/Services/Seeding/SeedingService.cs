using PCBuildWeb.Data;
using PCBuildWeb.Models.Entities.Parts;
using PCBuildWeb.Models.Entities.Properties;
using PCBuildWeb.Models.Enums;

namespace PCBuildWeb.Services.Seeding
{
    public class SeedingService
    {
        private readonly PCBuildWebContext _context;

        public SeedingService(PCBuildWebContext context)
        {
            _context = context;
        }

        public void Seed()
        {
            #region CPUSeries Seed
            List<CPUSeries> cpuSeriesList = new List<CPUSeries>();
            CPUSeries AMD_Ryzen_3 = new CPUSeries() { Id = 1, Name = "AMD Ryzen 3" }; cpuSeriesList.Add(AMD_Ryzen_3);
            CPUSeries AMD_Ryzen_5 = new CPUSeries() { Id = 2, Name = "AMD Ryzen 5" }; cpuSeriesList.Add(AMD_Ryzen_5);
            CPUSeries AMD_Ryzen_7 = new CPUSeries() { Id = 3, Name = "AMD Ryzen 7" }; cpuSeriesList.Add(AMD_Ryzen_7);
            CPUSeries AMD_Ryzen_9 = new CPUSeries() { Id = 4, Name = "AMD Ryzen 9" }; cpuSeriesList.Add(AMD_Ryzen_9);
            CPUSeries AMD_Ryzen_Threadripper = new CPUSeries() { Id = 5, Name = "AMD Ryzen Threadripper" }; cpuSeriesList.Add(AMD_Ryzen_Threadripper);
            CPUSeries Intel_Celeron = new CPUSeries() { Id = 6, Name = "Intel Celeron" }; cpuSeriesList.Add(Intel_Celeron);
            CPUSeries Intel_Core_i3 = new CPUSeries() { Id = 7, Name = "Intel Core i3" }; cpuSeriesList.Add(Intel_Core_i3);
            CPUSeries Intel_Core_i5 = new CPUSeries() { Id = 8, Name = "Intel Core i5" }; cpuSeriesList.Add(Intel_Core_i5);
            CPUSeries Intel_Core_i7 = new CPUSeries() { Id = 9, Name = "Intel Core i7" }; cpuSeriesList.Add(Intel_Core_i7);
            CPUSeries Intel_Core_i9 = new CPUSeries() { Id = 10, Name = "Intel Core i9" }; cpuSeriesList.Add(Intel_Core_i9);
            CPUSeries Intel_Pentium = new CPUSeries() { Id = 11, Name = "Intel Pentium" }; cpuSeriesList.Add(Intel_Pentium);
            #endregion
            if (!_context.CPUSeries.Any())
            {
                _context.CPUSeries.AddRange(cpuSeriesList);
            }
            #region CPUSocket Seed
            List<CPUSocket> cpuSockets = new List<CPUSocket>();
            CPUSocket AM4 = new CPUSocket() { Id = 1, Name = "AM4" }; cpuSockets.Add(AM4);
            CPUSocket TR4 = new CPUSocket() { Id = 2, Name = "TR4" }; cpuSockets.Add(TR4);
            CPUSocket sTRX4 = new CPUSocket() { Id = 3, Name = "sTRX4" }; cpuSockets.Add(sTRX4);
            CPUSocket LGA_1151__Skylake_ = new CPUSocket() { Id = 4, Name = "LGA 1151 (Skylake)" }; cpuSockets.Add(LGA_1151__Skylake_);
            CPUSocket LGA_1151__Kaby_Lake_ = new CPUSocket() { Id = 5, Name = "LGA 1151 (Kaby Lake)" }; cpuSockets.Add(LGA_1151__Kaby_Lake_);
            CPUSocket LGA_1200 = new CPUSocket() { Id = 6, Name = "LGA 1200" }; cpuSockets.Add(LGA_1200);
            CPUSocket LGA_1151__Coffee_Lake_ = new CPUSocket() { Id = 7, Name = "LGA 1151 (Coffee Lake)" }; cpuSockets.Add(LGA_1151__Coffee_Lake_);
            CPUSocket LGA_2066 = new CPUSocket() { Id = 8, Name = "LGA 2066" }; cpuSockets.Add(LGA_2066);
            #endregion
            if (!_context.CPUSocket.Any())
            {
                _context.CPUSocket.AddRange(cpuSockets);
            }
            #region GPUChipsetSeries Seed
            List<GPUChipsetSeries> gpuChipsetSeriesList = new List<GPUChipsetSeries>();
            GPUChipsetSeries GTX_700 = new GPUChipsetSeries() { Id = 1, Name = "GTX 700" }; gpuChipsetSeriesList.Add(GTX_700);
            GPUChipsetSeries GTX_900 = new GPUChipsetSeries() { Id = 2, Name = "GTX 900" }; gpuChipsetSeriesList.Add(GTX_900);
            GPUChipsetSeries GTX_1000 = new GPUChipsetSeries() { Id = 3, Name = "GTX 1000" }; gpuChipsetSeriesList.Add(GTX_1000);
            GPUChipsetSeries GTX_1600 = new GPUChipsetSeries() { Id = 4, Name = "GTX 1600" }; gpuChipsetSeriesList.Add(GTX_1600);
            GPUChipsetSeries RTX_2000 = new GPUChipsetSeries() { Id = 5, Name = "RTX 2000" }; gpuChipsetSeriesList.Add(RTX_2000);
            GPUChipsetSeries RTX_3000 = new GPUChipsetSeries() { Id = 6, Name = "RTX 3000" }; gpuChipsetSeriesList.Add(RTX_3000);
            GPUChipsetSeries R5_R7_R9_200 = new GPUChipsetSeries() { Id = 7, Name = "R5/R7/R9 200" }; gpuChipsetSeriesList.Add(R5_R7_R9_200);
            GPUChipsetSeries R5_R7_R9_300 = new GPUChipsetSeries() { Id = 8, Name = "R5/R7/R9 300" }; gpuChipsetSeriesList.Add(R5_R7_R9_300);
            GPUChipsetSeries RX_400 = new GPUChipsetSeries() { Id = 9, Name = "RX 400" }; gpuChipsetSeriesList.Add(RX_400);
            GPUChipsetSeries RX_500 = new GPUChipsetSeries() { Id = 10, Name = "RX 500" }; gpuChipsetSeriesList.Add(RX_500);
            GPUChipsetSeries RX_Vega = new GPUChipsetSeries() { Id = 11, Name = "RX Vega" }; gpuChipsetSeriesList.Add(RX_Vega);
            GPUChipsetSeries VII = new GPUChipsetSeries() { Id = 12, Name = "VII" }; gpuChipsetSeriesList.Add(VII);
            GPUChipsetSeries RX_5000 = new GPUChipsetSeries() { Id = 13, Name = "RX 5000" }; gpuChipsetSeriesList.Add(RX_5000);
            GPUChipsetSeries RX_6000 = new GPUChipsetSeries() { Id = 14, Name = "RX 6000" }; gpuChipsetSeriesList.Add(RX_6000);
            #endregion
            if (!_context.GPUChipsetSeries.Any())
            {
                _context.GPUChipsetSeries.AddRange(gpuChipsetSeriesList);
            }
            #region GPUChipset Seed
            List<GPUChipset> gpuChipsets = new List<GPUChipset>();
            GPUChipset GeForce_GTX_750_Ti = new GPUChipset() { Id = 1, Name = "GeForce GTX 750 Ti", ChipsetSeries = GTX_700 }; gpuChipsets.Add(GeForce_GTX_750_Ti);
            GPUChipset GeForce_GTX_950 = new GPUChipset() { Id = 2, Name = "GeForce GTX 950", ChipsetSeries = GTX_900 }; gpuChipsets.Add(GeForce_GTX_950);
            GPUChipset GeForce_GTX_960 = new GPUChipset() { Id = 3, Name = "GeForce GTX 960", ChipsetSeries = GTX_900 }; gpuChipsets.Add(GeForce_GTX_960);
            GPUChipset GeForce_GTX_970 = new GPUChipset() { Id = 4, Name = "GeForce GTX 970", ChipsetSeries = GTX_900 }; gpuChipsets.Add(GeForce_GTX_970);
            GPUChipset GeForce_GTX_980 = new GPUChipset() { Id = 5, Name = "GeForce GTX 980", ChipsetSeries = GTX_900 }; gpuChipsets.Add(GeForce_GTX_980);
            GPUChipset GeForce_GTX_980_Ti = new GPUChipset() { Id = 6, Name = "GeForce GTX 980 Ti", ChipsetSeries = GTX_900 }; gpuChipsets.Add(GeForce_GTX_980_Ti);
            GPUChipset GeForce_GT_1030 = new GPUChipset() { Id = 7, Name = "GeForce GT 1030", ChipsetSeries = GTX_1000 }; gpuChipsets.Add(GeForce_GT_1030);
            GPUChipset GeForce_GTX_1050 = new GPUChipset() { Id = 8, Name = "GeForce GTX 1050", ChipsetSeries = GTX_1000 }; gpuChipsets.Add(GeForce_GTX_1050);
            GPUChipset GeForce_GTX_1050_Ti = new GPUChipset() { Id = 9, Name = "GeForce GTX 1050 Ti", ChipsetSeries = GTX_1000 }; gpuChipsets.Add(GeForce_GTX_1050_Ti);
            GPUChipset GeForce_GTX_1060 = new GPUChipset() { Id = 10, Name = "GeForce GTX 1060", ChipsetSeries = GTX_1000 }; gpuChipsets.Add(GeForce_GTX_1060);
            GPUChipset GeForce_GTX_1070 = new GPUChipset() { Id = 11, Name = "GeForce GTX 1070", ChipsetSeries = GTX_1000 }; gpuChipsets.Add(GeForce_GTX_1070);
            GPUChipset GeForce_GTX_1070_Ti = new GPUChipset() { Id = 12, Name = "GeForce GTX 1070 Ti", ChipsetSeries = GTX_1000 }; gpuChipsets.Add(GeForce_GTX_1070_Ti);
            GPUChipset GeForce_GTX_1080 = new GPUChipset() { Id = 13, Name = "GeForce GTX 1080", ChipsetSeries = GTX_1000 }; gpuChipsets.Add(GeForce_GTX_1080);
            GPUChipset GeForce_GTX_1080_Ti = new GPUChipset() { Id = 14, Name = "GeForce GTX 1080 Ti", ChipsetSeries = GTX_1000 }; gpuChipsets.Add(GeForce_GTX_1080_Ti);
            GPUChipset GeForce_GTX_1650 = new GPUChipset() { Id = 15, Name = "GeForce GTX 1650", ChipsetSeries = GTX_1600 }; gpuChipsets.Add(GeForce_GTX_1650);
            GPUChipset GeForce_GTX_1660_Super = new GPUChipset() { Id = 16, Name = "GeForce GTX 1660 Super", ChipsetSeries = GTX_1600 }; gpuChipsets.Add(GeForce_GTX_1660_Super);
            GPUChipset GeForce_GTX_1660_Ti = new GPUChipset() { Id = 17, Name = "GeForce GTX 1660 Ti", ChipsetSeries = GTX_1600 }; gpuChipsets.Add(GeForce_GTX_1660_Ti);
            GPUChipset Geforce_RTX_2060 = new GPUChipset() { Id = 18, Name = "Geforce RTX 2060", ChipsetSeries = RTX_2000 }; gpuChipsets.Add(Geforce_RTX_2060);
            GPUChipset GeForce_RTX_2060_Super = new GPUChipset() { Id = 19, Name = "GeForce RTX 2060 Super", ChipsetSeries = RTX_2000 }; gpuChipsets.Add(GeForce_RTX_2060_Super);
            GPUChipset Geforce_RTX_2070 = new GPUChipset() { Id = 20, Name = "Geforce RTX 2070", ChipsetSeries = RTX_2000 }; gpuChipsets.Add(Geforce_RTX_2070);
            GPUChipset GeForce_RTX_2070_Super = new GPUChipset() { Id = 21, Name = "GeForce RTX 2070 Super", ChipsetSeries = RTX_2000 }; gpuChipsets.Add(GeForce_RTX_2070_Super);
            GPUChipset GeForce_RTX_2080 = new GPUChipset() { Id = 22, Name = "GeForce RTX 2080", ChipsetSeries = RTX_2000 }; gpuChipsets.Add(GeForce_RTX_2080);
            GPUChipset GeForce_RTX_2080_Super = new GPUChipset() { Id = 23, Name = "GeForce RTX 2080 Super", ChipsetSeries = RTX_2000 }; gpuChipsets.Add(GeForce_RTX_2080_Super);
            GPUChipset GeForce_RTX_2080_Ti = new GPUChipset() { Id = 24, Name = "GeForce RTX 2080 Ti", ChipsetSeries = RTX_2000 }; gpuChipsets.Add(GeForce_RTX_2080_Ti);
            GPUChipset GeForce_RTX_3060 = new GPUChipset() { Id = 25, Name = "GeForce RTX 3060", ChipsetSeries = RTX_3000 }; gpuChipsets.Add(GeForce_RTX_3060);
            GPUChipset GeForce_RTX_3060_Ti = new GPUChipset() { Id = 26, Name = "GeForce RTX 3060 Ti", ChipsetSeries = RTX_3000 }; gpuChipsets.Add(GeForce_RTX_3060_Ti);
            GPUChipset GeForce_RTX_3070 = new GPUChipset() { Id = 27, Name = "GeForce RTX 3070", ChipsetSeries = RTX_3000 }; gpuChipsets.Add(GeForce_RTX_3070);
            GPUChipset GeForce_RTX_3070_Ti = new GPUChipset() { Id = 28, Name = "GeForce RTX 3070 Ti", ChipsetSeries = RTX_3000 }; gpuChipsets.Add(GeForce_RTX_3070_Ti);
            GPUChipset GeForce_RTX_3080 = new GPUChipset() { Id = 29, Name = "GeForce RTX 3080", ChipsetSeries = RTX_3000 }; gpuChipsets.Add(GeForce_RTX_3080);
            GPUChipset GeForce_RTX_3080_Ti = new GPUChipset() { Id = 30, Name = "GeForce RTX 3080 Ti", ChipsetSeries = RTX_3000 }; gpuChipsets.Add(GeForce_RTX_3080_Ti);
            GPUChipset GeForce_RTX_3090 = new GPUChipset() { Id = 31, Name = "GeForce RTX 3090", ChipsetSeries = RTX_3000 }; gpuChipsets.Add(GeForce_RTX_3090);
            GPUChipset Radeon_R9_280 = new GPUChipset() { Id = 32, Name = "Radeon R9 280", ChipsetSeries = R5_R7_R9_200 }; gpuChipsets.Add(Radeon_R9_280);
            GPUChipset Radeon_R9_290 = new GPUChipset() { Id = 33, Name = "Radeon R9 290", ChipsetSeries = R5_R7_R9_200 }; gpuChipsets.Add(Radeon_R9_290);
            GPUChipset Radeon_R9_370 = new GPUChipset() { Id = 34, Name = "Radeon R9 370", ChipsetSeries = R5_R7_R9_300 }; gpuChipsets.Add(Radeon_R9_370);
            GPUChipset Radeon_R9_380 = new GPUChipset() { Id = 35, Name = "Radeon R9 380", ChipsetSeries = R5_R7_R9_300 }; gpuChipsets.Add(Radeon_R9_380);
            GPUChipset Radeon_R9_390 = new GPUChipset() { Id = 36, Name = "Radeon R9 390", ChipsetSeries = R5_R7_R9_300 }; gpuChipsets.Add(Radeon_R9_390);
            GPUChipset Radeon_R9_390X = new GPUChipset() { Id = 37, Name = "Radeon R9 390X", ChipsetSeries = R5_R7_R9_300 }; gpuChipsets.Add(Radeon_R9_390X);
            GPUChipset Radeon_RX_470 = new GPUChipset() { Id = 38, Name = "Radeon RX 470", ChipsetSeries = RX_400 }; gpuChipsets.Add(Radeon_RX_470);
            GPUChipset Radeon_RX_480 = new GPUChipset() { Id = 39, Name = "Radeon RX 480", ChipsetSeries = RX_400 }; gpuChipsets.Add(Radeon_RX_480);
            GPUChipset Radeon_RX560 = new GPUChipset() { Id = 40, Name = "Radeon RX560", ChipsetSeries = RX_500 }; gpuChipsets.Add(Radeon_RX560);
            GPUChipset Radeon_RX570 = new GPUChipset() { Id = 41, Name = "Radeon RX570", ChipsetSeries = RX_500 }; gpuChipsets.Add(Radeon_RX570);
            GPUChipset Radeon_RX580 = new GPUChipset() { Id = 42, Name = "Radeon RX580", ChipsetSeries = RX_500 }; gpuChipsets.Add(Radeon_RX580);
            GPUChipset Radeon_RX590 = new GPUChipset() { Id = 43, Name = "Radeon RX590", ChipsetSeries = RX_500 }; gpuChipsets.Add(Radeon_RX590);
            GPUChipset Radeon_RX_VEGA_56 = new GPUChipset() { Id = 44, Name = "Radeon RX VEGA 56", ChipsetSeries = RX_Vega }; gpuChipsets.Add(Radeon_RX_VEGA_56);
            GPUChipset Radeon_RX_VEGA_64 = new GPUChipset() { Id = 45, Name = "Radeon RX VEGA 64", ChipsetSeries = RX_Vega }; gpuChipsets.Add(Radeon_RX_VEGA_64);
            GPUChipset Radeon_VII = new GPUChipset() { Id = 46, Name = "Radeon VII", ChipsetSeries = VII }; gpuChipsets.Add(Radeon_VII);
            GPUChipset Radeon_RX_5500_XT = new GPUChipset() { Id = 47, Name = "Radeon RX 5500 XT", ChipsetSeries = RX_5000 }; gpuChipsets.Add(Radeon_RX_5500_XT);
            GPUChipset Radeon_RX_5600_XT = new GPUChipset() { Id = 48, Name = "Radeon RX 5600 XT", ChipsetSeries = RX_5000 }; gpuChipsets.Add(Radeon_RX_5600_XT);
            GPUChipset Radeon_RX5700 = new GPUChipset() { Id = 49, Name = "Radeon RX5700", ChipsetSeries = RX_5000 }; gpuChipsets.Add(Radeon_RX5700);
            GPUChipset Radeon_RX5700_XT = new GPUChipset() { Id = 50, Name = "Radeon RX5700 XT", ChipsetSeries = RX_5000 }; gpuChipsets.Add(Radeon_RX5700_XT);
            GPUChipset Radeon_RX_6700_XT = new GPUChipset() { Id = 51, Name = "Radeon RX 6700 XT", ChipsetSeries = RX_6000 }; gpuChipsets.Add(Radeon_RX_6700_XT);
            GPUChipset Radeon_RX_6800 = new GPUChipset() { Id = 52, Name = "Radeon RX 6800", ChipsetSeries = RX_6000 }; gpuChipsets.Add(Radeon_RX_6800);
            GPUChipset Radeon_RX_6800_XT = new GPUChipset() { Id = 53, Name = "Radeon RX 6800 XT", ChipsetSeries = RX_6000 }; gpuChipsets.Add(Radeon_RX_6800_XT);
            GPUChipset Radeon_RX_6900_XT = new GPUChipset() { Id = 54, Name = "Radeon RX 6900 XT", ChipsetSeries = RX_6000 }; gpuChipsets.Add(Radeon_RX_6900_XT);
            #endregion
            if (!_context.GPUChipset.Any())
            {
                _context.GPUChipset.AddRange(gpuChipsets);
            }
            #region Manufacturers Seed
            List<Manufacturer> manufacturers = new List<Manufacturer>();
            Manufacturer Acer = new Manufacturer() { Id = 1, Name = "Acer" }; manufacturers.Add(Acer);
            Manufacturer ADATA = new Manufacturer() { Id = 2, Name = "ADATA" }; manufacturers.Add(ADATA);
            Manufacturer Alphacool = new Manufacturer() { Id = 3, Name = "Alphacool" }; manufacturers.Add(Alphacool);
            Manufacturer AMD = new Manufacturer() { Id = 4, Name = "AMD" }; manufacturers.Add(AMD);
            Manufacturer Antec = new Manufacturer() { Id = 5, Name = "Antec" }; manufacturers.Add(Antec);
            Manufacturer ARCTIC = new Manufacturer() { Id = 6, Name = "ARCTIC" }; manufacturers.Add(ARCTIC);
            Manufacturer ASRock = new Manufacturer() { Id = 7, Name = "ASRock" }; manufacturers.Add(ASRock);
            Manufacturer ASUS = new Manufacturer() { Id = 8, Name = "ASUS" }; manufacturers.Add(ASUS);
            Manufacturer be_quiet_ = new Manufacturer() { Id = 9, Name = "be quiet!" }; manufacturers.Add(be_quiet_);
            Manufacturer BenQ = new Manufacturer() { Id = 10, Name = "BenQ" }; manufacturers.Add(BenQ);
            Manufacturer Colorful = new Manufacturer() { Id = 11, Name = "Colorful" }; manufacturers.Add(Colorful);
            Manufacturer Cooler_Master = new Manufacturer() { Id = 12, Name = "Cooler Master" }; manufacturers.Add(Cooler_Master);
            Manufacturer CORSAIR = new Manufacturer() { Id = 13, Name = "CORSAIR" }; manufacturers.Add(CORSAIR);
            Manufacturer Cryorig = new Manufacturer() { Id = 14, Name = "Cryorig" }; manufacturers.Add(Cryorig);
            Manufacturer Deepcool = new Manufacturer() { Id = 15, Name = "Deepcool" }; manufacturers.Add(Deepcool);
            Manufacturer DFL = new Manufacturer() { Id = 16, Name = "DFL" }; manufacturers.Add(DFL);
            Manufacturer EKWB = new Manufacturer() { Id = 17, Name = "EKWB" }; manufacturers.Add(EKWB);
            Manufacturer EVGA = new Manufacturer() { Id = 18, Name = "EVGA" }; manufacturers.Add(EVGA);
            Manufacturer Fractal_Design = new Manufacturer() { Id = 19, Name = "Fractal Design" }; manufacturers.Add(Fractal_Design);
            Manufacturer FSP = new Manufacturer() { Id = 20, Name = "FSP" }; manufacturers.Add(FSP);
            Manufacturer G_SKILL = new Manufacturer() { Id = 21, Name = "G.SKILL" }; manufacturers.Add(G_SKILL);
            Manufacturer GamerStorm = new Manufacturer() { Id = 22, Name = "GamerStorm" }; manufacturers.Add(GamerStorm);
            Manufacturer GIGABYTE = new Manufacturer() { Id = 23, Name = "GIGABYTE" }; manufacturers.Add(GIGABYTE);
            Manufacturer HyperX = new Manufacturer() { Id = 24, Name = "HyperX" }; manufacturers.Add(HyperX);
            Manufacturer Intel = new Manufacturer() { Id = 25, Name = "Intel" }; manufacturers.Add(Intel);
            Manufacturer InWin = new Manufacturer() { Id = 26, Name = "InWin" }; manufacturers.Add(InWin);
            Manufacturer Kingston = new Manufacturer() { Id = 27, Name = "Kingston" }; manufacturers.Add(Kingston);
            Manufacturer Kolink = new Manufacturer() { Id = 28, Name = "Kolink" }; manufacturers.Add(Kolink);
            Manufacturer Lian_Li = new Manufacturer() { Id = 29, Name = "Lian Li" }; manufacturers.Add(Lian_Li);
            Manufacturer Mediatonic = new Manufacturer() { Id = 30, Name = "Mediatonic" }; manufacturers.Add(Mediatonic);
            Manufacturer Mortoni = new Manufacturer() { Id = 31, Name = "Mortoni" }; manufacturers.Add(Mortoni);
            Manufacturer MSI = new Manufacturer() { Id = 32, Name = "MSI" }; manufacturers.Add(MSI);
            Manufacturer NIMBUS_Data = new Manufacturer() { Id = 33, Name = "NIMBUS Data" }; manufacturers.Add(NIMBUS_Data);
            Manufacturer NVIDIA = new Manufacturer() { Id = 34, Name = "NVIDIA" }; manufacturers.Add(NVIDIA);
            Manufacturer NZXT = new Manufacturer() { Id = 35, Name = "NZXT" }; manufacturers.Add(NZXT);
            Manufacturer OCUK = new Manufacturer() { Id = 36, Name = "OCUK" }; manufacturers.Add(OCUK);
            Manufacturer Open_Benchtable = new Manufacturer() { Id = 37, Name = "Open Benchtable" }; manufacturers.Add(Open_Benchtable);
            Manufacturer Patriot = new Manufacturer() { Id = 38, Name = "Patriot" }; manufacturers.Add(Patriot);
            Manufacturer Raijintek = new Manufacturer() { Id = 39, Name = "Raijintek" }; manufacturers.Add(Raijintek);
            Manufacturer Razer = new Manufacturer() { Id = 40, Name = "Razer" }; manufacturers.Add(Razer);
            Manufacturer ROG = new Manufacturer() { Id = 41, Name = "ROG" }; manufacturers.Add(ROG);
            Manufacturer Sabrent = new Manufacturer() { Id = 42, Name = "Sabrent" }; manufacturers.Add(Sabrent);
            Manufacturer Seagate = new Manufacturer() { Id = 43, Name = "Seagate" }; manufacturers.Add(Seagate);
            Manufacturer Shean = new Manufacturer() { Id = 44, Name = "Shean" }; manufacturers.Add(Shean);
            Manufacturer SilverStone = new Manufacturer() { Id = 45, Name = "SilverStone" }; manufacturers.Add(SilverStone);
            Manufacturer SteelSeries = new Manufacturer() { Id = 46, Name = "SteelSeries" }; manufacturers.Add(SteelSeries);
            Manufacturer Team_Group = new Manufacturer() { Id = 47, Name = "Team Group" }; manufacturers.Add(Team_Group);
            Manufacturer Thermaltake = new Manufacturer() { Id = 48, Name = "Thermaltake" }; manufacturers.Add(Thermaltake);
            Manufacturer ZOTAC = new Manufacturer() { Id = 49, Name = "ZOTAC" }; manufacturers.Add(ZOTAC);
            #endregion
            if (!_context.Manufacturer.Any())
            {
                _context.Manufacturer.AddRange(manufacturers);
            }
            #region MoboChipset
            List<MoboChipset> moboChipsets = new List<MoboChipset>();
            MoboChipset B450 = new MoboChipset() { Id = 1, Name = "B450" }; moboChipsets.Add(B450);
            MoboChipset B550 = new MoboChipset() { Id = 2, Name = "B550" }; moboChipsets.Add(B550);
            MoboChipset TRX40 = new MoboChipset() { Id = 3, Name = "TRX40" }; moboChipsets.Add(TRX40);
            MoboChipset X570 = new MoboChipset() { Id = 4, Name = "X570" }; moboChipsets.Add(X570);
            MoboChipset Z390 = new MoboChipset() { Id = 5, Name = "Z390" }; moboChipsets.Add(Z390);
            MoboChipset Z590 = new MoboChipset() { Id = 6, Name = "Z590" }; moboChipsets.Add(Z590);
            MoboChipset X299 = new MoboChipset() { Id = 7, Name = "X299" }; moboChipsets.Add(X299);
            MoboChipset X470 = new MoboChipset() { Id = 8, Name = "X470" }; moboChipsets.Add(X470);
            MoboChipset Z370 = new MoboChipset() { Id = 9, Name = "Z370" }; moboChipsets.Add(Z370);
            MoboChipset X399 = new MoboChipset() { Id = 10, Name = "X399" }; moboChipsets.Add(X399);
            MoboChipset B365 = new MoboChipset() { Id = 11, Name = "B365" }; moboChipsets.Add(B365);
            MoboChipset A320 = new MoboChipset() { Id = 12, Name = "A320" }; moboChipsets.Add(A320);
            MoboChipset H170 = new MoboChipset() { Id = 13, Name = "H170" }; moboChipsets.Add(H170);
            MoboChipset Z270 = new MoboChipset() { Id = 14, Name = "Z270" }; moboChipsets.Add(Z270);
            MoboChipset Z490 = new MoboChipset() { Id = 15, Name = "Z490" }; moboChipsets.Add(Z490);
            MoboChipset B360 = new MoboChipset() { Id = 16, Name = "B360" }; moboChipsets.Add(B360);
            MoboChipset B350 = new MoboChipset() { Id = 17, Name = "B350" }; moboChipsets.Add(B350);
            MoboChipset X370 = new MoboChipset() { Id = 18, Name = "X370" }; moboChipsets.Add(X370);
            MoboChipset B250 = new MoboChipset() { Id = 19, Name = "B250" }; moboChipsets.Add(B250);
            MoboChipset H370 = new MoboChipset() { Id = 20, Name = "H370" }; moboChipsets.Add(H370);
            MoboChipset B460 = new MoboChipset() { Id = 21, Name = "B460" }; moboChipsets.Add(B460);
            #endregion
            if (!_context.MoboChipset.Any())
            {
                _context.MoboChipset.AddRange(moboChipsets);
            }
            #region MoboSize
            List<MoboSize> moboSizes = new List<MoboSize>();
            MoboSize Mini_ITX = new MoboSize() { Id = 1, Name = "Mini-ITX" }; moboSizes.Add(Mini_ITX);
            MoboSize Micro_ATX = new MoboSize() { Id = 2, Name = "Micro-ATX" }; moboSizes.Add(Micro_ATX);
            MoboSize S_ATX = new MoboSize() { Id = 3, Name = "S-ATX" }; moboSizes.Add(S_ATX);
            MoboSize E_ATX = new MoboSize() { Id = 4, Name = "E-ATX" }; moboSizes.Add(E_ATX);
            MoboSize XL_ATX = new MoboSize() { Id = 5, Name = "XL-ATX" }; moboSizes.Add(XL_ATX);
            MoboSize SSI_EEB = new MoboSize() { Id = 6, Name = "SSI-EEB" }; moboSizes.Add(SSI_EEB);
            #endregion
            if (!_context.MoboSize.Any())
            {
                _context.MoboSize.AddRange(moboSizes);
            }
            #region MultiGPU
            List<MultiGPU> multiGPUs = new List<MultiGPU>();
            MultiGPU CrossFire = new MultiGPU() { Id = 1, Name = "CrossFire" }; multiGPUs.Add(CrossFire);
            MultiGPU SLI = new MultiGPU() { Id = 2, Name = "SLI" }; multiGPUs.Add(SLI);
            #endregion
            if (!_context.MultiGPU.Any())
            {
                _context.MultiGPU.AddRange(multiGPUs);
            }
            #region PowerConnector
            List<PowerConnector> powerConnectors = new List<PowerConnector>();
            PowerConnector Six_Pin = new PowerConnector() { Id = 1, Name = "Six Pin" }; powerConnectors.Add(Six_Pin);
            PowerConnector Eight_Pin = new PowerConnector() { Id = 2, Name = "Eight Pin" }; powerConnectors.Add(Eight_Pin);
            #endregion
            if (!_context.PowerConnector.Any())
            {
                _context.PowerConnector.AddRange(powerConnectors);
            }
            #region PSUSize
            List<PSUSize> psuSizes = new List<PSUSize>();
            PSUSize SFX = new PSUSize() { Id = 1, Name = "SFX" }; psuSizes.Add(SFX);
            PSUSize ATX = new PSUSize() { Id = 2, Name = "ATX" }; psuSizes.Add(ATX);
            #endregion
            if (!_context.PSUSize.Any())
            {
                _context.PSUSize.AddRange(psuSizes);
            }
            #region CaseFan
            List<CaseFan> caseFans = new List<CaseFan>();
            CaseFan XPG_VENTO_120 = new CaseFan() { Id = 1, Name = "XPG VENTO 120", PartType = PartType.CaseFan, Manufacturer = ADATA, Price = 30, SellPrice = 10, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 45.3, Size = 120, AirPressure = 0.68 }; caseFans.Add(XPG_VENTO_120);
            CaseFan XPG_VENTO_PRO_120_PWM = new CaseFan() { Id = 2, Name = "XPG VENTO PRO 120 PWM", PartType = PartType.CaseFan, Manufacturer = ADATA, Price = 30, SellPrice = 10, LevelUnlock = 30, LevelPercent = 50, Lighting = null, AirFlow = 75, Size = 120, AirPressure = 3.15 }; caseFans.Add(XPG_VENTO_PRO_120_PWM);
            CaseFan Prizm_120_ARGB = new CaseFan() { Id = 3, Name = "Prizm 120 ARGB", PartType = PartType.CaseFan, Manufacturer = Antec, Price = 20, SellPrice = 7, LevelUnlock = 30, LevelPercent = 50, Lighting = Color.RGB, AirFlow = 45.03, Size = 120, AirPressure = 2.56 }; caseFans.Add(Prizm_120_ARGB);
            CaseFan BioniX_F120__Green_ = new CaseFan() { Id = 4, Name = "BioniX F120 (Green)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 13, SellPrice = 4, LevelUnlock = 3, LevelPercent = 60, Lighting = null, AirFlow = 69, Size = 120, AirPressure = 3 }; caseFans.Add(BioniX_F120__Green_);
            CaseFan BioniX_F120__Grey___White_ = new CaseFan() { Id = 5, Name = "BioniX F120 (Grey + White)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 13, SellPrice = 4, LevelUnlock = 3, LevelPercent = 60, Lighting = null, AirFlow = 69, Size = 120, AirPressure = 3 }; caseFans.Add(BioniX_F120__Grey___White_);
            CaseFan BioniX_F120__Grey_ = new CaseFan() { Id = 6, Name = "BioniX F120 (Grey)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 13, SellPrice = 4, LevelUnlock = 3, LevelPercent = 60, Lighting = null, AirFlow = 69, Size = 120, AirPressure = 3 }; caseFans.Add(BioniX_F120__Grey_);
            CaseFan BioniX_F120__Red_ = new CaseFan() { Id = 7, Name = "BioniX F120 (Red)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 13, SellPrice = 4, LevelUnlock = 3, LevelPercent = 60, Lighting = null, AirFlow = 69, Size = 120, AirPressure = 3 }; caseFans.Add(BioniX_F120__Red_);
            CaseFan BioniX_F120__White_ = new CaseFan() { Id = 8, Name = "BioniX F120 (White)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 13, SellPrice = 4, LevelUnlock = 3, LevelPercent = 60, Lighting = null, AirFlow = 69, Size = 120, AirPressure = 3 }; caseFans.Add(BioniX_F120__White_);
            CaseFan BioniX_F120__Yellow_ = new CaseFan() { Id = 9, Name = "BioniX F120 (Yellow)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 13, SellPrice = 4, LevelUnlock = 3, LevelPercent = 60, Lighting = null, AirFlow = 69, Size = 120, AirPressure = 3 }; caseFans.Add(BioniX_F120__Yellow_);
            CaseFan BioniX_F140__Green_ = new CaseFan() { Id = 10, Name = "BioniX F140 (Green)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 14, SellPrice = 5, LevelUnlock = 5, LevelPercent = 1, Lighting = null, AirFlow = 104, Size = 140, AirPressure = 2 }; caseFans.Add(BioniX_F140__Green_);
            CaseFan BioniX_F140__Grey___White_ = new CaseFan() { Id = 11, Name = "BioniX F140 (Grey + White)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 14, SellPrice = 5, LevelUnlock = 5, LevelPercent = 1, Lighting = null, AirFlow = 104, Size = 140, AirPressure = 2 }; caseFans.Add(BioniX_F140__Grey___White_);
            CaseFan BioniX_F140__Grey_ = new CaseFan() { Id = 12, Name = "BioniX F140 (Grey)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 14, SellPrice = 5, LevelUnlock = 5, LevelPercent = 1, Lighting = null, AirFlow = 104, Size = 140, AirPressure = 2 }; caseFans.Add(BioniX_F140__Grey_);
            CaseFan BioniX_F140__Red_ = new CaseFan() { Id = 13, Name = "BioniX F140 (Red)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 14, SellPrice = 5, LevelUnlock = 5, LevelPercent = 1, Lighting = null, AirFlow = 104, Size = 140, AirPressure = 2 }; caseFans.Add(BioniX_F140__Red_);
            CaseFan BioniX_F140__White_ = new CaseFan() { Id = 14, Name = "BioniX F140 (White)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 14, SellPrice = 5, LevelUnlock = 5, LevelPercent = 1, Lighting = null, AirFlow = 104, Size = 140, AirPressure = 2 }; caseFans.Add(BioniX_F140__White_);
            CaseFan BioniX_F140__Yellow_ = new CaseFan() { Id = 15, Name = "BioniX F140 (Yellow)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 14, SellPrice = 5, LevelUnlock = 5, LevelPercent = 1, Lighting = null, AirFlow = 104, Size = 140, AirPressure = 2 }; caseFans.Add(BioniX_F140__Yellow_);
            CaseFan BioniX_P120__Green_ = new CaseFan() { Id = 16, Name = "BioniX P120 (Green)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 16, SellPrice = 5, LevelUnlock = 13, LevelPercent = 10, Lighting = null, AirFlow = 67.56, Size = 120, AirPressure = 2.75 }; caseFans.Add(BioniX_P120__Green_);
            CaseFan BioniX_P120__Grey___White_ = new CaseFan() { Id = 17, Name = "BioniX P120 (Grey + White)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 16, SellPrice = 5, LevelUnlock = 13, LevelPercent = 10, Lighting = null, AirFlow = 67.56, Size = 120, AirPressure = 2.75 }; caseFans.Add(BioniX_P120__Grey___White_);
            CaseFan BioniX_P120__Grey_ = new CaseFan() { Id = 18, Name = "BioniX P120 (Grey)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 16, SellPrice = 5, LevelUnlock = 13, LevelPercent = 10, Lighting = null, AirFlow = 67.56, Size = 120, AirPressure = 2.75 }; caseFans.Add(BioniX_P120__Grey_);
            CaseFan BioniX_P120__Red_ = new CaseFan() { Id = 19, Name = "BioniX P120 (Red)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 16, SellPrice = 5, LevelUnlock = 13, LevelPercent = 10, Lighting = null, AirFlow = 67.56, Size = 120, AirPressure = 2.75 }; caseFans.Add(BioniX_P120__Red_);
            CaseFan BioniX_P120__White_ = new CaseFan() { Id = 20, Name = "BioniX P120 (White)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 16, SellPrice = 5, LevelUnlock = 13, LevelPercent = 10, Lighting = null, AirFlow = 67.56, Size = 120, AirPressure = 2.75 }; caseFans.Add(BioniX_P120__White_);
            CaseFan BioniX_P120__Yellow_ = new CaseFan() { Id = 21, Name = "BioniX P120 (Yellow)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 16, SellPrice = 5, LevelUnlock = 13, LevelPercent = 10, Lighting = null, AirFlow = 67.56, Size = 120, AirPressure = 2.75 }; caseFans.Add(BioniX_P120__Yellow_);
            CaseFan BioniX_P120_ARGB = new CaseFan() { Id = 22, Name = "BioniX P120 ARGB", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 30, SellPrice = 20, LevelUnlock = 1, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 48, Size = 120, AirPressure = 2.1 }; caseFans.Add(BioniX_P120_ARGB);
            CaseFan BioniX_P140__Grey___White_ = new CaseFan() { Id = 23, Name = "BioniX P140 (Grey + White)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 18, SellPrice = 6, LevelUnlock = 13, LevelPercent = 10, Lighting = null, AirFlow = 77.6, Size = 140, AirPressure = 2.85 }; caseFans.Add(BioniX_P140__Grey___White_);
            CaseFan BioniX_P140__Grey_ = new CaseFan() { Id = 24, Name = "BioniX P140 (Grey)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 18, SellPrice = 6, LevelUnlock = 13, LevelPercent = 10, Lighting = null, AirFlow = 77.6, Size = 140, AirPressure = 2.85 }; caseFans.Add(BioniX_P140__Grey_);
            CaseFan BioniX_P140__Red_ = new CaseFan() { Id = 25, Name = "BioniX P140 (Red)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 18, SellPrice = 6, LevelUnlock = 13, LevelPercent = 10, Lighting = null, AirFlow = 77.6, Size = 140, AirPressure = 2.85 }; caseFans.Add(BioniX_P140__Red_);
            CaseFan BioniX_P140__White_ = new CaseFan() { Id = 26, Name = "BioniX P140 (White)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 18, SellPrice = 6, LevelUnlock = 13, LevelPercent = 10, Lighting = null, AirFlow = 77.6, Size = 140, AirPressure = 2.85 }; caseFans.Add(BioniX_P140__White_);
            CaseFan F12_PWM_PST = new CaseFan() { Id = 27, Name = "F12 PWM PST", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 10, SellPrice = 3, LevelUnlock = 11, LevelPercent = 1, Lighting = null, AirFlow = 53, Size = 120, AirPressure = 0.87 }; caseFans.Add(F12_PWM_PST);
            CaseFan F12_PWM_PST_CO = new CaseFan() { Id = 28, Name = "F12 PWM PST CO", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 12, SellPrice = 4, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 53, Size = 120, AirPressure = 2 }; caseFans.Add(F12_PWM_PST_CO);
            CaseFan F12_Silent = new CaseFan() { Id = 29, Name = "F12 Silent", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 10, SellPrice = 3, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 37, Size = 120, AirPressure = 2 }; caseFans.Add(F12_Silent);
            CaseFan F14_PWM_PST = new CaseFan() { Id = 30, Name = "F14 PWM PST", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 10, SellPrice = 3, LevelUnlock = 11, LevelPercent = 1, Lighting = null, AirFlow = 74, Size = 140, AirPressure = 2.4 }; caseFans.Add(F14_PWM_PST);
            CaseFan F14_PWM_PST_CO = new CaseFan() { Id = 31, Name = "F14 PWM PST CO", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 13, SellPrice = 4, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 74, Size = 140, AirPressure = 2 }; caseFans.Add(F14_PWM_PST_CO);
            CaseFan F14_Silent = new CaseFan() { Id = 32, Name = "F14 Silent", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 11, SellPrice = 4, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 46, Size = 140, AirPressure = 2 }; caseFans.Add(F14_Silent);
            CaseFan P12 = new CaseFan() { Id = 33, Name = "P12", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 10, SellPrice = 3, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 56.3, Size = 120, AirPressure = 2 }; caseFans.Add(P12);
            CaseFan P12_PWM__Black_Transparent_ = new CaseFan() { Id = 34, Name = "P12 PWM (Black Transparent)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 10, SellPrice = 3, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 56.3, Size = 120, AirPressure = 2 }; caseFans.Add(P12_PWM__Black_Transparent_);
            CaseFan P12_PWM__Black_ = new CaseFan() { Id = 35, Name = "P12 PWM (Black)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 10, SellPrice = 3, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 56.3, Size = 120, AirPressure = 2 }; caseFans.Add(P12_PWM__Black_);
            CaseFan P12_PWM__White_Transparent_ = new CaseFan() { Id = 36, Name = "P12 PWM (White Transparent)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 10, SellPrice = 3, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 56.3, Size = 120, AirPressure = 2 }; caseFans.Add(P12_PWM__White_Transparent_);
            CaseFan P12_PWM__White_ = new CaseFan() { Id = 37, Name = "P12 PWM (White)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 10, SellPrice = 3, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 56.3, Size = 120, AirPressure = 2 }; caseFans.Add(P12_PWM__White_);
            CaseFan P12_PWM_PST__Black_Transparent_ = new CaseFan() { Id = 38, Name = "P12 PWM PST (Black Transparent)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 11, SellPrice = 4, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 56.3, Size = 120, AirPressure = 2 }; caseFans.Add(P12_PWM_PST__Black_Transparent_);
            CaseFan P12_PWM_PST__Black_ = new CaseFan() { Id = 39, Name = "P12 PWM PST (Black)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 11, SellPrice = 4, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 56.3, Size = 120, AirPressure = 2 }; caseFans.Add(P12_PWM_PST__Black_);
            CaseFan P12_PWM_PST__White_Transparent_ = new CaseFan() { Id = 40, Name = "P12 PWM PST (White Transparent)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 11, SellPrice = 4, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 56.3, Size = 120, AirPressure = 2 }; caseFans.Add(P12_PWM_PST__White_Transparent_);
            CaseFan P12_PWM_PST__White_ = new CaseFan() { Id = 41, Name = "P12 PWM PST (White)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 11, SellPrice = 4, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 56.3, Size = 120, AirPressure = 2 }; caseFans.Add(P12_PWM_PST__White_);
            CaseFan P12_PWM_PST_CO = new CaseFan() { Id = 42, Name = "P12 PWM PST CO", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 11, SellPrice = 4, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 56.3, Size = 120, AirPressure = 2 }; caseFans.Add(P12_PWM_PST_CO);
            CaseFan P12_Silent = new CaseFan() { Id = 43, Name = "P12 Silent", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 10, SellPrice = 3, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 24.1, Size = 120, AirPressure = 2 }; caseFans.Add(P12_Silent);
            CaseFan P12_Slim_PWM_PST = new CaseFan() { Id = 44, Name = "P12 Slim PWM PST", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 13, SellPrice = 20, LevelUnlock = 1, LevelPercent = 1, Lighting = null, AirFlow = 42.1, Size = 120, AirPressure = 1.45 }; caseFans.Add(P12_Slim_PWM_PST);
            CaseFan P12_TC = new CaseFan() { Id = 45, Name = "P12 TC", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 20, SellPrice = 7, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 56.3, Size = 120, AirPressure = 2 }; caseFans.Add(P12_TC);
            CaseFan P14 = new CaseFan() { Id = 46, Name = "P14", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 14, SellPrice = 5, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 72.8, Size = 140, AirPressure = 2 }; caseFans.Add(P14);
            CaseFan P14_PWM = new CaseFan() { Id = 47, Name = "P14 PWM", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 14, SellPrice = 5, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 72.8, Size = 140, AirPressure = 2 }; caseFans.Add(P14_PWM);
            CaseFan P14_PWM_PST = new CaseFan() { Id = 48, Name = "P14 PWM PST", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 14, SellPrice = 5, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 72.8, Size = 140, AirPressure = 2 }; caseFans.Add(P14_PWM_PST);
            CaseFan P14_PWM_PST_CO = new CaseFan() { Id = 49, Name = "P14 PWM PST CO", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 14, SellPrice = 5, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 72.8, Size = 140, AirPressure = 2 }; caseFans.Add(P14_PWM_PST_CO);
            CaseFan P14_Silent = new CaseFan() { Id = 50, Name = "P14 Silent", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 14, SellPrice = 5, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 29.8, Size = 140, AirPressure = 2 }; caseFans.Add(P14_Silent);
            CaseFan Pure_Wings_2_120mm = new CaseFan() { Id = 51, Name = "Pure Wings 2 120mm", PartType = PartType.CaseFan, Manufacturer = be_quiet_, Price = 10, SellPrice = 3, LevelUnlock = 27, LevelPercent = 30, Lighting = null, AirFlow = 65.51, Size = 120, AirPressure = 2.23 }; caseFans.Add(Pure_Wings_2_120mm);
            CaseFan Pure_Wings_2_140mm = new CaseFan() { Id = 52, Name = "Pure Wings 2 140mm", PartType = PartType.CaseFan, Manufacturer = be_quiet_, Price = 13, SellPrice = 4, LevelUnlock = 27, LevelPercent = 30, Lighting = null, AirFlow = 82.4, Size = 140, AirPressure = 1.82 }; caseFans.Add(Pure_Wings_2_140mm);
            CaseFan Shadow_Wings_2_120mm = new CaseFan() { Id = 53, Name = "Shadow Wings 2 120mm", PartType = PartType.CaseFan, Manufacturer = be_quiet_, Price = 16, SellPrice = 5, LevelUnlock = 27, LevelPercent = 70, Lighting = null, AirFlow = 38.5, Size = 120, AirPressure = 0.82 }; caseFans.Add(Shadow_Wings_2_120mm);
            CaseFan Shadow_Wings_2_140mm = new CaseFan() { Id = 54, Name = "Shadow Wings 2 140mm", PartType = PartType.CaseFan, Manufacturer = be_quiet_, Price = 19, SellPrice = 6, LevelUnlock = 27, LevelPercent = 70, Lighting = null, AirFlow = 49.8, Size = 140, AirPressure = 0.58 }; caseFans.Add(Shadow_Wings_2_140mm);
            CaseFan Silent_Wings_3_120mm = new CaseFan() { Id = 55, Name = "Silent Wings 3 120mm", PartType = PartType.CaseFan, Manufacturer = be_quiet_, Price = 7, SellPrice = 2, LevelUnlock = 27, LevelPercent = 1, Lighting = null, AirFlow = 50.5, Size = 120, AirPressure = 1.79 }; caseFans.Add(Silent_Wings_3_120mm);
            CaseFan Silent_Wings_3_140mm = new CaseFan() { Id = 56, Name = "Silent Wings 3 140mm", PartType = PartType.CaseFan, Manufacturer = be_quiet_, Price = 8, SellPrice = 3, LevelUnlock = 27, LevelPercent = 1, Lighting = null, AirFlow = 59.5, Size = 140, AirPressure = 1.08 }; caseFans.Add(Silent_Wings_3_140mm);
            CaseFan MasterCase_H500P_200mm_RGB = new CaseFan() { Id = 57, Name = "MasterCase H500P 200mm RGB", PartType = PartType.CaseFan, Manufacturer = Cooler_Master, Price = 10, SellPrice = 3, LevelUnlock = 3, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 90, Size = 200, AirPressure = 0.88 }; caseFans.Add(MasterCase_H500P_200mm_RGB);
            CaseFan SickleFlow_120mm = new CaseFan() { Id = 58, Name = "SickleFlow 120mm", PartType = PartType.CaseFan, Manufacturer = Cooler_Master, Price = 30, SellPrice = 10, LevelUnlock = 32, LevelPercent = 50, Lighting = null, AirFlow = 55, Size = 120, AirPressure = 2.5 }; caseFans.Add(SickleFlow_120mm);
            CaseFan SILENCIO_FP_120_PWM = new CaseFan() { Id = 59, Name = "SILENCIO FP 120 PWM", PartType = PartType.CaseFan, Manufacturer = Cooler_Master, Price = 30, SellPrice = 10, LevelUnlock = 31, LevelPercent = 1, Lighting = null, AirFlow = 52.02, Size = 120, AirPressure = 2 }; caseFans.Add(SILENCIO_FP_120_PWM);
            CaseFan HD120_RGB_LED = new CaseFan() { Id = 60, Name = "HD120 RGB LED", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 30, SellPrice = 10, LevelUnlock = 18, LevelPercent = 40, Lighting = Color.RGB, AirFlow = 54.4, Size = 120, AirPressure = 2.25 }; caseFans.Add(HD120_RGB_LED);
            CaseFan HD140_RGB_LED = new CaseFan() { Id = 61, Name = "HD140 RGB LED", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 33, SellPrice = 11, LevelUnlock = 18, LevelPercent = 40, Lighting = Color.RGB, AirFlow = 74, Size = 140, AirPressure = 1.85 }; caseFans.Add(HD140_RGB_LED);
            CaseFan iCUE_QL120_RGB_120mm_PWM__Black_ = new CaseFan() { Id = 62, Name = "iCUE QL120 RGB 120mm PWM (Black)", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 30, SellPrice = 10, LevelUnlock = 30, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 41.8, Size = 120, AirPressure = 2 }; caseFans.Add(iCUE_QL120_RGB_120mm_PWM__Black_);
            CaseFan iCUE_QL120_RGB_120mm_PWM__White_ = new CaseFan() { Id = 63, Name = "iCUE QL120 RGB 120mm PWM (White)", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 30, SellPrice = 10, LevelUnlock = 30, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 41.8, Size = 120, AirPressure = 2 }; caseFans.Add(iCUE_QL120_RGB_120mm_PWM__White_);
            CaseFan iCUE_QL140_RGB_140mm_PWM__Black_ = new CaseFan() { Id = 64, Name = "iCUE QL140 RGB 140mm PWM (Black)", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 35, SellPrice = 12, LevelUnlock = 30, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 52.02, Size = 140, AirPressure = 2 }; caseFans.Add(iCUE_QL140_RGB_140mm_PWM__Black_);
            CaseFan iCUE_QL140_RGB_140mm_PWM__White_ = new CaseFan() { Id = 65, Name = "iCUE QL140 RGB 140mm PWM (White)", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 35, SellPrice = 12, LevelUnlock = 30, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 52.02, Size = 140, AirPressure = 2 }; caseFans.Add(iCUE_QL140_RGB_140mm_PWM__White_);
            CaseFan LL120_RGB_LED = new CaseFan() { Id = 66, Name = "LL120 RGB LED", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 35, SellPrice = 12, LevelUnlock = 18, LevelPercent = 80, Lighting = Color.RGB, AirFlow = 44, Size = 120, AirPressure = 1.61 }; caseFans.Add(LL120_RGB_LED);
            CaseFan LL120_RGB_LED__White_ = new CaseFan() { Id = 67, Name = "LL120 RGB LED (White)", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 35, SellPrice = 12, LevelUnlock = 18, LevelPercent = 80, Lighting = Color.RGB, AirFlow = 44, Size = 120, AirPressure = 1.61 }; caseFans.Add(LL120_RGB_LED__White_);
            CaseFan LL140_RGB_LED = new CaseFan() { Id = 68, Name = "LL140 RGB LED", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 38, SellPrice = 13, LevelUnlock = 18, LevelPercent = 80, Lighting = Color.RGB, AirFlow = 52, Size = 140, AirPressure = 1.52 }; caseFans.Add(LL140_RGB_LED);
            CaseFan ML120 = new CaseFan() { Id = 69, Name = "ML120", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 25, SellPrice = 8, LevelUnlock = 2, LevelPercent = 1, Lighting = null, AirFlow = 75, Size = 120, AirPressure = 4.2 }; caseFans.Add(ML120);
            CaseFan ML140 = new CaseFan() { Id = 70, Name = "ML140", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 28, SellPrice = 9, LevelUnlock = 2, LevelPercent = 1, Lighting = null, AirFlow = 97, Size = 140, AirPressure = 3 }; caseFans.Add(ML140);
            CaseFan SP120__Black_ = new CaseFan() { Id = 71, Name = "SP120 (Black)", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 20, SellPrice = 7, LevelUnlock = 28, LevelPercent = 1, Lighting = null, AirFlow = 45, Size = 120, AirPressure = 1.46 }; caseFans.Add(SP120__Black_);
            CaseFan SP120__White_ = new CaseFan() { Id = 72, Name = "SP120 (White)", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 20, SellPrice = 7, LevelUnlock = 28, LevelPercent = 1, Lighting = null, AirFlow = 45, Size = 120, AirPressure = 1.46 }; caseFans.Add(SP120__White_);
            CaseFan SP120_RGB_Elite__Black_ = new CaseFan() { Id = 73, Name = "SP120 RGB Elite (Black)", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 25, SellPrice = 8, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 45, Size = 120, AirPressure = 1.46 }; caseFans.Add(SP120_RGB_Elite__Black_);
            CaseFan SP120_RGB_Elite__White_ = new CaseFan() { Id = 74, Name = "SP120 RGB Elite (White)", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 25, SellPrice = 8, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 45, Size = 120, AirPressure = 1.46 }; caseFans.Add(SP120_RGB_Elite__White_);
            CaseFan SP120_RGB_LED = new CaseFan() { Id = 75, Name = "SP120 RGB LED", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 35, SellPrice = 12, LevelUnlock = 10, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 52, Size = 120, AirPressure = 1.61 }; caseFans.Add(SP120_RGB_LED);
            CaseFan QF120___Performance = new CaseFan() { Id = 76, Name = "QF120 - Performance", PartType = PartType.CaseFan, Manufacturer = Cryorig, Price = 12, SellPrice = 4, LevelUnlock = 30, LevelPercent = 1, Lighting = null, AirFlow = 83, Size = 120, AirPressure = 3.33 }; caseFans.Add(QF120___Performance);
            CaseFan QF140___Performance = new CaseFan() { Id = 77, Name = "QF140 - Performance", PartType = PartType.CaseFan, Manufacturer = Cryorig, Price = 15, SellPrice = 5, LevelUnlock = 30, LevelPercent = 1, Lighting = null, AirFlow = 128, Size = 140, AirPressure = 2.12 }; caseFans.Add(QF140___Performance);
            CaseFan XF140 = new CaseFan() { Id = 78, Name = "XF140", PartType = PartType.CaseFan, Manufacturer = Cryorig, Price = 20, SellPrice = 7, LevelUnlock = 29, LevelPercent = 1, Lighting = null, AirFlow = 76, Size = 140, AirPressure = 1.44 }; caseFans.Add(XF140);
            CaseFan XT140 = new CaseFan() { Id = 79, Name = "XT140", PartType = PartType.CaseFan, Manufacturer = Cryorig, Price = 60, SellPrice = 20, LevelUnlock = 29, LevelPercent = 1, Lighting = null, AirFlow = 65, Size = 140, AirPressure = 1.49 }; caseFans.Add(XT140);
            CaseFan RF_120 = new CaseFan() { Id = 80, Name = "RF 120", PartType = PartType.CaseFan, Manufacturer = Deepcool, Price = 20, SellPrice = 7, LevelUnlock = 14, LevelPercent = 25, Lighting = Color.RGB, AirFlow = 56.5, Size = 120, AirPressure = null }; caseFans.Add(RF_120);
            CaseFan RF_140 = new CaseFan() { Id = 81, Name = "RF 140", PartType = PartType.CaseFan, Manufacturer = Deepcool, Price = 25, SellPrice = 8, LevelUnlock = 14, LevelPercent = 25, Lighting = Color.RGB, AirFlow = 64.13, Size = 140, AirPressure = null }; caseFans.Add(RF_140);
            CaseFan EK_Vardar_EVO_120ER_RGB = new CaseFan() { Id = 82, Name = "EK-Vardar EVO 120ER RGB", PartType = PartType.CaseFan, Manufacturer = EKWB, Price = 30, SellPrice = 10, LevelUnlock = 25, LevelPercent = 30, Lighting = Color.RGB, AirFlow = 77, Size = 120, AirPressure = 3.16 }; caseFans.Add(EK_Vardar_EVO_120ER_RGB);
            CaseFan EK_Vardar_EVO_140S_BB = new CaseFan() { Id = 83, Name = "EK-Vardar EVO 140S BB", PartType = PartType.CaseFan, Manufacturer = EKWB, Price = 30, SellPrice = 10, LevelUnlock = 25, LevelPercent = 1, Lighting = null, AirFlow = 98, Size = 140, AirPressure = 3.15 }; caseFans.Add(EK_Vardar_EVO_140S_BB);
            CaseFan EK_Vardar_F4_120ER = new CaseFan() { Id = 84, Name = "EK-Vardar F4-120ER", PartType = PartType.CaseFan, Manufacturer = EKWB, Price = 25, SellPrice = 8, LevelUnlock = 25, LevelPercent = 1, Lighting = null, AirFlow = 77, Size = 120, AirPressure = 3.16 }; caseFans.Add(EK_Vardar_F4_120ER);
            CaseFan Dynamic_X2_GP_12 = new CaseFan() { Id = 85, Name = "Dynamic X2 GP-12", PartType = PartType.CaseFan, Manufacturer = Fractal_Design, Price = 13, SellPrice = 4, LevelUnlock = 21, LevelPercent = 1, Lighting = null, AirFlow = 52, Size = 120, AirPressure = 0.88 }; caseFans.Add(Dynamic_X2_GP_12);
            CaseFan Dynamic_X2_GP_12__Black_ = new CaseFan() { Id = 86, Name = "Dynamic X2 GP-12 (Black)", PartType = PartType.CaseFan, Manufacturer = Fractal_Design, Price = 13, SellPrice = 4, LevelUnlock = 21, LevelPercent = 1, Lighting = null, AirFlow = 52, Size = 120, AirPressure = 0.88 }; caseFans.Add(Dynamic_X2_GP_12__Black_);
            CaseFan Dynamic_X2_GP_12__White_ = new CaseFan() { Id = 87, Name = "Dynamic X2 GP-12 (White)", PartType = PartType.CaseFan, Manufacturer = Fractal_Design, Price = 13, SellPrice = 4, LevelUnlock = 21, LevelPercent = 1, Lighting = null, AirFlow = 52, Size = 120, AirPressure = 0.88 }; caseFans.Add(Dynamic_X2_GP_12__White_);
            CaseFan Dynamic_X2_GP_14 = new CaseFan() { Id = 88, Name = "Dynamic X2 GP-14", PartType = PartType.CaseFan, Manufacturer = Fractal_Design, Price = 15, SellPrice = 5, LevelUnlock = 21, LevelPercent = 1, Lighting = null, AirFlow = 68, Size = 140, AirPressure = 0.71 }; caseFans.Add(Dynamic_X2_GP_14);
            CaseFan Dynamic_X2_GP_14__Black_ = new CaseFan() { Id = 89, Name = "Dynamic X2 GP-14 (Black)", PartType = PartType.CaseFan, Manufacturer = Fractal_Design, Price = 15, SellPrice = 5, LevelUnlock = 21, LevelPercent = 1, Lighting = null, AirFlow = 68, Size = 140, AirPressure = 0.71 }; caseFans.Add(Dynamic_X2_GP_14__Black_);
            CaseFan Dynamic_X2_GP_14__White_ = new CaseFan() { Id = 90, Name = "Dynamic X2 GP-14 (White)", PartType = PartType.CaseFan, Manufacturer = Fractal_Design, Price = 15, SellPrice = 5, LevelUnlock = 1, LevelPercent = 1, Lighting = null, AirFlow = 68, Size = 140, AirPressure = 0.71 }; caseFans.Add(Dynamic_X2_GP_14__White_);
            CaseFan Dynamic_X2_GP_18_PWM = new CaseFan() { Id = 91, Name = "Dynamic X2 GP-18 PWM", PartType = PartType.CaseFan, Manufacturer = Fractal_Design, Price = 1, SellPrice = 0, LevelUnlock = 21, LevelPercent = 1, Lighting = null, AirFlow = 44.9, Size = 180, AirPressure = 0.4 }; caseFans.Add(Dynamic_X2_GP_18_PWM);
            CaseFan Prisma_AL_12 = new CaseFan() { Id = 92, Name = "Prisma AL-12", PartType = PartType.CaseFan, Manufacturer = Fractal_Design, Price = 25, SellPrice = 8, LevelUnlock = 24, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 50, Size = 120, AirPressure = 0.8 }; caseFans.Add(Prisma_AL_12);
            CaseFan Prisma_AL_14 = new CaseFan() { Id = 93, Name = "Prisma AL-14", PartType = PartType.CaseFan, Manufacturer = Fractal_Design, Price = 25, SellPrice = 8, LevelUnlock = 24, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 63, Size = 140, AirPressure = 0.8 }; caseFans.Add(Prisma_AL_14);
            CaseFan Prisma_AL_18_PWM = new CaseFan() { Id = 94, Name = "Prisma AL-18 PWM", PartType = PartType.CaseFan, Manufacturer = Fractal_Design, Price = 1, SellPrice = 0, LevelUnlock = 21, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 43.1, Size = 180, AirPressure = 0.44 }; caseFans.Add(Prisma_AL_18_PWM);
            CaseFan Silent_Series_LL_Blue_120mm = new CaseFan() { Id = 95, Name = "Silent Series LL Blue 120mm", PartType = PartType.CaseFan, Manufacturer = Fractal_Design, Price = 15, SellPrice = 5, LevelUnlock = 26, LevelPercent = 1, Lighting = Color.Blue, AirFlow = 41.8, Size = 120, AirPressure = 0.87 }; caseFans.Add(Silent_Series_LL_Blue_120mm);
            CaseFan Silent_Series_LL_Red_120mm = new CaseFan() { Id = 96, Name = "Silent Series LL Red 120mm", PartType = PartType.CaseFan, Manufacturer = Fractal_Design, Price = 15, SellPrice = 5, LevelUnlock = 26, LevelPercent = 1, Lighting = Color.Red, AirFlow = 41.8, Size = 120, AirPressure = 0.87 }; caseFans.Add(Silent_Series_LL_Red_120mm);
            CaseFan Silent_Series_LL_White_120mm = new CaseFan() { Id = 97, Name = "Silent Series LL White 120mm", PartType = PartType.CaseFan, Manufacturer = Fractal_Design, Price = 15, SellPrice = 5, LevelUnlock = 26, LevelPercent = 1, Lighting = Color.White, AirFlow = 41.8, Size = 120, AirPressure = 0.87 }; caseFans.Add(Silent_Series_LL_White_120mm);
            CaseFan CMT510 = new CaseFan() { Id = 98, Name = "CMT510", PartType = PartType.CaseFan, Manufacturer = FSP, Price = 15, SellPrice = 5, LevelUnlock = 14, LevelPercent = 30, Lighting = Color.RGB, AirFlow = 45, Size = 120, AirPressure = 1.5 }; caseFans.Add(CMT510);
            CaseFan CMT520 = new CaseFan() { Id = 99, Name = "CMT520", PartType = PartType.CaseFan, Manufacturer = FSP, Price = 15, SellPrice = 5, LevelUnlock = 14, LevelPercent = 30, Lighting = Color.RGB, AirFlow = 60, Size = 120, AirPressure = 1.5 }; caseFans.Add(CMT520);
            CaseFan MF120 = new CaseFan() { Id = 100, Name = "MF120", PartType = PartType.CaseFan, Manufacturer = GamerStorm, Price = 60, SellPrice = 20, LevelUnlock = 30, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 45, Size = 120, AirPressure = 1.67 }; caseFans.Add(MF120);
            CaseFan MF120_GT = new CaseFan() { Id = 101, Name = "MF120 GT", PartType = PartType.CaseFan, Manufacturer = GamerStorm, Price = 40, SellPrice = 13, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 40, Size = 120, AirPressure = 1.67 }; caseFans.Add(MF120_GT);
            CaseFan TF120S__Black_ = new CaseFan() { Id = 102, Name = "TF120S (Black)", PartType = PartType.CaseFan, Manufacturer = GamerStorm, Price = 40, SellPrice = 13, LevelUnlock = 28, LevelPercent = 1, Lighting = null, AirFlow = 40, Size = 120, AirPressure = 1.67 }; caseFans.Add(TF120S__Black_);
            CaseFan TF120S__White_ = new CaseFan() { Id = 103, Name = "TF120S (White)", PartType = PartType.CaseFan, Manufacturer = GamerStorm, Price = 40, SellPrice = 13, LevelUnlock = 28, LevelPercent = 1, Lighting = null, AirFlow = 40, Size = 120, AirPressure = 1.67 }; caseFans.Add(TF120S__White_);
            CaseFan CROWN_AC120 = new CaseFan() { Id = 104, Name = "CROWN AC120", PartType = PartType.CaseFan, Manufacturer = InWin, Price = 20, SellPrice = 7, LevelUnlock = 24, LevelPercent = 30, Lighting = Color.RGB, AirFlow = 60, Size = 120, AirPressure = 2.24 }; caseFans.Add(CROWN_AC120);
            CaseFan CROWN_AC140 = new CaseFan() { Id = 105, Name = "CROWN AC140", PartType = PartType.CaseFan, Manufacturer = InWin, Price = 30, SellPrice = 10, LevelUnlock = 24, LevelPercent = 30, Lighting = Color.RGB, AirFlow = 70, Size = 140, AirPressure = 2.64 }; caseFans.Add(CROWN_AC140);
            CaseFan EGO_AE120 = new CaseFan() { Id = 106, Name = "EGO AE120", PartType = PartType.CaseFan, Manufacturer = InWin, Price = 30, SellPrice = 10, LevelUnlock = 25, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 60, Size = 120, AirPressure = 2.24 }; caseFans.Add(EGO_AE120);
            CaseFan Luna_AL120 = new CaseFan() { Id = 107, Name = "Luna AL120", PartType = PartType.CaseFan, Manufacturer = InWin, Price = 20, SellPrice = 7, LevelUnlock = 30, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 60, Size = 120, AirPressure = 2.31 }; caseFans.Add(Luna_AL120);
            CaseFan Polaris_LED__Blue_ = new CaseFan() { Id = 108, Name = "Polaris LED (Blue)", PartType = PartType.CaseFan, Manufacturer = InWin, Price = 25, SellPrice = 8, LevelUnlock = 24, LevelPercent = 1, Lighting = Color.Blue, AirFlow = 60, Size = 120, AirPressure = 2.24 }; caseFans.Add(Polaris_LED__Blue_);
            CaseFan Polaris_LED__Green_ = new CaseFan() { Id = 109, Name = "Polaris LED (Green)", PartType = PartType.CaseFan, Manufacturer = InWin, Price = 25, SellPrice = 8, LevelUnlock = 24, LevelPercent = 1, Lighting = Color.Green, AirFlow = 60, Size = 120, AirPressure = 2.24 }; caseFans.Add(Polaris_LED__Green_);
            CaseFan Polaris_LED__Red_ = new CaseFan() { Id = 110, Name = "Polaris LED (Red)", PartType = PartType.CaseFan, Manufacturer = InWin, Price = 25, SellPrice = 8, LevelUnlock = 24, LevelPercent = 1, Lighting = Color.Red, AirFlow = 60, Size = 120, AirPressure = 2.24 }; caseFans.Add(Polaris_LED__Red_);
            CaseFan Polaris_LED__White_ = new CaseFan() { Id = 111, Name = "Polaris LED (White)", PartType = PartType.CaseFan, Manufacturer = InWin, Price = 25, SellPrice = 8, LevelUnlock = 24, LevelPercent = 1, Lighting = Color.White, AirFlow = 60, Size = 120, AirPressure = 2.24 }; caseFans.Add(Polaris_LED__White_);
            CaseFan Polaris_RGB = new CaseFan() { Id = 112, Name = "Polaris RGB", PartType = PartType.CaseFan, Manufacturer = InWin, Price = 40, SellPrice = 13, LevelUnlock = 24, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 60, Size = 120, AirPressure = 2.24 }; caseFans.Add(Polaris_RGB);
            CaseFan Polaris_RGB_Aluminium = new CaseFan() { Id = 113, Name = "Polaris RGB Aluminium", PartType = PartType.CaseFan, Manufacturer = InWin, Price = 50, SellPrice = 17, LevelUnlock = 24, LevelPercent = 50, Lighting = Color.RGB, AirFlow = 60, Size = 120, AirPressure = 2.24 }; caseFans.Add(Polaris_RGB_Aluminium);
            CaseFan Saturn_ASN120 = new CaseFan() { Id = 114, Name = "Saturn ASN120", PartType = PartType.CaseFan, Manufacturer = InWin, Price = 10, SellPrice = 3, LevelUnlock = 20, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 50, Size = 120, AirPressure = 2 }; caseFans.Add(Saturn_ASN120);
            CaseFan Sirius_Loop_ASL120 = new CaseFan() { Id = 115, Name = "Sirius Loop ASL120", PartType = PartType.CaseFan, Manufacturer = InWin, Price = 12, SellPrice = 4, LevelUnlock = 24, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 60, Size = 120, AirPressure = 2.24 }; caseFans.Add(Sirius_Loop_ASL120);
            CaseFan Fan_120 = new CaseFan() { Id = 116, Name = "Fan 120", PartType = PartType.CaseFan, Manufacturer = Kolink, Price = 11, SellPrice = 4, LevelUnlock = 1, LevelPercent = 1, Lighting = null, AirFlow = 60, Size = 120, AirPressure = 1.61 }; caseFans.Add(Fan_120);
            CaseFan Bora_Digital_ARGB__Black_ = new CaseFan() { Id = 117, Name = "Bora Digital ARGB (Black)", PartType = PartType.CaseFan, Manufacturer = Lian_Li, Price = 20, SellPrice = 7, LevelUnlock = 15, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 57.97, Size = 120, AirPressure = 1.46 }; caseFans.Add(Bora_Digital_ARGB__Black_);
            CaseFan Bora_Digital_ARGB__Silver_ = new CaseFan() { Id = 118, Name = "Bora Digital ARGB (Silver)", PartType = PartType.CaseFan, Manufacturer = Lian_Li, Price = 20, SellPrice = 7, LevelUnlock = 15, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 57.97, Size = 120, AirPressure = 1.46 }; caseFans.Add(Bora_Digital_ARGB__Silver_);
            CaseFan Bora_Digital_ARGB__Space_Grey_ = new CaseFan() { Id = 119, Name = "Bora Digital ARGB (Space Grey)", PartType = PartType.CaseFan, Manufacturer = Lian_Li, Price = 20, SellPrice = 7, LevelUnlock = 15, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 57.97, Size = 120, AirPressure = 1.46 }; caseFans.Add(Bora_Digital_ARGB__Space_Grey_);
            CaseFan Heat_Away_120 = new CaseFan() { Id = 120, Name = "Heat Away 120", PartType = PartType.CaseFan, Manufacturer = Mortoni, Price = 7, SellPrice = 2, LevelUnlock = 1, LevelPercent = 1, Lighting = null, AirFlow = 40, Size = 120, AirPressure = 1.61 }; caseFans.Add(Heat_Away_120);
            CaseFan Heat_Away_140 = new CaseFan() { Id = 121, Name = "Heat Away 140", PartType = PartType.CaseFan, Manufacturer = Mortoni, Price = 7, SellPrice = 2, LevelUnlock = 1, LevelPercent = 1, Lighting = null, AirFlow = 60, Size = 140, AirPressure = 1.61 }; caseFans.Add(Heat_Away_140);
            CaseFan Heat_Away_90 = new CaseFan() { Id = 122, Name = "Heat Away 90", PartType = PartType.CaseFan, Manufacturer = Mortoni, Price = 5, SellPrice = 2, LevelUnlock = 1, LevelPercent = 1, Lighting = null, AirFlow = 25, Size = 90, AirPressure = 1.2 }; caseFans.Add(Heat_Away_90);
            CaseFan Heat_Away_Pro_RGB_120 = new CaseFan() { Id = 123, Name = "Heat Away Pro RGB 120", PartType = PartType.CaseFan, Manufacturer = Mortoni, Price = 12, SellPrice = 4, LevelUnlock = 10, LevelPercent = 50, Lighting = Color.RGB, AirFlow = 42, Size = 120, AirPressure = 1.2 }; caseFans.Add(Heat_Away_Pro_RGB_120);
            CaseFan Heat_Away_RGB_120 = new CaseFan() { Id = 124, Name = "Heat Away RGB 120", PartType = PartType.CaseFan, Manufacturer = Mortoni, Price = 10, SellPrice = 3, LevelUnlock = 10, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 40, Size = 120, AirPressure = 1.61 }; caseFans.Add(Heat_Away_RGB_120);
            CaseFan Heat_Away_RGB_140 = new CaseFan() { Id = 125, Name = "Heat Away RGB 140", PartType = PartType.CaseFan, Manufacturer = Mortoni, Price = 10, SellPrice = 3, LevelUnlock = 10, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 60, Size = 140, AirPressure = 1.61 }; caseFans.Add(Heat_Away_RGB_140);
            CaseFan N20mm = new CaseFan() { Id = 126, Name = "120mm", PartType = PartType.CaseFan, Manufacturer = MSI, Price = 40, SellPrice = 13, LevelUnlock = 8, LevelPercent = 1, Lighting = null, AirFlow = 50, Size = 120, AirPressure = 2 }; caseFans.Add(N20mm);
            CaseFan N20mm_ARGB__Black_Logo_ = new CaseFan() { Id = 127, Name = "120mm ARGB (Black Logo)", PartType = PartType.CaseFan, Manufacturer = MSI, Price = 20, SellPrice = 7, LevelUnlock = 8, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 50, Size = 120, AirPressure = 2 }; caseFans.Add(N20mm_ARGB__Black_Logo_);
            CaseFan N20mm_ARGB__Silver_Logo_ = new CaseFan() { Id = 128, Name = "120mm ARGB (Silver Logo)", PartType = PartType.CaseFan, Manufacturer = MSI, Price = 20, SellPrice = 7, LevelUnlock = 8, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 50, Size = 120, AirPressure = 2 }; caseFans.Add(N20mm_ARGB__Silver_Logo_);
            CaseFan N20mm_RGB = new CaseFan() { Id = 129, Name = "120mm RGB", PartType = PartType.CaseFan, Manufacturer = MSI, Price = 40, SellPrice = 13, LevelUnlock = 8, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 50, Size = 120, AirPressure = 2 }; caseFans.Add(N20mm_RGB);
            CaseFan N00mm = new CaseFan() { Id = 130, Name = "200mm", PartType = PartType.CaseFan, Manufacturer = MSI, Price = 40, SellPrice = 13, LevelUnlock = 8, LevelPercent = 1, Lighting = null, AirFlow = 90, Size = 200, AirPressure = 2 }; caseFans.Add(N00mm);
            CaseFan MAG_MAX_F20A_1 = new CaseFan() { Id = 131, Name = "MAG MAX F20A-1", PartType = PartType.CaseFan, Manufacturer = MSI, Price = 40, SellPrice = 13, LevelUnlock = 8, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 90, Size = 200, AirPressure = 2 }; caseFans.Add(MAG_MAX_F20A_1);
            CaseFan Aer_P_120mm__Black_ = new CaseFan() { Id = 132, Name = "Aer P 120mm (Black)", PartType = PartType.CaseFan, Manufacturer = NZXT, Price = 17, SellPrice = 6, LevelUnlock = 9, LevelPercent = 1, Lighting = null, AirFlow = 73, Size = 120, AirPressure = 2.93 }; caseFans.Add(Aer_P_120mm__Black_);
            CaseFan Aer_P_120mm__Blue_ = new CaseFan() { Id = 133, Name = "Aer P 120mm (Blue)", PartType = PartType.CaseFan, Manufacturer = NZXT, Price = 17, SellPrice = 6, LevelUnlock = 9, LevelPercent = 1, Lighting = null, AirFlow = 73, Size = 120, AirPressure = 2.93 }; caseFans.Add(Aer_P_120mm__Blue_);
            CaseFan Aer_P_120mm__Red_ = new CaseFan() { Id = 134, Name = "Aer P 120mm (Red)", PartType = PartType.CaseFan, Manufacturer = NZXT, Price = 17, SellPrice = 6, LevelUnlock = 9, LevelPercent = 1, Lighting = null, AirFlow = 73, Size = 120, AirPressure = 2.93 }; caseFans.Add(Aer_P_120mm__Red_);
            CaseFan Aer_P_120mm__White_ = new CaseFan() { Id = 135, Name = "Aer P 120mm (White)", PartType = PartType.CaseFan, Manufacturer = NZXT, Price = 17, SellPrice = 6, LevelUnlock = 9, LevelPercent = 1, Lighting = null, AirFlow = 73, Size = 120, AirPressure = 2.93 }; caseFans.Add(Aer_P_120mm__White_);
            CaseFan Aer_P_140mm__Black_ = new CaseFan() { Id = 136, Name = "Aer P 140mm (Black)", PartType = PartType.CaseFan, Manufacturer = NZXT, Price = 17, SellPrice = 6, LevelUnlock = 9, LevelPercent = 1, Lighting = null, AirFlow = 98, Size = 140, AirPressure = 2.71 }; caseFans.Add(Aer_P_140mm__Black_);
            CaseFan Aer_P_140mm__Blue_ = new CaseFan() { Id = 137, Name = "Aer P 140mm (Blue)", PartType = PartType.CaseFan, Manufacturer = NZXT, Price = 17, SellPrice = 6, LevelUnlock = 9, LevelPercent = 1, Lighting = null, AirFlow = 98, Size = 140, AirPressure = 2.71 }; caseFans.Add(Aer_P_140mm__Blue_);
            CaseFan Aer_P_140mm__Red_ = new CaseFan() { Id = 138, Name = "Aer P 140mm (Red)", PartType = PartType.CaseFan, Manufacturer = NZXT, Price = 17, SellPrice = 6, LevelUnlock = 9, LevelPercent = 1, Lighting = null, AirFlow = 98, Size = 140, AirPressure = 2.71 }; caseFans.Add(Aer_P_140mm__Red_);
            CaseFan Aer_P_140mm__White_ = new CaseFan() { Id = 139, Name = "Aer P 140mm (White)", PartType = PartType.CaseFan, Manufacturer = NZXT, Price = 17, SellPrice = 6, LevelUnlock = 9, LevelPercent = 1, Lighting = null, AirFlow = 98, Size = 140, AirPressure = 2.71 }; caseFans.Add(Aer_P_140mm__White_);
            CaseFan IRIS_12 = new CaseFan() { Id = 140, Name = "IRIS 12", PartType = PartType.CaseFan, Manufacturer = Raijintek, Price = 20, SellPrice = 7, LevelUnlock = 10, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 42, Size = 120, AirPressure = 1.7 }; caseFans.Add(IRIS_12);
            CaseFan IRIS_14_RBW_ADD = new CaseFan() { Id = 141, Name = "IRIS 14 RBW ADD", PartType = PartType.CaseFan, Manufacturer = Raijintek, Price = 25, SellPrice = 8, LevelUnlock = 10, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 70, Size = 140, AirPressure = 2.56 }; caseFans.Add(IRIS_14_RBW_ADD);
            CaseFan MACULA_12_RAINBOW_RGB = new CaseFan() { Id = 142, Name = "MACULA 12 RAINBOW RGB", PartType = PartType.CaseFan, Manufacturer = Raijintek, Price = 30, SellPrice = 10, LevelUnlock = 12, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 45, Size = 120, AirPressure = 1.7 }; caseFans.Add(MACULA_12_RAINBOW_RGB);
            CaseFan SKLERA_12_RBW_ADD = new CaseFan() { Id = 143, Name = "SKLERA 12 RBW ADD", PartType = PartType.CaseFan, Manufacturer = Raijintek, Price = 30, SellPrice = 10, LevelUnlock = 12, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 45, Size = 120, AirPressure = 1.7 }; caseFans.Add(SKLERA_12_RBW_ADD);
            CaseFan Air_Blazer_120R = new CaseFan() { Id = 144, Name = "Air Blazer 120R", PartType = PartType.CaseFan, Manufacturer = SilverStone, Price = 35, SellPrice = 12, LevelUnlock = 34, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 60, Size = 120, AirPressure = 3.53 }; caseFans.Add(Air_Blazer_120R);
            CaseFan Air_Blazer_120RW = new CaseFan() { Id = 145, Name = "Air Blazer 120RW", PartType = PartType.CaseFan, Manufacturer = SilverStone, Price = 35, SellPrice = 12, LevelUnlock = 34, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 60, Size = 120, AirPressure = 3.53 }; caseFans.Add(Air_Blazer_120RW);
            CaseFan AP182__Black_ = new CaseFan() { Id = 146, Name = "AP182 (Black)", PartType = PartType.CaseFan, Manufacturer = SilverStone, Price = 40, SellPrice = 13, LevelUnlock = 1, LevelPercent = 1, Lighting = null, AirFlow = 150, Size = 180, AirPressure = 6.1 }; caseFans.Add(AP182__Black_);
            CaseFan AP182__White_ = new CaseFan() { Id = 147, Name = "AP182 (White)", PartType = PartType.CaseFan, Manufacturer = SilverStone, Price = 40, SellPrice = 13, LevelUnlock = 1, LevelPercent = 1, Lighting = null, AirFlow = 150, Size = 180, AirPressure = 6.1 }; caseFans.Add(AP182__White_);
            CaseFan Pure_Plus_12_LED_RGB = new CaseFan() { Id = 148, Name = "Pure Plus 12 LED RGB", PartType = PartType.CaseFan, Manufacturer = Thermaltake, Price = 20, SellPrice = 7, LevelUnlock = 28, LevelPercent = 20, Lighting = Color.RGB, AirFlow = 56.45, Size = 120, AirPressure = 1.59 }; caseFans.Add(Pure_Plus_12_LED_RGB);
            CaseFan Riing_Plus_12_LED_RGB = new CaseFan() { Id = 149, Name = "Riing Plus 12 LED RGB", PartType = PartType.CaseFan, Manufacturer = Thermaltake, Price = 20, SellPrice = 7, LevelUnlock = 28, LevelPercent = 20, Lighting = Color.RGB, AirFlow = 48.34, Size = 120, AirPressure = 1.54 }; caseFans.Add(Riing_Plus_12_LED_RGB);
            CaseFan Riing_Plus_14_LED_RGB = new CaseFan() { Id = 150, Name = "Riing Plus 14 LED RGB", PartType = PartType.CaseFan, Manufacturer = Thermaltake, Price = 25, SellPrice = 8, LevelUnlock = 28, LevelPercent = 20, Lighting = Color.RGB, AirFlow = 63.19, Size = 140, AirPressure = 1.53 }; caseFans.Add(Riing_Plus_14_LED_RGB);
            #endregion
            if (!_context.CaseFan.Any())
            {
                _context.CaseFan.AddRange(caseFans);
            }
            #region Case
            List<Case> cases = new List<Case>();
            Case XPG_Battlecruiser__Black_ = new Case() { Id = 1, Name = "XPG Battlecruiser (Black)", PartType = PartType.Case, Manufacturer = ADATA, Price = 180, SellPrice = 60, LevelUnlock = 28, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 225, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_RGB_120, Heat_Away_RGB_120, Heat_Away_RGB_120, Heat_Away_RGB_120 }, InherentCooling = 0 }; cases.Add(XPG_Battlecruiser__Black_);
            Case XPG_Battlecruiser__White_ = new Case() { Id = 2, Name = "XPG Battlecruiser (White)", PartType = PartType.Case, Manufacturer = ADATA, Price = 180, SellPrice = 60, LevelUnlock = 28, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 225, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_RGB_120, Heat_Away_RGB_120, Heat_Away_RGB_120, Heat_Away_RGB_120 }, InherentCooling = 0 }; cases.Add(XPG_Battlecruiser__White_);
            Case XPG_Defender_Pro__Black_ = new Case() { Id = 3, Name = "XPG Defender Pro (Black)", PartType = PartType.Case, Manufacturer = ADATA, Price = 140, SellPrice = 47, LevelUnlock = 31, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, SSI_EEB }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 220, MaxGPULength = 380, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { XPG_VENTO_120, XPG_VENTO_120, XPG_VENTO_120 }, InherentCooling = 0 }; cases.Add(XPG_Defender_Pro__Black_);
            Case XPG_Defender_Pro__White_ = new Case() { Id = 4, Name = "XPG Defender Pro (White)", PartType = PartType.Case, Manufacturer = ADATA, Price = 140, SellPrice = 47, LevelUnlock = 31, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, SSI_EEB }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 220, MaxGPULength = 380, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { XPG_VENTO_120, XPG_VENTO_120, XPG_VENTO_120 }, InherentCooling = 0 }; cases.Add(XPG_Defender_Pro__White_);
            Case Dark_Avenger_DA601 = new Case() { Id = 5, Name = "Dark Avenger DA601", PartType = PartType.Case, Manufacturer = Antec, Price = 85, SellPrice = 28, LevelUnlock = 6, LevelPercent = 50, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 400, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Prizm_120_ARGB }, InherentCooling = 0 }; cases.Add(Dark_Avenger_DA601);
            Case DF500 = new Case() { Id = 6, Name = "DF500", PartType = PartType.Case, Manufacturer = Antec, Price = 60, SellPrice = 20, LevelUnlock = 1, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 0, MaxPsuLength = 200, MaxGPULength = 380, MaxCPUFanHeight = 155, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(DF500);
            Case P110_Luce = new Case() { Id = 7, Name = "P110 Luce", PartType = PartType.Case, Manufacturer = Antec, Price = 105, SellPrice = 35, LevelUnlock = 14, LevelPercent = 48, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 390, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(P110_Luce);
            Case P120_Crystal = new Case() { Id = 8, Name = "P120 Crystal", PartType = PartType.Case, Manufacturer = Antec, Price = 100, SellPrice = 33, LevelUnlock = 5, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 294, MaxGPULength = 450, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(P120_Crystal);
            Case P6 = new Case() { Id = 9, Name = "P6", PartType = PartType.Case, Manufacturer = Antec, Price = 85, SellPrice = 28, LevelUnlock = 13, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 1, MaxPsuLength = 160, MaxGPULength = 390, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(P6);
            Case P8 = new Case() { Id = 10, Name = "P8", PartType = PartType.Case, Manufacturer = Antec, Price = 85, SellPrice = 28, LevelUnlock = 13, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 240, MaxGPULength = 390, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(P8);
            Case ROG_Strix_Helios = new Case() { Id = 11, Name = "ROG Strix Helios", PartType = PartType.Case, Manufacturer = ASUS, Price = 330, SellPrice = 110, LevelUnlock = 33, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 220, MaxGPULength = 450, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_140, Heat_Away_140, Heat_Away_140 }, InherentCooling = 0 }; cases.Add(ROG_Strix_Helios);
            Case Dark_Base_700__Black_ = new Case() { Id = 12, Name = "Dark Base 700 (Black)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 180, SellPrice = 60, LevelUnlock = 25, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 285, MaxGPULength = 430, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Silent_Wings_3_140mm, Silent_Wings_3_140mm, Silent_Wings_3_140mm }, RestrictedGpuLength = 286, InherentCooling = 0 }; cases.Add(Dark_Base_700__Black_);
            Case Dark_Base_700__White_ = new Case() { Id = 13, Name = "Dark Base 700 (White)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 180, SellPrice = 60, LevelUnlock = 25, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 285, MaxGPULength = 430, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Silent_Wings_3_140mm, Silent_Wings_3_140mm, Silent_Wings_3_140mm }, RestrictedGpuLength = 286, InherentCooling = 0 }; cases.Add(Dark_Base_700__White_);
            Case Dark_Base_900__Black_ = new Case() { Id = 14, Name = "Dark Base 900 (Black)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 200, SellPrice = 67, LevelUnlock = 25, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Full_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 3, MaxPsuLength = 284, MaxGPULength = 472, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Silent_Wings_3_140mm, Silent_Wings_3_140mm, Silent_Wings_3_140mm }, RestrictedGpuLength = 323, InherentCooling = 0 }; cases.Add(Dark_Base_900__Black_);
            Case Dark_Base_900__Orange_ = new Case() { Id = 15, Name = "Dark Base 900 (Orange)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 200, SellPrice = 67, LevelUnlock = 25, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Full_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 3, MaxPsuLength = 284, MaxGPULength = 472, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Silent_Wings_3_140mm, Silent_Wings_3_140mm, Silent_Wings_3_140mm }, RestrictedGpuLength = 323, InherentCooling = 0 }; cases.Add(Dark_Base_900__Orange_);
            Case Dark_Base_900__Silver_ = new Case() { Id = 16, Name = "Dark Base 900 (Silver)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 200, SellPrice = 67, LevelUnlock = 25, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Full_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 3, MaxPsuLength = 284, MaxGPULength = 472, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Silent_Wings_3_140mm, Silent_Wings_3_140mm, Silent_Wings_3_140mm }, RestrictedGpuLength = 323, InherentCooling = 0 }; cases.Add(Dark_Base_900__Silver_);
            Case Dark_Base_Pro_900_rev__2__Black_ = new Case() { Id = 17, Name = "Dark Base Pro 900 rev. 2 (Black)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 280, SellPrice = 93, LevelUnlock = 26, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Full_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 284, MaxGPULength = 472, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Silent_Wings_3_140mm, Silent_Wings_3_140mm, Silent_Wings_3_140mm }, RestrictedGpuLength = 323, InherentCooling = 0 }; cases.Add(Dark_Base_Pro_900_rev__2__Black_);
            Case Dark_Base_Pro_900_rev__2__Orange_ = new Case() { Id = 18, Name = "Dark Base Pro 900 rev. 2 (Orange)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 280, SellPrice = 93, LevelUnlock = 26, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Full_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 284, MaxGPULength = 472, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Silent_Wings_3_140mm, Silent_Wings_3_140mm, Silent_Wings_3_140mm }, RestrictedGpuLength = 323, InherentCooling = 0 }; cases.Add(Dark_Base_Pro_900_rev__2__Orange_);
            Case Dark_Base_Pro_900_rev__2__Silver_ = new Case() { Id = 19, Name = "Dark Base Pro 900 rev. 2 (Silver)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 280, SellPrice = 93, LevelUnlock = 26, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Full_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 284, MaxGPULength = 472, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Silent_Wings_3_140mm, Silent_Wings_3_140mm, Silent_Wings_3_140mm }, RestrictedGpuLength = 323, InherentCooling = 0 }; cases.Add(Dark_Base_Pro_900_rev__2__Silver_);
            Case Pure_Base_500__Black_Window_ = new Case() { Id = 20, Name = "Pure Base 500 (Black Window)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 80, SellPrice = 27, LevelUnlock = 17, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 258, MaxGPULength = 369, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 323, InherentCooling = 0 }; cases.Add(Pure_Base_500__Black_Window_);
            Case Pure_Base_500__Black_ = new Case() { Id = 21, Name = "Pure Base 500 (Black)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 70, SellPrice = 23, LevelUnlock = 17, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 258, MaxGPULength = 369, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 323, InherentCooling = 0 }; cases.Add(Pure_Base_500__Black_);
            Case Pure_Base_500__Metallic_Grey_Window_ = new Case() { Id = 22, Name = "Pure Base 500 (Metallic Grey Window)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 80, SellPrice = 27, LevelUnlock = 17, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 258, MaxGPULength = 369, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 323, InherentCooling = 0 }; cases.Add(Pure_Base_500__Metallic_Grey_Window_);
            Case Pure_Base_500__Metallic_Grey_ = new Case() { Id = 23, Name = "Pure Base 500 (Metallic Grey)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 70, SellPrice = 23, LevelUnlock = 17, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 258, MaxGPULength = 369, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 323, InherentCooling = 0 }; cases.Add(Pure_Base_500__Metallic_Grey_);
            Case Pure_Base_500__White_Window_ = new Case() { Id = 24, Name = "Pure Base 500 (White Window)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 80, SellPrice = 27, LevelUnlock = 17, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 258, MaxGPULength = 369, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 323, InherentCooling = 0 }; cases.Add(Pure_Base_500__White_Window_);
            Case Pure_Base_500__White_ = new Case() { Id = 25, Name = "Pure Base 500 (White)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 70, SellPrice = 23, LevelUnlock = 17, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 258, MaxGPULength = 369, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 323, InherentCooling = 0 }; cases.Add(Pure_Base_500__White_);
            Case Pure_Base_500DX__Black_ = new Case() { Id = 26, Name = "Pure Base 500DX (Black)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 100, SellPrice = 33, LevelUnlock = 17, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 258, MaxGPULength = 369, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 323, InherentCooling = 0 }; cases.Add(Pure_Base_500DX__Black_);
            Case Pure_Base_500DX__White_ = new Case() { Id = 27, Name = "Pure Base 500DX (White)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 100, SellPrice = 33, LevelUnlock = 17, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 258, MaxGPULength = 369, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 323, InherentCooling = 0 }; cases.Add(Pure_Base_500DX__White_);
            Case Pure_Base_600__Black_ = new Case() { Id = 28, Name = "Pure Base 600 (Black)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 90, SellPrice = 30, LevelUnlock = 15, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 210, MaxGPULength = 425, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_120mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 280, InherentCooling = 0 }; cases.Add(Pure_Base_600__Black_);
            Case Pure_Base_600__Silver_ = new Case() { Id = 29, Name = "Pure Base 600 (Silver)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 90, SellPrice = 30, LevelUnlock = 15, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 210, MaxGPULength = 425, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_120mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 280, InherentCooling = 0 }; cases.Add(Pure_Base_600__Silver_);
            Case Pure_Base_600_Window__Black_ = new Case() { Id = 30, Name = "Pure Base 600 Window (Black)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 90, SellPrice = 30, LevelUnlock = 15, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 210, MaxGPULength = 425, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_120mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 280, InherentCooling = 0 }; cases.Add(Pure_Base_600_Window__Black_);
            Case Pure_Base_600_Window__Orange_ = new Case() { Id = 31, Name = "Pure Base 600 Window (Orange)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 90, SellPrice = 30, LevelUnlock = 15, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 210, MaxGPULength = 425, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_120mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 280, InherentCooling = 0 }; cases.Add(Pure_Base_600_Window__Orange_);
            Case Silent_Base_600__Black_ = new Case() { Id = 32, Name = "Silent Base 600 (Black)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 60, SellPrice = 20, LevelUnlock = 11, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 1, MaxPsuLength = 290, MaxGPULength = 413, MaxCPUFanHeight = 167, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_120mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(Silent_Base_600__Black_);
            Case Silent_Base_600__Green_ = new Case() { Id = 33, Name = "Silent Base 600 (Green)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 60, SellPrice = 20, LevelUnlock = 11, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 1, MaxPsuLength = 290, MaxGPULength = 413, MaxCPUFanHeight = 167, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_120mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(Silent_Base_600__Green_);
            Case Silent_Base_600__Orange_ = new Case() { Id = 34, Name = "Silent Base 600 (Orange)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 60, SellPrice = 20, LevelUnlock = 11, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 1, MaxPsuLength = 290, MaxGPULength = 413, MaxCPUFanHeight = 167, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_120mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(Silent_Base_600__Orange_);
            Case Silent_Base_600__Red_ = new Case() { Id = 35, Name = "Silent Base 600 (Red)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 60, SellPrice = 20, LevelUnlock = 11, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 1, MaxPsuLength = 290, MaxGPULength = 413, MaxCPUFanHeight = 167, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_120mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(Silent_Base_600__Red_);
            Case Silent_Base_600__Silver_ = new Case() { Id = 36, Name = "Silent Base 600 (Silver)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 60, SellPrice = 20, LevelUnlock = 11, LevelPercent = 10, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 1, MaxPsuLength = 290, MaxGPULength = 413, MaxCPUFanHeight = 167, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_120mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(Silent_Base_600__Silver_);
            Case Silent_Base_600_Window__Black_ = new Case() { Id = 37, Name = "Silent Base 600 Window (Black)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 60, SellPrice = 20, LevelUnlock = 12, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 1, MaxPsuLength = 290, MaxGPULength = 413, MaxCPUFanHeight = 167, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_120mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(Silent_Base_600_Window__Black_);
            Case Silent_Base_600_Window__Green_ = new Case() { Id = 38, Name = "Silent Base 600 Window (Green)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 60, SellPrice = 20, LevelUnlock = 12, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 1, MaxPsuLength = 290, MaxGPULength = 413, MaxCPUFanHeight = 167, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_120mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(Silent_Base_600_Window__Green_);
            Case Silent_Base_600_Window__Orange_ = new Case() { Id = 39, Name = "Silent Base 600 Window (Orange)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 60, SellPrice = 20, LevelUnlock = 12, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 1, MaxPsuLength = 290, MaxGPULength = 413, MaxCPUFanHeight = 167, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_120mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(Silent_Base_600_Window__Orange_);
            Case Silent_Base_600_Window__Red_ = new Case() { Id = 40, Name = "Silent Base 600 Window (Red)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 60, SellPrice = 20, LevelUnlock = 12, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 1, MaxPsuLength = 290, MaxGPULength = 413, MaxCPUFanHeight = 167, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_120mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(Silent_Base_600_Window__Red_);
            Case Silent_Base_600_Window__Silver_ = new Case() { Id = 41, Name = "Silent Base 600 Window (Silver)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 60, SellPrice = 20, LevelUnlock = 12, LevelPercent = 10, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 1, MaxPsuLength = 290, MaxGPULength = 413, MaxCPUFanHeight = 167, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_120mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(Silent_Base_600_Window__Silver_);
            Case Silent_Base_601__Black_ = new Case() { Id = 42, Name = "Silent Base 601 (Black)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 120, SellPrice = 40, LevelUnlock = 22, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_601__Black_);
            Case Silent_Base_601__Orange_ = new Case() { Id = 43, Name = "Silent Base 601 (Orange)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 120, SellPrice = 40, LevelUnlock = 22, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_601__Orange_);
            Case Silent_Base_601__Red_ = new Case() { Id = 44, Name = "Silent Base 601 (Red)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 120, SellPrice = 40, LevelUnlock = 22, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_601__Red_);
            Case Silent_Base_601__Silver_ = new Case() { Id = 45, Name = "Silent Base 601 (Silver)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 120, SellPrice = 40, LevelUnlock = 22, LevelPercent = 10, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_601__Silver_);
            Case Silent_Base_601_Window__Black_ = new Case() { Id = 46, Name = "Silent Base 601 Window (Black)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 120, SellPrice = 40, LevelUnlock = 22, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_601_Window__Black_);
            Case Silent_Base_601_Window__Orange_ = new Case() { Id = 47, Name = "Silent Base 601 Window (Orange)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 120, SellPrice = 40, LevelUnlock = 22, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_601_Window__Orange_);
            Case Silent_Base_601_Window__Red_ = new Case() { Id = 48, Name = "Silent Base 601 Window (Red)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 120, SellPrice = 40, LevelUnlock = 22, LevelPercent = 90, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_601_Window__Red_);
            Case Silent_Base_601_Window__Silver_ = new Case() { Id = 49, Name = "Silent Base 601 Window (Silver)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 120, SellPrice = 40, LevelUnlock = 22, LevelPercent = 70, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_601_Window__Silver_);
            Case Silent_Base_801__Black_ = new Case() { Id = 50, Name = "Silent Base 801 (Black)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 160, SellPrice = 53, LevelUnlock = 24, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_801__Black_);
            Case Silent_Base_801__Orange_ = new Case() { Id = 51, Name = "Silent Base 801 (Orange)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 160, SellPrice = 53, LevelUnlock = 24, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_801__Orange_);
            Case Silent_Base_801__Red_ = new Case() { Id = 52, Name = "Silent Base 801 (Red)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 160, SellPrice = 53, LevelUnlock = 24, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_801__Red_);
            Case Silent_Base_801__Silver_ = new Case() { Id = 53, Name = "Silent Base 801 (Silver)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 160, SellPrice = 53, LevelUnlock = 24, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_801__Silver_);
            Case Silent_Base_801_Window__Black_ = new Case() { Id = 54, Name = "Silent Base 801 Window (Black)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 160, SellPrice = 53, LevelUnlock = 24, LevelPercent = 70, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_801_Window__Black_);
            Case Silent_Base_801_Window__Orange_ = new Case() { Id = 55, Name = "Silent Base 801 Window (Orange)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 160, SellPrice = 53, LevelUnlock = 24, LevelPercent = 70, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_801_Window__Orange_);
            Case Silent_Base_801_Window__Red_ = new Case() { Id = 56, Name = "Silent Base 801 Window (Red)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 160, SellPrice = 53, LevelUnlock = 24, LevelPercent = 90, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_801_Window__Red_);
            Case Silent_Base_801_Window__Silver_ = new Case() { Id = 57, Name = "Silent Base 801 Window (Silver)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 160, SellPrice = 53, LevelUnlock = 24, LevelPercent = 90, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_801_Window__Silver_);
            Case COSMOS_C700P = new Case() { Id = 58, Name = "COSMOS C700P", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 300, SellPrice = 100, LevelUnlock = 3, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Full_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 490, MaxCPUFanHeight = 198, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_140, Heat_Away_140 }, RestrictedGpuLength = 320, InherentCooling = 0 }; cases.Add(COSMOS_C700P);
            Case MasterBox_5__White_ = new Case() { Id = 59, Name = "MasterBox 5 (White)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 80, SellPrice = 27, LevelUnlock = 1, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 410, MaxCPUFanHeight = 167, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(MasterBox_5__White_);
            Case MasterBox_5_MSI_Edition = new Case() { Id = 60, Name = "MasterBox 5 MSI Edition", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 100, SellPrice = 33, LevelUnlock = 15, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 410, MaxCPUFanHeight = 167, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(MasterBox_5_MSI_Edition);
            Case MasterBox_NR200P__Black_Window_ = new Case() { Id = 61, Name = "MasterBox NR200P (Black Window)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 130, SellPrice = 43, LevelUnlock = 32, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__Black_Window_);
            Case MasterBox_NR200P__Black_ = new Case() { Id = 62, Name = "MasterBox NR200P (Black)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 130, SellPrice = 43, LevelUnlock = 32, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__Black_);
            Case MasterBox_NR200P__Blue_Window_ = new Case() { Id = 63, Name = "MasterBox NR200P (Blue Window)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 180, SellPrice = 60, LevelUnlock = 32, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__Blue_Window_);
            Case MasterBox_NR200P__Blue_ = new Case() { Id = 64, Name = "MasterBox NR200P (Blue)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 180, SellPrice = 60, LevelUnlock = 32, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__Blue_);
            Case MasterBox_NR200P__Orange_Window_ = new Case() { Id = 65, Name = "MasterBox NR200P (Orange Window)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 180, SellPrice = 60, LevelUnlock = 32, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__Orange_Window_);
            Case MasterBox_NR200P__Orange_ = new Case() { Id = 66, Name = "MasterBox NR200P (Orange)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 180, SellPrice = 60, LevelUnlock = 32, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__Orange_);
            Case MasterBox_NR200P__Pink_Window_ = new Case() { Id = 67, Name = "MasterBox NR200P (Pink Window)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 180, SellPrice = 60, LevelUnlock = 32, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__Pink_Window_);
            Case MasterBox_NR200P__Pink_ = new Case() { Id = 68, Name = "MasterBox NR200P (Pink)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 180, SellPrice = 60, LevelUnlock = 32, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__Pink_);
            Case MasterBox_NR200P__Purple_Menu_ = new Case() { Id = 69, Name = "MasterBox NR200P (Purple Menu)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 0, SellPrice = 0, LevelUnlock = 1, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__Purple_Menu_);
            Case MasterBox_NR200P__Purple_Window_ = new Case() { Id = 70, Name = "MasterBox NR200P (Purple Window)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 180, SellPrice = 60, LevelUnlock = 32, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__Purple_Window_);
            Case MasterBox_NR200P__Purple_ = new Case() { Id = 71, Name = "MasterBox NR200P (Purple)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 180, SellPrice = 60, LevelUnlock = 32, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__Purple_);
            Case MasterBox_NR200P__Sakura_Window_ = new Case() { Id = 72, Name = "MasterBox NR200P (Sakura Window)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 330, SellPrice = 110, LevelUnlock = 32, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__Sakura_Window_);
            Case MasterBox_NR200P__Sakura_ = new Case() { Id = 73, Name = "MasterBox NR200P (Sakura)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 330, SellPrice = 110, LevelUnlock = 32, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__Sakura_);
            Case MasterBox_NR200P__White_Window_ = new Case() { Id = 74, Name = "MasterBox NR200P (White Window)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 130, SellPrice = 43, LevelUnlock = 32, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__White_Window_);
            Case MasterBox_NR200P__White_ = new Case() { Id = 75, Name = "MasterBox NR200P (White)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 130, SellPrice = 43, LevelUnlock = 32, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__White_);
            Case MasterCase_H500P = new Case() { Id = 76, Name = "MasterCase H500P", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 150, SellPrice = 50, LevelUnlock = 3, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 412, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_140, MasterCase_H500P_200mm_RGB, MasterCase_H500P_200mm_RGB }, InherentCooling = 0 }; cases.Add(MasterCase_H500P);
            Case MasterCase_Maker_5_MSI_Dragon_Edition = new Case() { Id = 77, Name = "MasterCase Maker 5 MSI Dragon Edition", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 250, SellPrice = 83, LevelUnlock = 15, LevelPercent = 20, Lighting = Color.White, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 412, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_140, Heat_Away_140 }, RestrictedGpuLength = 296, InherentCooling = 0 }; cases.Add(MasterCase_Maker_5_MSI_Dragon_Edition);
            Case MasterCase_Maker_5t = new Case() { Id = 78, Name = "MasterCase Maker 5t", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 180, SellPrice = 60, LevelUnlock = 8, LevelPercent = 1, Lighting = Color.Red, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 412, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_140 }, RestrictedGpuLength = 296, InherentCooling = 0 }; cases.Add(MasterCase_Maker_5t);
            Case MasterFrame_700__Bench_Mode_ = new Case() { Id = 79, Name = "MasterFrame 700 (Bench Mode)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 700, SellPrice = 233, LevelUnlock = 34, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Full_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 210, MaxGPULength = 500, MaxCPUFanHeight = 200, UseForWcJobs = false, IsOpenBench = true, InherentCooling = 0.7 }; cases.Add(MasterFrame_700__Bench_Mode_);
            Case MasterFrame_700__Showcase_Mode_ = new Case() { Id = 80, Name = "MasterFrame 700 (Showcase Mode)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 700, SellPrice = 233, LevelUnlock = 34, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Full_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 210, MaxGPULength = 450, MaxCPUFanHeight = 158, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(MasterFrame_700__Showcase_Mode_);
            Case Silencio_S400 = new Case() { Id = 81, Name = "Silencio S400", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 115, SellPrice = 38, LevelUnlock = 31, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 140, MaxGPULength = 319, MaxCPUFanHeight = 166, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { SILENCIO_FP_120_PWM, SILENCIO_FP_120_PWM }, InherentCooling = 0 }; cases.Add(Silencio_S400);
            Case Silencio_S400___Window = new Case() { Id = 82, Name = "Silencio S400 - Window", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 130, SellPrice = 43, LevelUnlock = 31, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 140, MaxGPULength = 319, MaxCPUFanHeight = 166, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { SILENCIO_FP_120_PWM, SILENCIO_FP_120_PWM }, InherentCooling = 0 }; cases.Add(Silencio_S400___Window);
            Case Silencio_S600 = new Case() { Id = 83, Name = "Silencio S600", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 130, SellPrice = 43, LevelUnlock = 31, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 398, MaxCPUFanHeight = 166, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { SILENCIO_FP_120_PWM, SILENCIO_FP_120_PWM }, InherentCooling = 0 }; cases.Add(Silencio_S600);
            Case Silencio_S600___Window = new Case() { Id = 84, Name = "Silencio S600 - Window", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 130, SellPrice = 43, LevelUnlock = 31, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 398, MaxCPUFanHeight = 166, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { SILENCIO_FP_120_PWM, SILENCIO_FP_120_PWM }, InherentCooling = 0 }; cases.Add(Silencio_S600___Window);
            Case Carbide_Series_175R_RGB = new Case() { Id = 85, Name = "Carbide Series 175R RGB", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 85, SellPrice = 28, LevelUnlock = 21, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 330, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { LL120_RGB_LED }, InherentCooling = 0 }; cases.Add(Carbide_Series_175R_RGB);
            Case Carbide_Series_275R__Black_ = new Case() { Id = 86, Name = "Carbide Series 275R (Black)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 80, SellPrice = 27, LevelUnlock = 13, LevelPercent = 70, Lighting = Color.White, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 370, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(Carbide_Series_275R__Black_);
            Case Carbide_Series_275R__White_ = new Case() { Id = 87, Name = "Carbide Series 275R (White)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 80, SellPrice = 27, LevelUnlock = 13, LevelPercent = 70, Lighting = Color.White, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 370, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(Carbide_Series_275R__White_);
            Case Carbide_Series_Air_740 = new Case() { Id = 88, Name = "Carbide Series Air 740", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 280, SellPrice = 93, LevelUnlock = 21, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Cube, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 225, MaxGPULength = 330, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_140, Heat_Away_140 }, InherentCooling = 0 }; cases.Add(Carbide_Series_Air_740);
            Case Carbide_Series_SPEC_DELTA_RGB = new Case() { Id = 89, Name = "Carbide Series SPEC-DELTA RGB", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 90, SellPrice = 30, LevelUnlock = 26, LevelPercent = 32, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 330, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { ML120, LL120_RGB_LED, LL120_RGB_LED, LL120_RGB_LED }, InherentCooling = 0 }; cases.Add(Carbide_Series_SPEC_DELTA_RGB);
            Case Carbide_Series_SPEC_OMEGA__Black_ = new Case() { Id = 90, Name = "Carbide Series SPEC-OMEGA (Black)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 100, SellPrice = 33, LevelUnlock = 23, LevelPercent = 1, Lighting = Color.Red, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 370, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { ML120, ML120 }, InherentCooling = 0 }; cases.Add(Carbide_Series_SPEC_OMEGA__Black_);
            Case Carbide_Series_SPEC_OMEGA__Black_Red_ = new Case() { Id = 91, Name = "Carbide Series SPEC-OMEGA (Black/Red)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 100, SellPrice = 33, LevelUnlock = 23, LevelPercent = 1, Lighting = Color.Red, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 370, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { ML120, ML120 }, InherentCooling = 0 }; cases.Add(Carbide_Series_SPEC_OMEGA__Black_Red_);
            Case Carbide_Series_SPEC_OMEGA__Black_White_ = new Case() { Id = 92, Name = "Carbide Series SPEC-OMEGA (Black/White)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 100, SellPrice = 33, LevelUnlock = 23, LevelPercent = 1, Lighting = Color.White, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 370, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { ML120, ML120 }, InherentCooling = 0 }; cases.Add(Carbide_Series_SPEC_OMEGA__Black_White_);
            Case Carbide_SPEC_06_RGB__Black_ = new Case() { Id = 93, Name = "Carbide SPEC-06 RGB (Black)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 100, SellPrice = 33, LevelUnlock = 23, LevelPercent = 30, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 370, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(Carbide_SPEC_06_RGB__Black_);
            Case Carbide_SPEC_06_RGB__White_ = new Case() { Id = 94, Name = "Carbide SPEC-06 RGB (White)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 100, SellPrice = 33, LevelUnlock = 23, LevelPercent = 30, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 370, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(Carbide_SPEC_06_RGB__White_);
            Case Crystal_Series_280X_RGB__Black_ = new Case() { Id = 95, Name = "Crystal Series 280X RGB (Black)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 160, SellPrice = 53, LevelUnlock = 26, LevelPercent = 30, Lighting = Color.RGB, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 300, MaxCPUFanHeight = 150, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { LL120_RGB_LED, LL120_RGB_LED }, InherentCooling = 0 }; cases.Add(Crystal_Series_280X_RGB__Black_);
            Case Crystal_Series_280X_RGB__White_ = new Case() { Id = 96, Name = "Crystal Series 280X RGB (White)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 160, SellPrice = 53, LevelUnlock = 26, LevelPercent = 30, Lighting = Color.RGB, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 300, MaxCPUFanHeight = 150, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { LL120_RGB_LED, LL120_RGB_LED }, InherentCooling = 0 }; cases.Add(Crystal_Series_280X_RGB__White_);
            Case Crystal_Series_570X_RGB = new Case() { Id = 97, Name = "Crystal Series 570X RGB", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 180, SellPrice = 60, LevelUnlock = 24, LevelPercent = 33, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 225, MaxGPULength = 370, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { SP120_RGB_LED, SP120_RGB_LED, SP120_RGB_LED }, InherentCooling = 0 }; cases.Add(Crystal_Series_570X_RGB);
            Case Graphite_Series_380T__Black_ = new Case() { Id = 98, Name = "Graphite Series 380T (Black)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 110, SellPrice = 37, LevelUnlock = 23, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Cube, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 180, MaxGPULength = 290, MaxCPUFanHeight = 150, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { ML120, LL140_RGB_LED }, InherentCooling = 0 }; cases.Add(Graphite_Series_380T__Black_);
            Case Graphite_Series_380T__White_ = new Case() { Id = 99, Name = "Graphite Series 380T (White)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 110, SellPrice = 37, LevelUnlock = 23, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Cube, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 180, MaxGPULength = 290, MaxCPUFanHeight = 150, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { ML120, LL140_RGB_LED }, InherentCooling = 0 }; cases.Add(Graphite_Series_380T__White_);
            Case Graphite_Series_380T__Yellow_ = new Case() { Id = 100, Name = "Graphite Series 380T (Yellow)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 110, SellPrice = 37, LevelUnlock = 23, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Cube, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 180, MaxGPULength = 290, MaxCPUFanHeight = 150, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { ML120, LL140_RGB_LED }, InherentCooling = 0 }; cases.Add(Graphite_Series_380T__Yellow_);
            Case iCUE_220T_RGB_Airflow__Black_ = new Case() { Id = 101, Name = "iCUE 220T RGB Airflow (Black)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 120, SellPrice = 40, LevelUnlock = 23, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 300, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { LL120_RGB_LED, LL120_RGB_LED, LL120_RGB_LED }, InherentCooling = 0 }; cases.Add(iCUE_220T_RGB_Airflow__Black_);
            Case iCUE_220T_RGB_Airflow__White_ = new Case() { Id = 102, Name = "iCUE 220T RGB Airflow (White)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 120, SellPrice = 40, LevelUnlock = 23, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 300, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { LL120_RGB_LED, LL120_RGB_LED, LL120_RGB_LED }, InherentCooling = 0 }; cases.Add(iCUE_220T_RGB_Airflow__White_);
            Case iCUE_220T_RGB_TG__Black_ = new Case() { Id = 103, Name = "iCUE 220T RGB TG (Black)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 140, SellPrice = 47, LevelUnlock = 23, LevelPercent = 20, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 300, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { LL120_RGB_LED, LL120_RGB_LED, LL120_RGB_LED }, InherentCooling = 0 }; cases.Add(iCUE_220T_RGB_TG__Black_);
            Case iCUE_220T_RGB_TG__White_ = new Case() { Id = 104, Name = "iCUE 220T RGB TG (White)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 140, SellPrice = 47, LevelUnlock = 23, LevelPercent = 20, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 300, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { LL120_RGB_LED, LL120_RGB_LED, LL120_RGB_LED }, InherentCooling = 0 }; cases.Add(iCUE_220T_RGB_TG__White_);
            Case iCUE_5000D__Black_ = new Case() { Id = 105, Name = "iCUE 5000D (Black)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 180, SellPrice = 60, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { SP120__Black_, SP120__Black_ }, InherentCooling = 0 }; cases.Add(iCUE_5000D__Black_);
            Case iCUE_5000D__White_ = new Case() { Id = 106, Name = "iCUE 5000D (White)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 180, SellPrice = 60, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { SP120__White_, SP120__White_ }, InherentCooling = 0 }; cases.Add(iCUE_5000D__White_);
            Case iCUE_5000D_Airflow__Black_ = new Case() { Id = 107, Name = "iCUE 5000D Airflow (Black)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 180, SellPrice = 60, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { SP120__Black_, SP120__Black_ }, InherentCooling = 0 }; cases.Add(iCUE_5000D_Airflow__Black_);
            Case iCUE_5000D_Airflow__White_ = new Case() { Id = 108, Name = "iCUE 5000D Airflow (White)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 180, SellPrice = 60, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { SP120__White_, SP120__White_ }, InherentCooling = 0 }; cases.Add(iCUE_5000D_Airflow__White_);
            Case iCUE_5000T = new Case() { Id = 109, Name = "iCUE 5000T", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 180, SellPrice = 60, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { LL120_RGB_LED, LL120_RGB_LED, LL120_RGB_LED }, InherentCooling = 0 }; cases.Add(iCUE_5000T);
            Case iCUE_5000T__White_ = new Case() { Id = 110, Name = "iCUE 5000T (White)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 180, SellPrice = 60, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { LL120_RGB_LED__White_, LL120_RGB_LED__White_, LL120_RGB_LED__White_ }, InherentCooling = 0 }; cases.Add(iCUE_5000T__White_);
            Case iCUE_5000X_RGB__Black_ = new Case() { Id = 111, Name = "iCUE 5000X RGB (Black)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 180, SellPrice = 60, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { SP120_RGB_Elite__Black_, SP120_RGB_Elite__Black_, SP120_RGB_Elite__Black_ }, InherentCooling = 0 }; cases.Add(iCUE_5000X_RGB__Black_);
            Case iCUE_5000X_RGB__White_ = new Case() { Id = 112, Name = "iCUE 5000X RGB (White)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 180, SellPrice = 60, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { SP120_RGB_Elite__White_, SP120_RGB_Elite__White_, SP120_RGB_Elite__White_ }, InherentCooling = 0 }; cases.Add(iCUE_5000X_RGB__White_);
            Case MENU_iCUE_5000D_Airflow__White_ = new Case() { Id = 113, Name = "MENU iCUE 5000D Airflow (White)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 0, SellPrice = 0, LevelUnlock = 0, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { SP120_RGB_Elite__Black_, SP120_RGB_Elite__Black_, SP120_RGB_Elite__Black_ }, InherentCooling = 0 }; cases.Add(MENU_iCUE_5000D_Airflow__White_);
            Case Obsidian_Series_1000D = new Case() { Id = 114, Name = "Obsidian Series 1000D", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 500, SellPrice = 167, LevelUnlock = 8, LevelPercent = 80, Lighting = Color.RGB, CaseSize = CaseSize.Super_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 3, MaxPsuLength = 225, MaxGPULength = 400, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(Obsidian_Series_1000D);
            Case Obsidian_Series_500D = new Case() { Id = 115, Name = "Obsidian Series 500D", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 150, SellPrice = 50, LevelUnlock = 21, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 225, MaxGPULength = 370, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(Obsidian_Series_500D);
            Case Obsidian_Series_750D = new Case() { Id = 116, Name = "Obsidian Series 750D", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 160, SellPrice = 53, LevelUnlock = 8, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Full_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 220, MaxGPULength = 450, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { ML140, ML140, ML140 }, InherentCooling = 0 }; cases.Add(Obsidian_Series_750D);
            Case Obsidian_Series_900D = new Case() { Id = 117, Name = "Obsidian Series 900D", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 360, SellPrice = 120, LevelUnlock = 8, LevelPercent = 60, Lighting = null, CaseSize = CaseSize.Super_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 3, MaxPsuLength = 280, MaxGPULength = 500, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { ML120, ML120, ML120, ML120 }, InherentCooling = 0 }; cases.Add(Obsidian_Series_900D);
            Case EARLKASE_RGB = new Case() { Id = 118, Name = "EARLKASE RGB", PartType = PartType.Case, Manufacturer = Deepcool, Price = 85, SellPrice = 28, LevelUnlock = 17, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 340, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { RF_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(EARLKASE_RGB);
            Case EARLKASE_RGB_WH = new Case() { Id = 119, Name = "EARLKASE RGB WH", PartType = PartType.Case, Manufacturer = Deepcool, Price = 85, SellPrice = 28, LevelUnlock = 17, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 340, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { RF_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(EARLKASE_RGB_WH);
            Case MATREXX_55 = new Case() { Id = 120, Name = "MATREXX 55", PartType = PartType.Case, Manufacturer = Deepcool, Price = 50, SellPrice = 17, LevelUnlock = 10, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 1, MaxPsuLength = 170, MaxGPULength = 370, MaxCPUFanHeight = 168, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(MATREXX_55);
            Case DG_73 = new Case() { Id = 121, Name = "DG-73", PartType = PartType.Case, Manufacturer = EVGA, Price = 90, SellPrice = 30, LevelUnlock = 28, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 1, MaxPsuLength = 250, MaxGPULength = 390, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(DG_73);
            Case DG_75__Black_ = new Case() { Id = 122, Name = "DG-75 (Black)", PartType = PartType.Case, Manufacturer = EVGA, Price = 110, SellPrice = 37, LevelUnlock = 28, LevelPercent = 15, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 1, MaxPsuLength = 250, MaxGPULength = 390, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(DG_75__Black_);
            Case DG_75__White_ = new Case() { Id = 123, Name = "DG-75 (White)", PartType = PartType.Case, Manufacturer = EVGA, Price = 120, SellPrice = 40, LevelUnlock = 28, LevelPercent = 15, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 1, MaxPsuLength = 250, MaxGPULength = 390, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(DG_75__White_);
            Case DG_76__Black_ = new Case() { Id = 124, Name = "DG-76 (Black)", PartType = PartType.Case, Manufacturer = EVGA, Price = 140, SellPrice = 47, LevelUnlock = 28, LevelPercent = 35, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 1, MaxPsuLength = 250, MaxGPULength = 390, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(DG_76__Black_);
            Case DG_76__White_ = new Case() { Id = 125, Name = "DG-76 (White)", PartType = PartType.Case, Manufacturer = EVGA, Price = 150, SellPrice = 50, LevelUnlock = 28, LevelPercent = 35, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 1, MaxPsuLength = 250, MaxGPULength = 390, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(DG_76__White_);
            Case DG_77__Black_ = new Case() { Id = 126, Name = "DG-77 (Black)", PartType = PartType.Case, Manufacturer = EVGA, Price = 160, SellPrice = 53, LevelUnlock = 28, LevelPercent = 55, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 1, MaxPsuLength = 250, MaxGPULength = 390, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(DG_77__Black_);
            Case DG_77__White_ = new Case() { Id = 127, Name = "DG-77 (White)", PartType = PartType.Case, Manufacturer = EVGA, Price = 170, SellPrice = 57, LevelUnlock = 28, LevelPercent = 55, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 1, MaxPsuLength = 250, MaxGPULength = 390, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(DG_77__White_);
            Case DG_84_Full_Tower = new Case() { Id = 128, Name = "DG-84 Full Tower", PartType = PartType.Case, Manufacturer = EVGA, Price = 150, SellPrice = 50, LevelUnlock = 18, LevelPercent = 1, Lighting = Color.White, CaseSize = CaseSize.Full_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 350, MaxCPUFanHeight = 175, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(DG_84_Full_Tower);
            Case DG_85_Full_Tower = new Case() { Id = 129, Name = "DG-85 Full Tower", PartType = PartType.Case, Manufacturer = EVGA, Price = 200, SellPrice = 67, LevelUnlock = 18, LevelPercent = 25, Lighting = Color.White, CaseSize = CaseSize.Full_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 350, MaxCPUFanHeight = 175, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(DG_85_Full_Tower);
            Case DG_86_Full_Tower = new Case() { Id = 130, Name = "DG-86 Full Tower", PartType = PartType.Case, Manufacturer = EVGA, Price = 220, SellPrice = 73, LevelUnlock = 18, LevelPercent = 50, Lighting = Color.White, CaseSize = CaseSize.Full_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 350, MaxCPUFanHeight = 175, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_140, Heat_Away_140, Heat_Away_140 }, InherentCooling = 0 }; cases.Add(DG_86_Full_Tower);
            Case DG_87_Full_Tower = new Case() { Id = 131, Name = "DG-87 Full Tower", PartType = PartType.Case, Manufacturer = EVGA, Price = 240, SellPrice = 80, LevelUnlock = 18, LevelPercent = 75, Lighting = Color.White, CaseSize = CaseSize.Full_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 350, MaxCPUFanHeight = 175, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_140, Heat_Away_140, Heat_Away_140, Heat_Away_140 }, InherentCooling = 0 }; cases.Add(DG_87_Full_Tower);
            Case Define_7_Black = new Case() { Id = 132, Name = "Define 7 Black", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 180, SellPrice = 60, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 491, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_Black);
            Case Define_7_Clear_TG_Black = new Case() { Id = 133, Name = "Define 7 Clear TG Black", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 180, SellPrice = 60, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 491, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_Clear_TG_Black);
            Case Define_7_Clear_TG_White = new Case() { Id = 134, Name = "Define 7 Clear TG White", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 180, SellPrice = 60, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 491, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__White_, Dynamic_X2_GP_14__White_, Dynamic_X2_GP_14__White_ }, InherentCooling = 0 }; cases.Add(Define_7_Clear_TG_White);
            Case Define_7_Compact = new Case() { Id = 135, Name = "Define 7 Compact", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 100, SellPrice = 33, LevelUnlock = 33, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_12__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_Compact);
            Case Define_7_Compact_Dark_TG_Black = new Case() { Id = 136, Name = "Define 7 Compact Dark TG Black", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 100, SellPrice = 33, LevelUnlock = 33, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_12__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_Compact_Dark_TG_Black);
            Case Define_7_Compact_Dark_TG_Black_Grill = new Case() { Id = 137, Name = "Define 7 Compact Dark TG Black Grill", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 100, SellPrice = 33, LevelUnlock = 33, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_12__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_Compact_Dark_TG_Black_Grill);
            Case Define_7_Compact_Grill = new Case() { Id = 138, Name = "Define 7 Compact Grill", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 100, SellPrice = 33, LevelUnlock = 33, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_12__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_Compact_Grill);
            Case Define_7_Compact_Light_TG_Black = new Case() { Id = 139, Name = "Define 7 Compact Light TG Black", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 110, SellPrice = 37, LevelUnlock = 33, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_12__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_Compact_Light_TG_Black);
            Case Define_7_Compact_Light_TG_Black_Grill = new Case() { Id = 140, Name = "Define 7 Compact Light TG Black Grill", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 110, SellPrice = 37, LevelUnlock = 33, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_12__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_Compact_Light_TG_Black_Grill);
            Case Define_7_Compact_Light_TG_White = new Case() { Id = 141, Name = "Define 7 Compact Light TG White", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 110, SellPrice = 37, LevelUnlock = 33, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_12__White_, Dynamic_X2_GP_14__White_ }, InherentCooling = 0 }; cases.Add(Define_7_Compact_Light_TG_White);
            Case Define_7_Compact_Light_TG_White_Grill = new Case() { Id = 142, Name = "Define 7 Compact Light TG White Grill", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 110, SellPrice = 37, LevelUnlock = 33, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_12__White_, Dynamic_X2_GP_14__White_ }, InherentCooling = 0 }; cases.Add(Define_7_Compact_Light_TG_White_Grill);
            Case Define_7_Compact_White = new Case() { Id = 143, Name = "Define 7 Compact White", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 100, SellPrice = 33, LevelUnlock = 33, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_12__White_, Dynamic_X2_GP_14__White_ }, InherentCooling = 0 }; cases.Add(Define_7_Compact_White);
            Case Define_7_Compact_White_Grill = new Case() { Id = 144, Name = "Define 7 Compact White Grill", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 100, SellPrice = 33, LevelUnlock = 33, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_12__White_, Dynamic_X2_GP_14__White_ }, InherentCooling = 0 }; cases.Add(Define_7_Compact_White_Grill);
            Case Define_7_Dark_TG_Gray = new Case() { Id = 145, Name = "Define 7 Dark TG Gray", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 180, SellPrice = 60, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 491, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_Dark_TG_Gray);
            Case Define_7_Gray = new Case() { Id = 146, Name = "Define 7 Gray", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 180, SellPrice = 60, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 491, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_Gray);
            Case Define_7_Light_TG_Black = new Case() { Id = 147, Name = "Define 7 Light TG Black", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 180, SellPrice = 60, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 491, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_Light_TG_Black);
            Case Define_7_Light_TG_Gray = new Case() { Id = 148, Name = "Define 7 Light TG Gray", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 180, SellPrice = 60, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 491, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_Light_TG_Gray);
            Case Define_7_White = new Case() { Id = 149, Name = "Define 7 White", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 180, SellPrice = 60, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 491, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__White_, Dynamic_X2_GP_14__White_, Dynamic_X2_GP_14__White_ }, InherentCooling = 0 }; cases.Add(Define_7_White);
            Case Define_7_XL = new Case() { Id = 150, Name = "Define 7 XL", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 210, SellPrice = 70, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Full_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 549, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_XL);
            Case Define_7_XL_Dark_TG = new Case() { Id = 151, Name = "Define 7 XL Dark TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 210, SellPrice = 70, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Full_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 549, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_XL_Dark_TG);
            Case Define_7_XL_Light_TG = new Case() { Id = 152, Name = "Define 7 XL Light TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 210, SellPrice = 70, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Full_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 549, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_XL_Light_TG);
            Case Define_R5_Black = new Case() { Id = 153, Name = "Define R5 Black", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 110, SellPrice = 37, LevelUnlock = 19, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14, Dynamic_X2_GP_14 }, RestrictedGpuLength = 310, InherentCooling = 0 }; cases.Add(Define_R5_Black);
            Case Define_R5_Black___Window = new Case() { Id = 154, Name = "Define R5 Black - Window", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 110, SellPrice = 37, LevelUnlock = 19, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14, Dynamic_X2_GP_14 }, RestrictedGpuLength = 310, InherentCooling = 0 }; cases.Add(Define_R5_Black___Window);
            Case Define_R5_Blackout_Edition = new Case() { Id = 155, Name = "Define R5 Blackout Edition", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 110, SellPrice = 37, LevelUnlock = 19, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, RestrictedGpuLength = 310, InherentCooling = 0 }; cases.Add(Define_R5_Blackout_Edition);
            Case Define_R5_Blackout_Edition___Window = new Case() { Id = 156, Name = "Define R5 Blackout Edition - Window", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 110, SellPrice = 37, LevelUnlock = 19, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, RestrictedGpuLength = 310, InherentCooling = 0 }; cases.Add(Define_R5_Blackout_Edition___Window);
            Case Define_R5_Titanium = new Case() { Id = 157, Name = "Define R5 Titanium", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 110, SellPrice = 37, LevelUnlock = 19, LevelPercent = 10, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14, Dynamic_X2_GP_14 }, RestrictedGpuLength = 310, InherentCooling = 0 }; cases.Add(Define_R5_Titanium);
            Case Define_R5_Titanium___Window = new Case() { Id = 158, Name = "Define R5 Titanium - Window", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 110, SellPrice = 37, LevelUnlock = 19, LevelPercent = 10, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14, Dynamic_X2_GP_14 }, RestrictedGpuLength = 310, InherentCooling = 0 }; cases.Add(Define_R5_Titanium___Window);
            Case Define_R5_White = new Case() { Id = 159, Name = "Define R5 White", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 110, SellPrice = 37, LevelUnlock = 19, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14, Dynamic_X2_GP_14 }, RestrictedGpuLength = 310, InherentCooling = 0 }; cases.Add(Define_R5_White);
            Case Define_R5_White___Window = new Case() { Id = 160, Name = "Define R5 White - Window", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 110, SellPrice = 37, LevelUnlock = 19, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14, Dynamic_X2_GP_14 }, RestrictedGpuLength = 310, InherentCooling = 0 }; cases.Add(Define_R5_White___Window);
            Case Define_R5_White___Gold_Limited_Edition___Window = new Case() { Id = 161, Name = "Define R5 White & Gold Limited Edition - Window", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 110, SellPrice = 37, LevelUnlock = 19, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14, Dynamic_X2_GP_14 }, RestrictedGpuLength = 310, InherentCooling = 0 }; cases.Add(Define_R5_White___Gold_Limited_Edition___Window);
            Case Define_R6_Black = new Case() { Id = 162, Name = "Define R6 Black", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 144, SellPrice = 48, LevelUnlock = 24, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14, Dynamic_X2_GP_14, Dynamic_X2_GP_14 }, InherentCooling = 0 }; cases.Add(Define_R6_Black);
            Case Define_R6_Black_TG = new Case() { Id = 163, Name = "Define R6 Black TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 150, SellPrice = 50, LevelUnlock = 24, LevelPercent = 60, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14, Dynamic_X2_GP_14, Dynamic_X2_GP_14 }, InherentCooling = 0 }; cases.Add(Define_R6_Black_TG);
            Case Define_R6_Blackout = new Case() { Id = 164, Name = "Define R6 Blackout", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 147, SellPrice = 49, LevelUnlock = 25, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_R6_Blackout);
            Case Define_R6_Blackout_TG = new Case() { Id = 165, Name = "Define R6 Blackout TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 153, SellPrice = 51, LevelUnlock = 25, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_R6_Blackout_TG);
            Case Define_R6_Gunmetal = new Case() { Id = 166, Name = "Define R6 Gunmetal", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 132, SellPrice = 44, LevelUnlock = 25, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_R6_Gunmetal);
            Case Define_R6_Gunmetal_TG = new Case() { Id = 167, Name = "Define R6 Gunmetal TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 143, SellPrice = 48, LevelUnlock = 25, LevelPercent = 60, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_R6_Gunmetal_TG);
            Case Define_R6_White = new Case() { Id = 168, Name = "Define R6 White", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 125, SellPrice = 42, LevelUnlock = 24, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__White_, Dynamic_X2_GP_14__White_, Dynamic_X2_GP_14__White_ }, InherentCooling = 0 }; cases.Add(Define_R6_White);
            Case Define_R6_White_TG = new Case() { Id = 169, Name = "Define R6 White TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 150, SellPrice = 50, LevelUnlock = 24, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__White_, Dynamic_X2_GP_14__White_, Dynamic_X2_GP_14__White_ }, InherentCooling = 0 }; cases.Add(Define_R6_White_TG);
            Case Focus_G___Black = new Case() { Id = 170, Name = "Focus G - Black", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 50, SellPrice = 17, LevelUnlock = 20, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 230, MaxGPULength = 380, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_12, Dynamic_X2_GP_12 }, InherentCooling = 0 }; cases.Add(Focus_G___Black);
            Case Focus_G___Gunmetal_Gray = new Case() { Id = 171, Name = "Focus G - Gunmetal Gray", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 60, SellPrice = 20, LevelUnlock = 20, LevelPercent = 15, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 230, MaxGPULength = 380, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_12, Dynamic_X2_GP_12 }, InherentCooling = 0 }; cases.Add(Focus_G___Gunmetal_Gray);
            Case Focus_G___Mystic_Red = new Case() { Id = 172, Name = "Focus G - Mystic Red", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 60, SellPrice = 20, LevelUnlock = 20, LevelPercent = 45, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 230, MaxGPULength = 380, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_12, Dynamic_X2_GP_12 }, InherentCooling = 0 }; cases.Add(Focus_G___Mystic_Red);
            Case Focus_G___Petrol_Blue = new Case() { Id = 173, Name = "Focus G - Petrol Blue", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 60, SellPrice = 20, LevelUnlock = 20, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 230, MaxGPULength = 380, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_12, Dynamic_X2_GP_12 }, InherentCooling = 0 }; cases.Add(Focus_G___Petrol_Blue);
            Case Focus_G___White = new Case() { Id = 174, Name = "Focus G - White", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 50, SellPrice = 17, LevelUnlock = 20, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 230, MaxGPULength = 380, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_12, Dynamic_X2_GP_12 }, InherentCooling = 0 }; cases.Add(Focus_G___White);
            Case Fractal_Menu = new Case() { Id = 175, Name = "Fractal Menu", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 0, SellPrice = 0, LevelUnlock = 0, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 491, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Fractal_Menu);
            Case Meshify_2 = new Case() { Id = 176, Name = "Meshify 2", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 110, SellPrice = 37, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 491, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_2);
            Case Meshify_2_Clear_TG = new Case() { Id = 177, Name = "Meshify 2 Clear TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 140, SellPrice = 47, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 491, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_2_Clear_TG);
            Case Meshify_2_Compact = new Case() { Id = 178, Name = "Meshify 2 Compact", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 140, SellPrice = 47, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 165, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_12__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_2_Compact);
            Case Meshify_2_Compact_Clear_TG_White = new Case() { Id = 179, Name = "Meshify 2 Compact Clear TG White", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 140, SellPrice = 47, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 165, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_12__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_2_Compact_Clear_TG_White);
            Case Meshify_2_Compact_Dark_TG_Black = new Case() { Id = 180, Name = "Meshify 2 Compact Dark TG Black", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 140, SellPrice = 47, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 165, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_12__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_2_Compact_Dark_TG_Black);
            Case Meshify_2_Compact_Light_TG_Black = new Case() { Id = 181, Name = "Meshify 2 Compact Light TG Black", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 140, SellPrice = 47, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 165, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_12__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_2_Compact_Light_TG_Black);
            Case Meshify_2_Compact_Light_TG_Grey = new Case() { Id = 182, Name = "Meshify 2 Compact Light TG Grey", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 140, SellPrice = 47, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 165, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_12__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_2_Compact_Light_TG_Grey);
            Case Meshify_2_Dark_TG = new Case() { Id = 183, Name = "Meshify 2 Dark TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 140, SellPrice = 47, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 491, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_2_Dark_TG);
            Case Meshify_2_Light_TG = new Case() { Id = 184, Name = "Meshify 2 Light TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 140, SellPrice = 47, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 491, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_2_Light_TG);
            Case Meshify_2_XL_Dark_TG = new Case() { Id = 185, Name = "Meshify 2 XL Dark TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 180, SellPrice = 60, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Full_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 549, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_2_XL_Dark_TG);
            Case Meshify_2_XL_Light_TG = new Case() { Id = 186, Name = "Meshify 2 XL Light TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 180, SellPrice = 60, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Full_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 549, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_2_XL_Light_TG);
            Case Meshify_C = new Case() { Id = 187, Name = "Meshify C", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 68, SellPrice = 23, LevelUnlock = 22, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 175, MaxGPULength = 315, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_12__Black_, Dynamic_X2_GP_12__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_C);
            Case Meshify_C___Dark_TG = new Case() { Id = 188, Name = "Meshify C – Dark TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 90, SellPrice = 30, LevelUnlock = 22, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 175, MaxGPULength = 315, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_12__Black_, Dynamic_X2_GP_12__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_C___Dark_TG);
            Case Meshify_C___TG = new Case() { Id = 189, Name = "Meshify C – TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 90, SellPrice = 30, LevelUnlock = 22, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 175, MaxGPULength = 315, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_12__Black_, Dynamic_X2_GP_12__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_C___TG);
            Case Meshify_C_White___TG = new Case() { Id = 190, Name = "Meshify C White - TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 90, SellPrice = 30, LevelUnlock = 22, LevelPercent = 60, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 175, MaxGPULength = 315, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Dynamic_X2_GP_12__Black_, Dynamic_X2_GP_12__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_C_White___TG);
            Case Node_202 = new Case() { Id = 191, Name = "Node 202", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 85, SellPrice = 28, LevelUnlock = 29, LevelPercent = 80, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 0, Number140mmSlots = 0, MaxPsuLength = 130, MaxGPULength = 310, MaxCPUFanHeight = 56, UseForWcJobs = false, IsOpenBench = false, InherentCooling = 0 }; cases.Add(Node_202);
            Case Vector_RS_Dark_TG = new Case() { Id = 192, Name = "Vector RS Dark TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 180, SellPrice = 60, LevelUnlock = 21, LevelPercent = 80, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, InherentCooling = 0 }; cases.Add(Vector_RS_Dark_TG);
            Case Vector_RS_Dark_TG__Glass_Lid_ = new Case() { Id = 193, Name = "Vector RS Dark TG (Glass Lid)", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 180, SellPrice = 60, LevelUnlock = 21, LevelPercent = 80, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, InherentCooling = 0 }; cases.Add(Vector_RS_Dark_TG__Glass_Lid_);
            Case Vector_RS_TG = new Case() { Id = 194, Name = "Vector RS TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 180, SellPrice = 60, LevelUnlock = 21, LevelPercent = 80, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, InherentCooling = 0 }; cases.Add(Vector_RS_TG);
            Case Vector_RS_TG__Glass_Lid_ = new Case() { Id = 195, Name = "Vector RS TG (Glass Lid)", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 180, SellPrice = 60, LevelUnlock = 21, LevelPercent = 80, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, InherentCooling = 0 }; cases.Add(Vector_RS_TG__Glass_Lid_);
            Case CMT340 = new Case() { Id = 196, Name = "CMT340", PartType = PartType.Case, Manufacturer = FSP, Price = 100, SellPrice = 33, LevelUnlock = 14, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 1, MaxPsuLength = 170, MaxGPULength = 350, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { CMT510, CMT510, CMT510, CMT510 }, InherentCooling = 0 }; cases.Add(CMT340);
            Case CMT510_Plus = new Case() { Id = 197, Name = "CMT510 Plus", PartType = PartType.Case, Manufacturer = FSP, Price = 130, SellPrice = 43, LevelUnlock = 14, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 311, MaxGPULength = 400, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { CMT510, CMT510, CMT510, CMT510 }, InherentCooling = 0 }; cases.Add(CMT510_Plus);
            Case CMT520_Plus = new Case() { Id = 198, Name = "CMT520 Plus", PartType = PartType.Case, Manufacturer = FSP, Price = 130, SellPrice = 43, LevelUnlock = 14, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 200, MaxGPULength = 423, MaxCPUFanHeight = 163, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { CMT520, CMT520, CMT520, CMT520 }, InherentCooling = 0 }; cases.Add(CMT520_Plus);
            Case Genome_ROG_Certified_Edition = new Case() { Id = 199, Name = "Genome ROG Certified Edition", PartType = PartType.Case, Manufacturer = GamerStorm, Price = 280, SellPrice = 93, LevelUnlock = 28, LevelPercent = 60, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 330, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(Genome_ROG_Certified_Edition);
            Case NEW_ARK_90 = new Case() { Id = 200, Name = "NEW ARK 90", PartType = PartType.Case, Manufacturer = GamerStorm, Price = 300, SellPrice = 100, LevelUnlock = 28, LevelPercent = 70, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 200, MaxGPULength = 400, MaxCPUFanHeight = 186, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { RF_140, RF_140, RF_140, RF_140 }, InherentCooling = 0 }; cases.Add(NEW_ARK_90);
            Case Quadstellar = new Case() { Id = 201, Name = "Quadstellar", PartType = PartType.Case, Manufacturer = GamerStorm, Price = 400, SellPrice = 133, LevelUnlock = 30, LevelPercent = 70, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 300, MaxGPULength = 380, MaxCPUFanHeight = 110, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120, Heat_Away_120, Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(Quadstellar);
            Case Quadstellar_Electro_Limited_Edition = new Case() { Id = 202, Name = "Quadstellar Electro Limited Edition", PartType = PartType.Case, Manufacturer = GamerStorm, Price = 450, SellPrice = 150, LevelUnlock = 30, LevelPercent = 90, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 300, MaxGPULength = 380, MaxCPUFanHeight = 110, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120, Heat_Away_120, Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(Quadstellar_Electro_Limited_Edition);
            Case TRISTELLAR_SW = new Case() { Id = 203, Name = "TRISTELLAR SW", PartType = PartType.Case, Manufacturer = GamerStorm, Price = 500, SellPrice = 167, LevelUnlock = 30, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 320, MaxCPUFanHeight = 80, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_90 }, InherentCooling = 0 }; cases.Add(TRISTELLAR_SW);
            Case N03_MSI_Dragon_Edition = new Case() { Id = 204, Name = "303-MSI Dragon Edition", PartType = PartType.Case, Manufacturer = InWin, Price = 160, SellPrice = 53, LevelUnlock = 15, LevelPercent = 40, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 0, MaxPsuLength = 180, MaxGPULength = 350, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(N03_MSI_Dragon_Edition);
            Case N09 = new Case() { Id = 205, Name = "309", PartType = PartType.Case, Manufacturer = InWin, Price = 470, SellPrice = 157, LevelUnlock = 25, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 0, MaxPsuLength = 200, MaxGPULength = 350, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { EGO_AE120, EGO_AE120, EGO_AE120, EGO_AE120 }, InherentCooling = 0 }; cases.Add(N09);
            Case N25 = new Case() { Id = 206, Name = "925", PartType = PartType.Case, Manufacturer = InWin, Price = 500, SellPrice = 167, LevelUnlock = 32, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Full_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 512, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(N25);
            Case A1__Black_ = new Case() { Id = 207, Name = "A1 (Black)", PartType = PartType.Case, Manufacturer = InWin, Price = 200, SellPrice = 67, LevelUnlock = 6, LevelPercent = 60, Lighting = Color.RGB, CaseSize = CaseSize.Cube, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 140, MaxGPULength = 320, MaxCPUFanHeight = 160, UseForWcJobs = false, IsOpenBench = false, InherentCooling = 0 }; cases.Add(A1__Black_);
            Case A1__White_ = new Case() { Id = 208, Name = "A1 (White)", PartType = PartType.Case, Manufacturer = InWin, Price = 200, SellPrice = 67, LevelUnlock = 6, LevelPercent = 60, Lighting = Color.RGB, CaseSize = CaseSize.Cube, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 140, MaxGPULength = 320, MaxCPUFanHeight = 160, UseForWcJobs = false, IsOpenBench = false, InherentCooling = 0 }; cases.Add(A1__White_);
            Case Big_Chungus = new Case() { Id = 209, Name = "Big Chungus", PartType = PartType.Case, Manufacturer = Kolink, Price = 220, SellPrice = 73, LevelUnlock = 12, LevelPercent = 80, Lighting = null, CaseSize = CaseSize.Full_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 0, MaxPsuLength = 220, MaxGPULength = 335, MaxCPUFanHeight = 175, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_RGB_120, Heat_Away_RGB_120, Heat_Away_RGB_120, Heat_Away_RGB_120, Heat_Away_RGB_120 }, InherentCooling = 0 }; cases.Add(Big_Chungus);
            Case Ethereal = new Case() { Id = 210, Name = "Ethereal", PartType = PartType.Case, Manufacturer = Kolink, Price = 60, SellPrice = 20, LevelUnlock = 12, LevelPercent = 20, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 380, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Fan_120 }, InherentCooling = 0 }; cases.Add(Ethereal);
            Case Observatory__Black_ = new Case() { Id = 211, Name = "Observatory (Black)", PartType = PartType.Case, Manufacturer = Kolink, Price = 70, SellPrice = 23, LevelUnlock = 12, LevelPercent = 20, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 380, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_Pro_RGB_120, Heat_Away_Pro_RGB_120, Heat_Away_Pro_RGB_120, Heat_Away_Pro_RGB_120 }, InherentCooling = 0 }; cases.Add(Observatory__Black_);
            Case Observatory__White_ = new Case() { Id = 212, Name = "Observatory (White)", PartType = PartType.Case, Manufacturer = Kolink, Price = 70, SellPrice = 23, LevelUnlock = 12, LevelPercent = 20, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 380, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_Pro_RGB_120, Heat_Away_Pro_RGB_120, Heat_Away_Pro_RGB_120, Heat_Away_Pro_RGB_120 }, InherentCooling = 0 }; cases.Add(Observatory__White_);
            Case Stronghold__Black_ = new Case() { Id = 213, Name = "Stronghold (Black)", PartType = PartType.Case, Manufacturer = Kolink, Price = 45, SellPrice = 15, LevelUnlock = 12, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 380, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Fan_120, Fan_120 }, InherentCooling = 0 }; cases.Add(Stronghold__Black_);
            Case Stronghold__White_ = new Case() { Id = 214, Name = "Stronghold (White)", PartType = PartType.Case, Manufacturer = Kolink, Price = 45, SellPrice = 15, LevelUnlock = 12, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 380, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Fan_120, Fan_120 }, InherentCooling = 0 }; cases.Add(Stronghold__White_);
            Case LANCOOL_ONE_Digital__Gold_ = new Case() { Id = 215, Name = "LANCOOL ONE Digital (Gold)", PartType = PartType.Case, Manufacturer = Lian_Li, Price = 100, SellPrice = 33, LevelUnlock = 9, LevelPercent = 30, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 224, MaxGPULength = 420, MaxCPUFanHeight = 175, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(LANCOOL_ONE_Digital__Gold_);
            Case LANCOOL_ONE_Digital__White_ = new Case() { Id = 216, Name = "LANCOOL ONE Digital (White)", PartType = PartType.Case, Manufacturer = Lian_Li, Price = 100, SellPrice = 33, LevelUnlock = 9, LevelPercent = 30, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 224, MaxGPULength = 420, MaxCPUFanHeight = 175, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(LANCOOL_ONE_Digital__White_);
            Case O11D_XL_S = new Case() { Id = 217, Name = "O11D XL-S", PartType = PartType.Case, Manufacturer = Lian_Li, Price = 200, SellPrice = 67, LevelUnlock = 14, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 280, MaxGPULength = 446, MaxCPUFanHeight = 167, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(O11D_XL_S);
            Case O11D_XL_W = new Case() { Id = 218, Name = "O11D XL-W", PartType = PartType.Case, Manufacturer = Lian_Li, Price = 200, SellPrice = 67, LevelUnlock = 14, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 280, MaxGPULength = 446, MaxCPUFanHeight = 167, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(O11D_XL_W);
            Case O11D_XL_X = new Case() { Id = 219, Name = "O11D XL-X", PartType = PartType.Case, Manufacturer = Lian_Li, Price = 200, SellPrice = 67, LevelUnlock = 14, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 280, MaxGPULength = 446, MaxCPUFanHeight = 167, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(O11D_XL_X);
            Case PC_O11_Dynamic = new Case() { Id = 220, Name = "PC-O11 Dynamic", PartType = PartType.Case, Manufacturer = Lian_Li, Price = 160, SellPrice = 53, LevelUnlock = 9, LevelPercent = 60, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 0, MaxPsuLength = 210, MaxGPULength = 420, MaxCPUFanHeight = 155, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(PC_O11_Dynamic);
            Case TU150__Black___Window_ = new Case() { Id = 221, Name = "TU150 (Black + Window)", PartType = PartType.Case, Manufacturer = Lian_Li, Price = 110, SellPrice = 37, LevelUnlock = 28, LevelPercent = 65, Lighting = null, CaseSize = CaseSize.Cube, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 140, MaxGPULength = 320, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(TU150__Black___Window_);
            Case TU150__Black_ = new Case() { Id = 222, Name = "TU150 (Black)", PartType = PartType.Case, Manufacturer = Lian_Li, Price = 110, SellPrice = 37, LevelUnlock = 28, LevelPercent = 65, Lighting = null, CaseSize = CaseSize.Cube, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 140, MaxGPULength = 320, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(TU150__Black_);
            Case TU150__Silver___Window_ = new Case() { Id = 223, Name = "TU150 (Silver + Window)", PartType = PartType.Case, Manufacturer = Lian_Li, Price = 110, SellPrice = 37, LevelUnlock = 28, LevelPercent = 65, Lighting = null, CaseSize = CaseSize.Cube, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 140, MaxGPULength = 320, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(TU150__Silver___Window_);
            Case TU150__Silver_ = new Case() { Id = 224, Name = "TU150 (Silver)", PartType = PartType.Case, Manufacturer = Lian_Li, Price = 110, SellPrice = 37, LevelUnlock = 28, LevelPercent = 65, Lighting = null, CaseSize = CaseSize.Cube, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 140, MaxGPULength = 320, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(TU150__Silver_);
            Case MPG_Gungnir_100 = new Case() { Id = 225, Name = "MPG Gungnir 100", PartType = PartType.Case, Manufacturer = MSI, Price = 130, SellPrice = 43, LevelUnlock = 6, LevelPercent = 40, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 200, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { SP120_RGB_LED, Heat_Away_120, Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(MPG_Gungnir_100);
            Case MPG_Gungnir_110R = new Case() { Id = 226, Name = "MPG Gungnir 110R", PartType = PartType.Case, Manufacturer = MSI, Price = 110, SellPrice = 37, LevelUnlock = 8, LevelPercent = 80, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 180, MaxGPULength = 340, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { N20mm_ARGB__Silver_Logo_, N20mm_ARGB__Silver_Logo_, N20mm_ARGB__Silver_Logo_, N20mm_ARGB__Black_Logo_ }, InherentCooling = 0 }; cases.Add(MPG_Gungnir_110R);
            Case MPG_MAG_Vampiric_010 = new Case() { Id = 227, Name = "MPG MAG Vampiric 010", PartType = PartType.Case, Manufacturer = MSI, Price = 50, SellPrice = 17, LevelUnlock = 8, LevelPercent = 40, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 200, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(MPG_MAG_Vampiric_010);
            Case MPG_SEKIRA_500G = new Case() { Id = 228, Name = "MPG SEKIRA 500G", PartType = PartType.Case, Manufacturer = MSI, Price = 190, SellPrice = 63, LevelUnlock = 8, LevelPercent = 60, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { N20mm, N00mm, N00mm }, InherentCooling = 0 }; cases.Add(MPG_SEKIRA_500G);
            Case MPG_SEKIRA_500P = new Case() { Id = 229, Name = "MPG SEKIRA 500P", PartType = PartType.Case, Manufacturer = MSI, Price = 180, SellPrice = 60, LevelUnlock = 8, LevelPercent = 60, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { N20mm, N20mm, N20mm, N20mm }, InherentCooling = 0 }; cases.Add(MPG_SEKIRA_500P);
            Case MPG_SEKIRA_500X = new Case() { Id = 230, Name = "MPG SEKIRA 500X", PartType = PartType.Case, Manufacturer = MSI, Price = 220, SellPrice = 73, LevelUnlock = 8, LevelPercent = 60, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { N20mm_RGB, MAG_MAX_F20A_1, MAG_MAX_F20A_1, MAG_MAX_F20A_1, N00mm }, InherentCooling = 0 }; cases.Add(MPG_SEKIRA_500X);
            Case H200__Black___Blue_ = new Case() { Id = 231, Name = "H200 (Black + Blue)", PartType = PartType.Case, Manufacturer = NZXT, Price = 90, SellPrice = 30, LevelUnlock = 29, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { ATX, SFX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 311, MaxGPULength = 325, MaxCPUFanHeight = 165, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H200__Black___Blue_);
            Case H200__Black___Red_ = new Case() { Id = 232, Name = "H200 (Black + Red)", PartType = PartType.Case, Manufacturer = NZXT, Price = 90, SellPrice = 30, LevelUnlock = 29, LevelPercent = 60, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { ATX, SFX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 311, MaxGPULength = 325, MaxCPUFanHeight = 165, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H200__Black___Red_);
            Case H200__Black_ = new Case() { Id = 233, Name = "H200 (Black)", PartType = PartType.Case, Manufacturer = NZXT, Price = 90, SellPrice = 30, LevelUnlock = 29, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { ATX, SFX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 311, MaxGPULength = 325, MaxCPUFanHeight = 165, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H200__Black_);
            Case H200__White_ = new Case() { Id = 234, Name = "H200 (White)", PartType = PartType.Case, Manufacturer = NZXT, Price = 90, SellPrice = 30, LevelUnlock = 29, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { ATX, SFX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 311, MaxGPULength = 325, MaxCPUFanHeight = 165, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H200__White_);
            Case H210i__Black___Red_ = new Case() { Id = 235, Name = "H210i (Black + Red)", PartType = PartType.Case, Manufacturer = NZXT, Price = 120, SellPrice = 40, LevelUnlock = 20, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 311, MaxGPULength = 325, MaxCPUFanHeight = 165, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H210i__Black___Red_);
            Case H210i__Black___White_ = new Case() { Id = 236, Name = "H210i (Black + White)", PartType = PartType.Case, Manufacturer = NZXT, Price = 120, SellPrice = 40, LevelUnlock = 20, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 311, MaxGPULength = 325, MaxCPUFanHeight = 165, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H210i__Black___White_);
            Case H210i__Black_ = new Case() { Id = 237, Name = "H210i (Black)", PartType = PartType.Case, Manufacturer = NZXT, Price = 120, SellPrice = 40, LevelUnlock = 20, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 311, MaxGPULength = 325, MaxCPUFanHeight = 165, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H210i__Black_);
            Case H400__Black___Blue_ = new Case() { Id = 238, Name = "H400 (Black + Blue)", PartType = PartType.Case, Manufacturer = NZXT, Price = 110, SellPrice = 37, LevelUnlock = 29, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 411, MaxCPUFanHeight = 164, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H400__Black___Blue_);
            Case H400__Black___Red_ = new Case() { Id = 239, Name = "H400 (Black + Red)", PartType = PartType.Case, Manufacturer = NZXT, Price = 110, SellPrice = 37, LevelUnlock = 29, LevelPercent = 60, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 411, MaxCPUFanHeight = 164, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H400__Black___Red_);
            Case H400__Black_ = new Case() { Id = 240, Name = "H400 (Black)", PartType = PartType.Case, Manufacturer = NZXT, Price = 110, SellPrice = 37, LevelUnlock = 29, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 411, MaxCPUFanHeight = 164, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H400__Black_);
            Case H400__White_ = new Case() { Id = 241, Name = "H400 (White)", PartType = PartType.Case, Manufacturer = NZXT, Price = 110, SellPrice = 37, LevelUnlock = 29, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 411, MaxCPUFanHeight = 164, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H400__White_);
            Case H440___Designed_by_Razer = new Case() { Id = 242, Name = "H440 - Designed by Razer", PartType = PartType.Case, Manufacturer = NZXT, Price = 200, SellPrice = 67, LevelUnlock = 11, LevelPercent = 60, Lighting = Color.Green, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 406, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120, Heat_Away_120, Heat_Away_140 }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(H440___Designed_by_Razer);
            Case H440__Black___Blue_ = new Case() { Id = 243, Name = "H440 (Black + Blue)", PartType = PartType.Case, Manufacturer = NZXT, Price = 120, SellPrice = 40, LevelUnlock = 10, LevelPercent = 20, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 428, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_120, Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(H440__Black___Blue_);
            Case H440__Black___Green_ = new Case() { Id = 244, Name = "H440 (Black + Green)", PartType = PartType.Case, Manufacturer = NZXT, Price = 120, SellPrice = 40, LevelUnlock = 10, LevelPercent = 80, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 428, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_120, Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(H440__Black___Green_);
            Case H440__Black___Orange_ = new Case() { Id = 245, Name = "H440 (Black + Orange)", PartType = PartType.Case, Manufacturer = NZXT, Price = 120, SellPrice = 40, LevelUnlock = 10, LevelPercent = 60, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 428, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_120, Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(H440__Black___Orange_);
            Case H440__Black___Red_ = new Case() { Id = 246, Name = "H440 (Black + Red)", PartType = PartType.Case, Manufacturer = NZXT, Price = 120, SellPrice = 40, LevelUnlock = 10, LevelPercent = 40, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 428, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_120, Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(H440__Black___Red_);
            Case H440__Black_ = new Case() { Id = 247, Name = "H440 (Black)", PartType = PartType.Case, Manufacturer = NZXT, Price = 120, SellPrice = 40, LevelUnlock = 10, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 428, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_120, Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(H440__Black_);
            Case H440__PC_Building_Simulator_Limited_Edition_ = new Case() { Id = 248, Name = "H440 (PC Building Simulator Limited Edition)", PartType = PartType.Case, Manufacturer = NZXT, Price = 180, SellPrice = 60, LevelUnlock = 11, LevelPercent = 90, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 428, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_120, Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(H440__PC_Building_Simulator_Limited_Edition_);
            Case H440__White___Purple_ = new Case() { Id = 249, Name = "H440 (White + Purple)", PartType = PartType.Case, Manufacturer = NZXT, Price = 120, SellPrice = 40, LevelUnlock = 11, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 428, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_120, Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(H440__White___Purple_);
            Case H440__White_ = new Case() { Id = 250, Name = "H440 (White)", PartType = PartType.Case, Manufacturer = NZXT, Price = 120, SellPrice = 40, LevelUnlock = 10, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 428, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_120, Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(H440__White_);
            Case H440_Hyper_Beast = new Case() { Id = 251, Name = "H440 Hyper Beast", PartType = PartType.Case, Manufacturer = NZXT, Price = 200, SellPrice = 67, LevelUnlock = 11, LevelPercent = 30, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 428, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_120, Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(H440_Hyper_Beast);
            Case H500___Re_Animator = new Case() { Id = 252, Name = "H500 - Re-Animator", PartType = PartType.Case, Manufacturer = NZXT, Price = 200, SellPrice = 67, LevelUnlock = 26, LevelPercent = 90, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 381, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H500___Re_Animator);
            Case H500___Split = new Case() { Id = 253, Name = "H500 - Split", PartType = PartType.Case, Manufacturer = NZXT, Price = 200, SellPrice = 67, LevelUnlock = 26, LevelPercent = 90, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 381, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H500___Split);
            Case H500__Black___Blue_ = new Case() { Id = 254, Name = "H500 (Black + Blue)", PartType = PartType.Case, Manufacturer = NZXT, Price = 100, SellPrice = 33, LevelUnlock = 26, LevelPercent = 80, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 381, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H500__Black___Blue_);
            Case H500__Black___Red_ = new Case() { Id = 255, Name = "H500 (Black + Red)", PartType = PartType.Case, Manufacturer = NZXT, Price = 100, SellPrice = 33, LevelUnlock = 26, LevelPercent = 60, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 381, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H500__Black___Red_);
            Case H500__Black_ = new Case() { Id = 256, Name = "H500 (Black)", PartType = PartType.Case, Manufacturer = NZXT, Price = 100, SellPrice = 33, LevelUnlock = 26, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 381, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H500__Black_);
            Case H500__White_ = new Case() { Id = 257, Name = "H500 (White)", PartType = PartType.Case, Manufacturer = NZXT, Price = 100, SellPrice = 33, LevelUnlock = 26, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 381, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H500__White_);
            Case H510_Elite__Black___White_ = new Case() { Id = 258, Name = "H510 Elite (Black + White)", PartType = PartType.Case, Manufacturer = NZXT, Price = 170, SellPrice = 57, LevelUnlock = 20, LevelPercent = 25, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 311, MaxGPULength = 368, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_140mm__Black_, Aer_P_140mm__White_, Aer_P_140mm__White_ }, InherentCooling = 0 }; cases.Add(H510_Elite__Black___White_);
            Case H510_Elite__Black_ = new Case() { Id = 259, Name = "H510 Elite (Black)", PartType = PartType.Case, Manufacturer = NZXT, Price = 170, SellPrice = 57, LevelUnlock = 20, LevelPercent = 25, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 311, MaxGPULength = 368, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_140mm__Black_, Aer_P_140mm__White_, Aer_P_140mm__White_ }, InherentCooling = 0 }; cases.Add(H510_Elite__Black_);
            Case H510i__Black___Red_ = new Case() { Id = 260, Name = "H510i (Black + Red)", PartType = PartType.Case, Manufacturer = NZXT, Price = 110, SellPrice = 37, LevelUnlock = 20, LevelPercent = 50, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 311, MaxGPULength = 368, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H510i__Black___Red_);
            Case H510i__Black___White_ = new Case() { Id = 261, Name = "H510i (Black + White)", PartType = PartType.Case, Manufacturer = NZXT, Price = 110, SellPrice = 37, LevelUnlock = 20, LevelPercent = 50, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 311, MaxGPULength = 368, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H510i__Black___White_);
            Case H510i__Black_ = new Case() { Id = 262, Name = "H510i (Black)", PartType = PartType.Case, Manufacturer = NZXT, Price = 110, SellPrice = 37, LevelUnlock = 20, LevelPercent = 50, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 311, MaxGPULength = 368, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H510i__Black_);
            Case H700i___Bush_Flight_Simulator = new Case() { Id = 263, Name = "H700i - Bush Flight Simulator", PartType = PartType.Case, Manufacturer = NZXT, Price = 300, SellPrice = 100, LevelUnlock = 27, LevelPercent = 90, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 413, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_140mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H700i___Bush_Flight_Simulator);
            Case H700i___Extinction_Wars = new Case() { Id = 264, Name = "H700i - Extinction Wars", PartType = PartType.Case, Manufacturer = NZXT, Price = 300, SellPrice = 100, LevelUnlock = 27, LevelPercent = 90, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 413, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_140mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H700i___Extinction_Wars);
            Case H700i___Galaxy_Edition = new Case() { Id = 265, Name = "H700i - Galaxy Edition", PartType = PartType.Case, Manufacturer = NZXT, Price = 200, SellPrice = 67, LevelUnlock = 27, LevelPercent = 90, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 413, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_140mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H700i___Galaxy_Edition);
            Case H700i___Good_Company = new Case() { Id = 266, Name = "H700i - Good Company", PartType = PartType.Case, Manufacturer = NZXT, Price = 300, SellPrice = 100, LevelUnlock = 27, LevelPercent = 90, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 413, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_140mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H700i___Good_Company);
            Case H700i___Organ_Collector = new Case() { Id = 267, Name = "H700i - Organ Collector", PartType = PartType.Case, Manufacturer = NZXT, Price = 300, SellPrice = 100, LevelUnlock = 27, LevelPercent = 90, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 413, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_140mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H700i___Organ_Collector);
            Case H700i__Black___Blue_ = new Case() { Id = 268, Name = "H700i (Black + Blue)", PartType = PartType.Case, Manufacturer = NZXT, Price = 200, SellPrice = 67, LevelUnlock = 27, LevelPercent = 80, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 413, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_140mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H700i__Black___Blue_);
            Case H700i__Black___Red_ = new Case() { Id = 269, Name = "H700i (Black + Red)", PartType = PartType.Case, Manufacturer = NZXT, Price = 200, SellPrice = 67, LevelUnlock = 27, LevelPercent = 60, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 413, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_140mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H700i__Black___Red_);
            Case H700i__Black_ = new Case() { Id = 270, Name = "H700i (Black)", PartType = PartType.Case, Manufacturer = NZXT, Price = 200, SellPrice = 67, LevelUnlock = 27, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 413, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_140mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H700i__Black_);
            Case H700i__White_ = new Case() { Id = 271, Name = "H700i (White)", PartType = PartType.Case, Manufacturer = NZXT, Price = 200, SellPrice = 67, LevelUnlock = 27, LevelPercent = 30, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 413, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_140mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H700i__White_);
            Case H710i__Black___Red_ = new Case() { Id = 272, Name = "H710i (Black + Red)", PartType = PartType.Case, Manufacturer = NZXT, Price = 235, SellPrice = 78, LevelUnlock = 20, LevelPercent = 75, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 413, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_140mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H710i__Black___Red_);
            Case H710i__Black_ = new Case() { Id = 273, Name = "H710i (Black)", PartType = PartType.Case, Manufacturer = NZXT, Price = 235, SellPrice = 78, LevelUnlock = 20, LevelPercent = 75, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 413, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_140mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H710i__Black_);
            Case H710i__White_ = new Case() { Id = 274, Name = "H710i (White)", PartType = PartType.Case, Manufacturer = NZXT, Price = 235, SellPrice = 78, LevelUnlock = 20, LevelPercent = 75, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 413, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Aer_P_140mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H710i__White_);
            Case S340___Designed_by_Razer = new Case() { Id = 275, Name = "S340 - Designed by Razer", PartType = PartType.Case, Manufacturer = NZXT, Price = 200, SellPrice = 67, LevelUnlock = 6, LevelPercent = 60, Lighting = Color.Green, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 364, MaxCPUFanHeight = 161, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 334, InherentCooling = 0 }; cases.Add(S340___Designed_by_Razer);
            Case S340__Black___Blue_ = new Case() { Id = 276, Name = "S340 (Black + Blue)", PartType = PartType.Case, Manufacturer = NZXT, Price = 80, SellPrice = 27, LevelUnlock = 5, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 364, MaxCPUFanHeight = 161, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 334, InherentCooling = 0 }; cases.Add(S340__Black___Blue_);
            Case S340__Black___Red_ = new Case() { Id = 277, Name = "S340 (Black + Red)", PartType = PartType.Case, Manufacturer = NZXT, Price = 80, SellPrice = 27, LevelUnlock = 5, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 364, MaxCPUFanHeight = 161, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 334, InherentCooling = 0 }; cases.Add(S340__Black___Red_);
            Case S340__Black_ = new Case() { Id = 278, Name = "S340 (Black)", PartType = PartType.Case, Manufacturer = NZXT, Price = 80, SellPrice = 27, LevelUnlock = 5, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 364, MaxCPUFanHeight = 161, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 334, InherentCooling = 0 }; cases.Add(S340__Black_);
            Case S340__White___Purple_ = new Case() { Id = 279, Name = "S340 (White + Purple)", PartType = PartType.Case, Manufacturer = NZXT, Price = 80, SellPrice = 27, LevelUnlock = 6, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 364, MaxCPUFanHeight = 161, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 334, InherentCooling = 0 }; cases.Add(S340__White___Purple_);
            Case S340__White_ = new Case() { Id = 280, Name = "S340 (White)", PartType = PartType.Case, Manufacturer = NZXT, Price = 80, SellPrice = 27, LevelUnlock = 5, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 364, MaxCPUFanHeight = 161, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 334, InherentCooling = 0 }; cases.Add(S340__White_);
            Case S340_Elite__Black___Blue_ = new Case() { Id = 281, Name = "S340 Elite (Black + Blue)", PartType = PartType.Case, Manufacturer = NZXT, Price = 100, SellPrice = 33, LevelUnlock = 7, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 364, MaxCPUFanHeight = 161, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 334, InherentCooling = 0 }; cases.Add(S340_Elite__Black___Blue_);
            Case S340_Elite__Black___Red_ = new Case() { Id = 282, Name = "S340 Elite (Black + Red)", PartType = PartType.Case, Manufacturer = NZXT, Price = 100, SellPrice = 33, LevelUnlock = 7, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 364, MaxCPUFanHeight = 161, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 334, InherentCooling = 0 }; cases.Add(S340_Elite__Black___Red_);
            Case S340_Elite__Black_ = new Case() { Id = 283, Name = "S340 Elite (Black)", PartType = PartType.Case, Manufacturer = NZXT, Price = 100, SellPrice = 33, LevelUnlock = 7, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 364, MaxCPUFanHeight = 161, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 334, InherentCooling = 0 }; cases.Add(S340_Elite__Black_);
            Case S340_Elite__White_ = new Case() { Id = 284, Name = "S340 Elite (White)", PartType = PartType.Case, Manufacturer = NZXT, Price = 100, SellPrice = 33, LevelUnlock = 7, LevelPercent = 60, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 364, MaxCPUFanHeight = 161, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 334, InherentCooling = 0 }; cases.Add(S340_Elite__White_);
            Case S340_Elite_Hyper_Beast = new Case() { Id = 285, Name = "S340 Elite Hyper Beast", PartType = PartType.Case, Manufacturer = NZXT, Price = 200, SellPrice = 67, LevelUnlock = 7, LevelPercent = 80, Lighting = Color.Blue, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 364, MaxCPUFanHeight = 161, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 334, InherentCooling = 0 }; cases.Add(S340_Elite_Hyper_Beast);
            Case OBT_BC1__Black_ = new Case() { Id = 286, Name = "OBT-BC1 (Black)", PartType = PartType.Case, Manufacturer = Open_Benchtable, Price = 199, SellPrice = 66, LevelUnlock = 9, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Open_Frame, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 500, MaxCPUFanHeight = 200, UseForWcJobs = false, IsOpenBench = true, InherentCooling = 0.7 }; cases.Add(OBT_BC1__Black_);
            Case OBT_BC1__Red_ = new Case() { Id = 287, Name = "OBT-BC1 (Red)", PartType = PartType.Case, Manufacturer = Open_Benchtable, Price = 199, SellPrice = 66, LevelUnlock = 9, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Open_Frame, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 500, MaxCPUFanHeight = 200, UseForWcJobs = false, IsOpenBench = true, InherentCooling = 0.7 }; cases.Add(OBT_BC1__Red_);
            Case OBT_BC1__Silver_ = new Case() { Id = 288, Name = "OBT-BC1 (Silver)", PartType = PartType.Case, Manufacturer = Open_Benchtable, Price = 189, SellPrice = 63, LevelUnlock = 9, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Open_Frame, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 500, MaxCPUFanHeight = 200, UseForWcJobs = false, IsOpenBench = true, InherentCooling = 0.7 }; cases.Add(OBT_BC1__Silver_);
            Case Asterion_Plus = new Case() { Id = 289, Name = "Asterion Plus", PartType = PartType.Case, Manufacturer = Raijintek, Price = 140, SellPrice = 47, LevelUnlock = 1, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 340, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(Asterion_Plus);
            Case COEUS_ELITE_TC = new Case() { Id = 290, Name = "COEUS ELITE TC", PartType = PartType.Case, Manufacturer = Raijintek, Price = 180, SellPrice = 60, LevelUnlock = 30, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 350, MaxCPUFanHeight = 175, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { IRIS_12, IRIS_12, IRIS_12 }, InherentCooling = 0 }; cases.Add(COEUS_ELITE_TC);
            Case COEUS_EVO_TC = new Case() { Id = 291, Name = "COEUS EVO TC", PartType = PartType.Case, Manufacturer = Raijintek, Price = 200, SellPrice = 67, LevelUnlock = 30, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 350, MaxCPUFanHeight = 175, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { IRIS_12, IRIS_12, IRIS_12, IRIS_12 }, InherentCooling = 0 }; cases.Add(COEUS_EVO_TC);
            Case ENYO = new Case() { Id = 292, Name = "ENYO", PartType = PartType.Case, Manufacturer = Raijintek, Price = 500, SellPrice = 167, LevelUnlock = 30, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Super_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 3, MaxPsuLength = 280, MaxGPULength = 615, MaxCPUFanHeight = 188, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0.5 }; cases.Add(ENYO);
            Case ERIS_EVO = new Case() { Id = 293, Name = "ERIS EVO", PartType = PartType.Case, Manufacturer = Raijintek, Price = 400, SellPrice = 133, LevelUnlock = 30, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Full_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 512, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(ERIS_EVO);
            Case METIS__Black_ = new Case() { Id = 294, Name = "METIS (Black)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 80, SellPrice = 27, LevelUnlock = 18, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 170, MaxCPUFanHeight = 160, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(METIS__Black_);
            Case METIS__Blue_ = new Case() { Id = 295, Name = "METIS (Blue)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 80, SellPrice = 27, LevelUnlock = 18, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 170, MaxCPUFanHeight = 160, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(METIS__Blue_);
            Case METIS__Gold_ = new Case() { Id = 296, Name = "METIS (Gold)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 80, SellPrice = 27, LevelUnlock = 18, LevelPercent = 60, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 170, MaxCPUFanHeight = 160, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(METIS__Gold_);
            Case METIS__Green_ = new Case() { Id = 297, Name = "METIS (Green)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 80, SellPrice = 27, LevelUnlock = 18, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 170, MaxCPUFanHeight = 160, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(METIS__Green_);
            Case METIS__Red_ = new Case() { Id = 298, Name = "METIS (Red)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 80, SellPrice = 27, LevelUnlock = 18, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 170, MaxCPUFanHeight = 160, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(METIS__Red_);
            Case METIS__Silver_ = new Case() { Id = 299, Name = "METIS (Silver)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 80, SellPrice = 27, LevelUnlock = 18, LevelPercent = 60, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 170, MaxCPUFanHeight = 160, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(METIS__Silver_);
            Case METIS__White_ = new Case() { Id = 300, Name = "METIS (White)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 80, SellPrice = 27, LevelUnlock = 18, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 170, MaxCPUFanHeight = 160, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(METIS__White_);
            Case NYX_PRO__Red_ = new Case() { Id = 301, Name = "NYX PRO (Red)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 350, SellPrice = 117, LevelUnlock = 30, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Full_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 420, MaxCPUFanHeight = 83, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(NYX_PRO__Red_);
            Case NYX_PRO__Titan_ = new Case() { Id = 302, Name = "NYX PRO (Titan)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 350, SellPrice = 117, LevelUnlock = 30, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Full_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 420, MaxCPUFanHeight = 83, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(NYX_PRO__Titan_);
            Case NYX_PRO__White_ = new Case() { Id = 303, Name = "NYX PRO (White)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 350, SellPrice = 117, LevelUnlock = 30, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Full_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 420, MaxCPUFanHeight = 83, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(NYX_PRO__White_);
            Case NYX_PRO__Yellow_ = new Case() { Id = 304, Name = "NYX PRO (Yellow)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 350, SellPrice = 117, LevelUnlock = 30, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Full_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 420, MaxCPUFanHeight = 83, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(NYX_PRO__Yellow_);
            Case OPHION = new Case() { Id = 305, Name = "OPHION", PartType = PartType.Case, Manufacturer = Raijintek, Price = 180, SellPrice = 60, LevelUnlock = 28, LevelPercent = 80, Lighting = null, CaseSize = CaseSize.Cube, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 0, Number140mmSlots = 0, MaxPsuLength = 140, MaxGPULength = 330, MaxCPUFanHeight = 90, UseForWcJobs = false, IsOpenBench = false, InherentCooling = 0 }; cases.Add(OPHION);
            Case OPHION_EVO = new Case() { Id = 306, Name = "OPHION EVO", PartType = PartType.Case, Manufacturer = Raijintek, Price = 200, SellPrice = 67, LevelUnlock = 28, LevelPercent = 80, Lighting = null, CaseSize = CaseSize.Cube, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 140, MaxGPULength = 330, MaxCPUFanHeight = 90, UseForWcJobs = false, IsOpenBench = false, InherentCooling = 0 }; cases.Add(OPHION_EVO);
            Case PAEAN = new Case() { Id = 307, Name = "PAEAN", PartType = PartType.Case, Manufacturer = Raijintek, Price = 250, SellPrice = 83, LevelUnlock = 14, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Open_Frame, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 400, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0.5 }; cases.Add(PAEAN);
            Case PAEAN_M = new Case() { Id = 308, Name = "PAEAN M", PartType = PartType.Case, Manufacturer = Raijintek, Price = 130, SellPrice = 43, LevelUnlock = 28, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Open_Frame, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 430, MaxCPUFanHeight = 140, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0.5 }; cases.Add(PAEAN_M);
            Case SILENOS = new Case() { Id = 309, Name = "SILENOS", PartType = PartType.Case, Manufacturer = Raijintek, Price = 125, SellPrice = 42, LevelUnlock = 18, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Full_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 330, MaxCPUFanHeight = 166, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(SILENOS);
            Case STYX__Black_ = new Case() { Id = 310, Name = "STYX (Black)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 105, SellPrice = 35, LevelUnlock = 30, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 280, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(STYX__Black_);
            Case STYX__Blue_ = new Case() { Id = 311, Name = "STYX (Blue)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 105, SellPrice = 35, LevelUnlock = 30, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 280, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(STYX__Blue_);
            Case STYX__Gold_ = new Case() { Id = 312, Name = "STYX (Gold)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 105, SellPrice = 35, LevelUnlock = 30, LevelPercent = 60, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 280, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(STYX__Gold_);
            Case STYX__Green_ = new Case() { Id = 313, Name = "STYX (Green)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 105, SellPrice = 35, LevelUnlock = 30, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 280, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(STYX__Green_);
            Case STYX__Red_ = new Case() { Id = 314, Name = "STYX (Red)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 105, SellPrice = 35, LevelUnlock = 30, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 280, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(STYX__Red_);
            Case STYX__Silver_ = new Case() { Id = 315, Name = "STYX (Silver)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 105, SellPrice = 35, LevelUnlock = 30, LevelPercent = 60, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 280, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(STYX__Silver_);
            Case STYX__White_ = new Case() { Id = 316, Name = "STYX (White)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 105, SellPrice = 35, LevelUnlock = 30, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 280, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(STYX__White_);
            Case Thetis = new Case() { Id = 317, Name = "Thetis", PartType = PartType.Case, Manufacturer = Raijintek, Price = 80, SellPrice = 27, LevelUnlock = 4, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Cube, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 280, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(Thetis);
            Case ZOFOS_EVO = new Case() { Id = 318, Name = "ZOFOS EVO", PartType = PartType.Case, Manufacturer = Raijintek, Price = 180, SellPrice = 60, LevelUnlock = 29, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Full_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 470, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { IRIS_12, Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(ZOFOS_EVO);
            Case CS381 = new Case() { Id = 319, Name = "CS381", PartType = PartType.Case, Manufacturer = SilverStone, Price = 350, SellPrice = 117, LevelUnlock = 28, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, SupportedPSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 250, MaxGPULength = 267, MaxCPUFanHeight = 60, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(CS381);
            Case FARA_B1 = new Case() { Id = 320, Name = "FARA B1", PartType = PartType.Case, Manufacturer = SilverStone, Price = 60, SellPrice = 20, LevelUnlock = 28, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 322, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(FARA_B1);
            Case FT05__Black_ = new Case() { Id = 321, Name = "FT05 (Black)", PartType = PartType.Case, Manufacturer = SilverStone, Price = 160, SellPrice = 53, LevelUnlock = 8, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 312, MaxCPUFanHeight = 162, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { AP182__Black_, AP182__Black_ }, InherentCooling = 0 }; cases.Add(FT05__Black_);
            Case FT05__White_ = new Case() { Id = 322, Name = "FT05 (White)", PartType = PartType.Case, Manufacturer = SilverStone, Price = 160, SellPrice = 53, LevelUnlock = 8, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 312, MaxCPUFanHeight = 162, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { AP182__Black_, AP182__Black_ }, InherentCooling = 0 }; cases.Add(FT05__White_);
            Case LD01 = new Case() { Id = 323, Name = "LD01", PartType = PartType.Case, Manufacturer = SilverStone, Price = 115, SellPrice = 38, LevelUnlock = 14, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 220, MaxGPULength = 370, MaxCPUFanHeight = 168, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(LD01);
            Case LD03 = new Case() { Id = 324, Name = "LD03", PartType = PartType.Case, Manufacturer = SilverStone, Price = 90, SellPrice = 30, LevelUnlock = 10, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 130, MaxGPULength = 309, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(LD03);
            Case PM01_RGB__Black_ = new Case() { Id = 325, Name = "PM01-RGB (Black)", PartType = PartType.Case, Manufacturer = SilverStone, Price = 160, SellPrice = 53, LevelUnlock = 12, LevelPercent = 65, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 240, MaxGPULength = 419, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_140, Heat_Away_140, Heat_Away_140 }, InherentCooling = 0 }; cases.Add(PM01_RGB__Black_);
            Case PM01_RGB__White_ = new Case() { Id = 326, Name = "PM01-RGB (White)", PartType = PartType.Case, Manufacturer = SilverStone, Price = 160, SellPrice = 53, LevelUnlock = 12, LevelPercent = 65, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 240, MaxGPULength = 419, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_140, Heat_Away_140, Heat_Away_140 }, InherentCooling = 0 }; cases.Add(PM01_RGB__White_);
            Case PS14__Black___Window_ = new Case() { Id = 327, Name = "PS14 (Black + Window)", PartType = PartType.Case, Manufacturer = SilverStone, Price = 40, SellPrice = 13, LevelUnlock = 1, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 220, MaxGPULength = 401, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(PS14__Black___Window_);
            Case PS14__Black_ = new Case() { Id = 328, Name = "PS14 (Black)", PartType = PartType.Case, Manufacturer = SilverStone, Price = 40, SellPrice = 13, LevelUnlock = 1, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 220, MaxGPULength = 401, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(PS14__Black_);
            Case RL07__Black_ = new Case() { Id = 329, Name = "RL07 (Black)", PartType = PartType.Case, Manufacturer = SilverStone, Price = 300, SellPrice = 100, LevelUnlock = 16, LevelPercent = 60, Lighting = Color.Red, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 190, MaxGPULength = 415, MaxCPUFanHeight = 167, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(RL07__Black_);
            Case RL08__Red_ = new Case() { Id = 330, Name = "RL08 (Red)", PartType = PartType.Case, Manufacturer = SilverStone, Price = 120, SellPrice = 40, LevelUnlock = 10, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 220, MaxGPULength = 370, MaxCPUFanHeight = 168, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_RGB_120, Heat_Away_RGB_120 }, InherentCooling = 0 }; cases.Add(RL08__Red_);
            Case RL08__White_ = new Case() { Id = 331, Name = "RL08 (White)", PartType = PartType.Case, Manufacturer = SilverStone, Price = 120, SellPrice = 40, LevelUnlock = 10, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 220, MaxGPULength = 370, MaxCPUFanHeight = 168, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_RGB_120, Heat_Away_RGB_120 }, InherentCooling = 0 }; cases.Add(RL08__White_);
            Case RVX01__Blue_ = new Case() { Id = 332, Name = "RVX01 (Blue)", PartType = PartType.Case, Manufacturer = SilverStone, Price = 80, SellPrice = 27, LevelUnlock = 9, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 180, MaxGPULength = 347, MaxCPUFanHeight = 153, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(RVX01__Blue_);
            Case RVX01__Green_ = new Case() { Id = 333, Name = "RVX01 (Green)", PartType = PartType.Case, Manufacturer = SilverStone, Price = 80, SellPrice = 27, LevelUnlock = 9, LevelPercent = 60, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 180, MaxGPULength = 347, MaxCPUFanHeight = 153, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(RVX01__Green_);
            Case RVX01__Red_ = new Case() { Id = 334, Name = "RVX01 (Red)", PartType = PartType.Case, Manufacturer = SilverStone, Price = 80, SellPrice = 27, LevelUnlock = 9, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 180, MaxGPULength = 347, MaxCPUFanHeight = 153, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(RVX01__Red_);
            Case RVZ03__Black_ = new Case() { Id = 335, Name = "RVZ03 (Black)", PartType = PartType.Case, Manufacturer = SilverStone, Price = 135, SellPrice = 45, LevelUnlock = 18, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 0, Number140mmSlots = 0, MaxPsuLength = 140, MaxGPULength = 330, MaxCPUFanHeight = 60, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(RVZ03__Black_);
            Case RVZ03__White_ = new Case() { Id = 336, Name = "RVZ03 (White)", PartType = PartType.Case, Manufacturer = SilverStone, Price = 135, SellPrice = 45, LevelUnlock = 18, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Micro, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 0, Number140mmSlots = 0, MaxPsuLength = 140, MaxGPULength = 330, MaxCPUFanHeight = 60, UseForWcJobs = false, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(RVZ03__White_);
            Case Core_P5 = new Case() { Id = 337, Name = "Core P5", PartType = PartType.Case, Manufacturer = Thermaltake, Price = 200, SellPrice = 67, LevelUnlock = 26, LevelPercent = 32, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 3, MaxPsuLength = 200, MaxGPULength = 300, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(Core_P5);
            Case Core_P5_Green_Edition = new Case() { Id = 338, Name = "Core P5 Green Edition", PartType = PartType.Case, Manufacturer = Thermaltake, Price = 200, SellPrice = 67, LevelUnlock = 26, LevelPercent = 32, Lighting = null, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 3, MaxPsuLength = 200, MaxGPULength = 300, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(Core_P5_Green_Edition);
            Case View_37_RGB = new Case() { Id = 339, Name = "View 37 RGB", PartType = PartType.Case, Manufacturer = Thermaltake, Price = 150, SellPrice = 50, LevelUnlock = 24, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 220, MaxGPULength = 410, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Riing_Plus_14_LED_RGB, Riing_Plus_14_LED_RGB, Riing_Plus_14_LED_RGB }, InherentCooling = 0 }; cases.Add(View_37_RGB);
            Case View_91_RGB = new Case() { Id = 340, Name = "View 91 RGB", PartType = PartType.Case, Manufacturer = Thermaltake, Price = 450, SellPrice = 150, LevelUnlock = 30, LevelPercent = 10, Lighting = Color.RGB, CaseSize = CaseSize.Super_Tower, SupportedMoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX }, SupportedPSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 4, MaxPsuLength = 220, MaxGPULength = 470, MaxCPUFanHeight = 200, UseForWcJobs = true, IsOpenBench = false, IncludedCaseFans = new List<CaseFan>() { Riing_Plus_14_LED_RGB, Riing_Plus_14_LED_RGB, Riing_Plus_14_LED_RGB, Riing_Plus_14_LED_RGB }, InherentCooling = 0 }; cases.Add(View_91_RGB);
            #endregion
            if (!_context.Case.Any())
            {
                _context.Case.AddRange(cases);
            }
            _context.SaveChanges();
        }
    }
}
