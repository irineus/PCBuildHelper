using PCBuildWeb.Data;
using PCBuildWeb.Models.Entities.Parts;
using PCBuildWeb.Models.Entities.Properties;
using PCBuildWeb.Models.Enums;

namespace PCBuildWeb.Services.Seeding
{
    public class SeedingService
    {
        private readonly PCBuildWebContext _context;

        public SeedingService(PCBuildWebContext context)
        {
            _context = context;
        }

        public void Seed()
        {
            #region Remove Current Data
            _context.WC_Reservoir.RemoveRange(_context.WC_Reservoir);
            _context.WC_Radiator.RemoveRange(_context.WC_Radiator);
            _context.WC_CPU_Block.RemoveRange(_context.WC_CPU_Block);
            _context.Storage.RemoveRange(_context.Storage);
            _context.PSU.RemoveRange(_context.PSU);
            _context.Motherboard.RemoveRange(_context.Motherboard);
            _context.Memory.RemoveRange(_context.Memory);
            _context.GPU.RemoveRange(_context.GPU);
            _context.CPUCooler.RemoveRange(_context.CPUCooler);
            _context.CPU.RemoveRange(_context.CPU);
            _context.CaseFan.RemoveRange(_context.CaseFan);
            _context.Case.RemoveRange(_context.Case);
            _context.PSUSize.RemoveRange(_context.PSUSize);
            _context.PowerConnector.RemoveRange(_context.PowerConnector);
            _context.MultiGPU.RemoveRange(_context.MultiGPU);
            _context.MoboSize.RemoveRange(_context.MoboSize);
            _context.MoboChipset.RemoveRange(_context.MoboChipset);
            _context.Manufacturer.RemoveRange(_context.Manufacturer);
            _context.GPUChipset.RemoveRange(_context.GPUChipset);
            _context.GPUChipsetSeries.RemoveRange(_context.GPUChipsetSeries);
            _context.CPUSocket.RemoveRange(_context.CPUSocket);
            _context.CPUSeries.RemoveRange(_context.CPUSeries);
            #endregion
            _context.SaveChanges();
            #region CPUSeries Seed
            List<CPUSeries> cpuSeriesList = new List<CPUSeries>();
            CPUSeries AMD_Ryzen_3 = new CPUSeries() { Id = 1, Name = "AMD Ryzen 3" }; cpuSeriesList.Add(AMD_Ryzen_3);
            CPUSeries AMD_Ryzen_5 = new CPUSeries() { Id = 2, Name = "AMD Ryzen 5" }; cpuSeriesList.Add(AMD_Ryzen_5);
            CPUSeries AMD_Ryzen_7 = new CPUSeries() { Id = 3, Name = "AMD Ryzen 7" }; cpuSeriesList.Add(AMD_Ryzen_7);
            CPUSeries AMD_Ryzen_9 = new CPUSeries() { Id = 4, Name = "AMD Ryzen 9" }; cpuSeriesList.Add(AMD_Ryzen_9);
            CPUSeries AMD_Ryzen_Threadripper = new CPUSeries() { Id = 5, Name = "AMD Ryzen Threadripper" }; cpuSeriesList.Add(AMD_Ryzen_Threadripper);
            CPUSeries Intel_Celeron = new CPUSeries() { Id = 6, Name = "Intel Celeron" }; cpuSeriesList.Add(Intel_Celeron);
            CPUSeries Intel_Core_i3 = new CPUSeries() { Id = 7, Name = "Intel Core i3" }; cpuSeriesList.Add(Intel_Core_i3);
            CPUSeries Intel_Core_i5 = new CPUSeries() { Id = 8, Name = "Intel Core i5" }; cpuSeriesList.Add(Intel_Core_i5);
            CPUSeries Intel_Core_i7 = new CPUSeries() { Id = 9, Name = "Intel Core i7" }; cpuSeriesList.Add(Intel_Core_i7);
            CPUSeries Intel_Core_i9 = new CPUSeries() { Id = 10, Name = "Intel Core i9" }; cpuSeriesList.Add(Intel_Core_i9);
            CPUSeries Intel_Pentium = new CPUSeries() { Id = 11, Name = "Intel Pentium" }; cpuSeriesList.Add(Intel_Pentium);
            #endregion
            _context.CPUSeries.AddRange(cpuSeriesList);
            #region CPUSocket Seed
            List<CPUSocket> cpuSockets = new List<CPUSocket>();
            CPUSocket AM4 = new CPUSocket() { Id = 1, Name = "AM4" }; cpuSockets.Add(AM4);
            CPUSocket TR4 = new CPUSocket() { Id = 2, Name = "TR4" }; cpuSockets.Add(TR4);
            CPUSocket sTRX4 = new CPUSocket() { Id = 3, Name = "sTRX4" }; cpuSockets.Add(sTRX4);
            CPUSocket LGA_1151__Skylake_ = new CPUSocket() { Id = 4, Name = "LGA 1151 (Skylake)" }; cpuSockets.Add(LGA_1151__Skylake_);
            CPUSocket LGA_1151__Kaby_Lake_ = new CPUSocket() { Id = 5, Name = "LGA 1151 (Kaby Lake)" }; cpuSockets.Add(LGA_1151__Kaby_Lake_);
            CPUSocket LGA_1200 = new CPUSocket() { Id = 6, Name = "LGA 1200" }; cpuSockets.Add(LGA_1200);
            CPUSocket LGA_1151__Coffee_Lake_ = new CPUSocket() { Id = 7, Name = "LGA 1151 (Coffee Lake)" }; cpuSockets.Add(LGA_1151__Coffee_Lake_);
            CPUSocket LGA_2066 = new CPUSocket() { Id = 8, Name = "LGA 2066" }; cpuSockets.Add(LGA_2066);
            CPUSocket AM3_ = new CPUSocket() { Id = 9, Name = "AM3+" }; cpuSockets.Add(AM3_);
            CPUSocket LGA_2011_V3 = new CPUSocket() { Id = 10, Name = "LGA 2011 V3" }; cpuSockets.Add(LGA_2011_V3);
            CPUSocket FM2 = new CPUSocket() { Id = 11, Name = "FM2" }; cpuSockets.Add(FM2);
            CPUSocket FM2_ = new CPUSocket() { Id = 12, Name = "FM2+" }; cpuSockets.Add(FM2_);
            #endregion
            _context.CPUSocket.AddRange(cpuSockets);
            #region GPUChipsetSeries Seed
            List<GPUChipsetSeries> gpuChipsetSeriesList = new List<GPUChipsetSeries>();
            GPUChipsetSeries GTX_700 = new GPUChipsetSeries() { Id = 1, Name = "GTX 700" }; gpuChipsetSeriesList.Add(GTX_700);
            GPUChipsetSeries GTX_900 = new GPUChipsetSeries() { Id = 2, Name = "GTX 900" }; gpuChipsetSeriesList.Add(GTX_900);
            GPUChipsetSeries GTX_1000 = new GPUChipsetSeries() { Id = 3, Name = "GTX 1000" }; gpuChipsetSeriesList.Add(GTX_1000);
            GPUChipsetSeries GTX_1600 = new GPUChipsetSeries() { Id = 4, Name = "GTX 1600" }; gpuChipsetSeriesList.Add(GTX_1600);
            GPUChipsetSeries RTX_2000 = new GPUChipsetSeries() { Id = 5, Name = "RTX 2000" }; gpuChipsetSeriesList.Add(RTX_2000);
            GPUChipsetSeries RTX_3000 = new GPUChipsetSeries() { Id = 6, Name = "RTX 3000" }; gpuChipsetSeriesList.Add(RTX_3000);
            GPUChipsetSeries R5_R7_R9_200 = new GPUChipsetSeries() { Id = 7, Name = "R5/R7/R9 200" }; gpuChipsetSeriesList.Add(R5_R7_R9_200);
            GPUChipsetSeries R5_R7_R9_300 = new GPUChipsetSeries() { Id = 8, Name = "R5/R7/R9 300" }; gpuChipsetSeriesList.Add(R5_R7_R9_300);
            GPUChipsetSeries RX_400 = new GPUChipsetSeries() { Id = 9, Name = "RX 400" }; gpuChipsetSeriesList.Add(RX_400);
            GPUChipsetSeries RX_500 = new GPUChipsetSeries() { Id = 10, Name = "RX 500" }; gpuChipsetSeriesList.Add(RX_500);
            GPUChipsetSeries RX_Vega = new GPUChipsetSeries() { Id = 11, Name = "RX Vega" }; gpuChipsetSeriesList.Add(RX_Vega);
            GPUChipsetSeries VII = new GPUChipsetSeries() { Id = 12, Name = "VII" }; gpuChipsetSeriesList.Add(VII);
            GPUChipsetSeries RX_5000 = new GPUChipsetSeries() { Id = 13, Name = "RX 5000" }; gpuChipsetSeriesList.Add(RX_5000);
            GPUChipsetSeries RX_6000 = new GPUChipsetSeries() { Id = 14, Name = "RX 6000" }; gpuChipsetSeriesList.Add(RX_6000);
            #endregion
            _context.GPUChipsetSeries.AddRange(gpuChipsetSeriesList);
            #region GPUChipset Seed
            List<GPUChipset> gpuChipsets = new List<GPUChipset>();
            GPUChipset GeForce_GTX_750_Ti = new GPUChipset() { Id = 1, Name = "GeForce GTX 750 Ti", ChipsetSeries = GTX_700 }; gpuChipsets.Add(GeForce_GTX_750_Ti);
            GPUChipset GeForce_GTX_950 = new GPUChipset() { Id = 2, Name = "GeForce GTX 950", ChipsetSeries = GTX_900 }; gpuChipsets.Add(GeForce_GTX_950);
            GPUChipset GeForce_GTX_960 = new GPUChipset() { Id = 3, Name = "GeForce GTX 960", ChipsetSeries = GTX_900 }; gpuChipsets.Add(GeForce_GTX_960);
            GPUChipset GeForce_GTX_970 = new GPUChipset() { Id = 4, Name = "GeForce GTX 970", ChipsetSeries = GTX_900 }; gpuChipsets.Add(GeForce_GTX_970);
            GPUChipset GeForce_GTX_980 = new GPUChipset() { Id = 5, Name = "GeForce GTX 980", ChipsetSeries = GTX_900 }; gpuChipsets.Add(GeForce_GTX_980);
            GPUChipset GeForce_GTX_980_Ti = new GPUChipset() { Id = 6, Name = "GeForce GTX 980 Ti", ChipsetSeries = GTX_900 }; gpuChipsets.Add(GeForce_GTX_980_Ti);
            GPUChipset GeForce_GT_1030 = new GPUChipset() { Id = 7, Name = "GeForce GT 1030", ChipsetSeries = GTX_1000 }; gpuChipsets.Add(GeForce_GT_1030);
            GPUChipset GeForce_GTX_1050 = new GPUChipset() { Id = 8, Name = "GeForce GTX 1050", ChipsetSeries = GTX_1000 }; gpuChipsets.Add(GeForce_GTX_1050);
            GPUChipset GeForce_GTX_1050_Ti = new GPUChipset() { Id = 9, Name = "GeForce GTX 1050 Ti", ChipsetSeries = GTX_1000 }; gpuChipsets.Add(GeForce_GTX_1050_Ti);
            GPUChipset GeForce_GTX_1060 = new GPUChipset() { Id = 10, Name = "GeForce GTX 1060", ChipsetSeries = GTX_1000 }; gpuChipsets.Add(GeForce_GTX_1060);
            GPUChipset GeForce_GTX_1070 = new GPUChipset() { Id = 11, Name = "GeForce GTX 1070", ChipsetSeries = GTX_1000 }; gpuChipsets.Add(GeForce_GTX_1070);
            GPUChipset GeForce_GTX_1070_Ti = new GPUChipset() { Id = 12, Name = "GeForce GTX 1070 Ti", ChipsetSeries = GTX_1000 }; gpuChipsets.Add(GeForce_GTX_1070_Ti);
            GPUChipset GeForce_GTX_1080 = new GPUChipset() { Id = 13, Name = "GeForce GTX 1080", ChipsetSeries = GTX_1000 }; gpuChipsets.Add(GeForce_GTX_1080);
            GPUChipset GeForce_GTX_1080_Ti = new GPUChipset() { Id = 14, Name = "GeForce GTX 1080 Ti", ChipsetSeries = GTX_1000 }; gpuChipsets.Add(GeForce_GTX_1080_Ti);
            GPUChipset GeForce_GTX_1650 = new GPUChipset() { Id = 15, Name = "GeForce GTX 1650", ChipsetSeries = GTX_1600 }; gpuChipsets.Add(GeForce_GTX_1650);
            GPUChipset GeForce_GTX_1660_Super = new GPUChipset() { Id = 16, Name = "GeForce GTX 1660 Super", ChipsetSeries = GTX_1600 }; gpuChipsets.Add(GeForce_GTX_1660_Super);
            GPUChipset GeForce_GTX_1660_Ti = new GPUChipset() { Id = 17, Name = "GeForce GTX 1660 Ti", ChipsetSeries = GTX_1600 }; gpuChipsets.Add(GeForce_GTX_1660_Ti);
            GPUChipset Geforce_RTX_2060 = new GPUChipset() { Id = 18, Name = "Geforce RTX 2060", ChipsetSeries = RTX_2000 }; gpuChipsets.Add(Geforce_RTX_2060);
            GPUChipset GeForce_RTX_2060_Super = new GPUChipset() { Id = 19, Name = "GeForce RTX 2060 Super", ChipsetSeries = RTX_2000 }; gpuChipsets.Add(GeForce_RTX_2060_Super);
            GPUChipset Geforce_RTX_2070 = new GPUChipset() { Id = 20, Name = "Geforce RTX 2070", ChipsetSeries = RTX_2000 }; gpuChipsets.Add(Geforce_RTX_2070);
            GPUChipset GeForce_RTX_2070_Super = new GPUChipset() { Id = 21, Name = "GeForce RTX 2070 Super", ChipsetSeries = RTX_2000 }; gpuChipsets.Add(GeForce_RTX_2070_Super);
            GPUChipset GeForce_RTX_2080 = new GPUChipset() { Id = 22, Name = "GeForce RTX 2080", ChipsetSeries = RTX_2000 }; gpuChipsets.Add(GeForce_RTX_2080);
            GPUChipset GeForce_RTX_2080_Super = new GPUChipset() { Id = 23, Name = "GeForce RTX 2080 Super", ChipsetSeries = RTX_2000 }; gpuChipsets.Add(GeForce_RTX_2080_Super);
            GPUChipset GeForce_RTX_2080_Ti = new GPUChipset() { Id = 24, Name = "GeForce RTX 2080 Ti", ChipsetSeries = RTX_2000 }; gpuChipsets.Add(GeForce_RTX_2080_Ti);
            GPUChipset GeForce_RTX_3060 = new GPUChipset() { Id = 25, Name = "GeForce RTX 3060", ChipsetSeries = RTX_3000 }; gpuChipsets.Add(GeForce_RTX_3060);
            GPUChipset GeForce_RTX_3060_Ti = new GPUChipset() { Id = 26, Name = "GeForce RTX 3060 Ti", ChipsetSeries = RTX_3000 }; gpuChipsets.Add(GeForce_RTX_3060_Ti);
            GPUChipset GeForce_RTX_3070 = new GPUChipset() { Id = 27, Name = "GeForce RTX 3070", ChipsetSeries = RTX_3000 }; gpuChipsets.Add(GeForce_RTX_3070);
            GPUChipset GeForce_RTX_3070_Ti = new GPUChipset() { Id = 28, Name = "GeForce RTX 3070 Ti", ChipsetSeries = RTX_3000 }; gpuChipsets.Add(GeForce_RTX_3070_Ti);
            GPUChipset GeForce_RTX_3080 = new GPUChipset() { Id = 29, Name = "GeForce RTX 3080", ChipsetSeries = RTX_3000 }; gpuChipsets.Add(GeForce_RTX_3080);
            GPUChipset GeForce_RTX_3080_Ti = new GPUChipset() { Id = 30, Name = "GeForce RTX 3080 Ti", ChipsetSeries = RTX_3000 }; gpuChipsets.Add(GeForce_RTX_3080_Ti);
            GPUChipset GeForce_RTX_3090 = new GPUChipset() { Id = 31, Name = "GeForce RTX 3090", ChipsetSeries = RTX_3000 }; gpuChipsets.Add(GeForce_RTX_3090);
            GPUChipset Radeon_R9_280 = new GPUChipset() { Id = 32, Name = "Radeon R9 280", ChipsetSeries = R5_R7_R9_200 }; gpuChipsets.Add(Radeon_R9_280);
            GPUChipset Radeon_R9_290 = new GPUChipset() { Id = 33, Name = "Radeon R9 290", ChipsetSeries = R5_R7_R9_200 }; gpuChipsets.Add(Radeon_R9_290);
            GPUChipset Radeon_R9_370 = new GPUChipset() { Id = 34, Name = "Radeon R9 370", ChipsetSeries = R5_R7_R9_300 }; gpuChipsets.Add(Radeon_R9_370);
            GPUChipset Radeon_R9_380 = new GPUChipset() { Id = 35, Name = "Radeon R9 380", ChipsetSeries = R5_R7_R9_300 }; gpuChipsets.Add(Radeon_R9_380);
            GPUChipset Radeon_R9_390 = new GPUChipset() { Id = 36, Name = "Radeon R9 390", ChipsetSeries = R5_R7_R9_300 }; gpuChipsets.Add(Radeon_R9_390);
            GPUChipset Radeon_R9_390X = new GPUChipset() { Id = 37, Name = "Radeon R9 390X", ChipsetSeries = R5_R7_R9_300 }; gpuChipsets.Add(Radeon_R9_390X);
            GPUChipset Radeon_RX_470 = new GPUChipset() { Id = 38, Name = "Radeon RX 470", ChipsetSeries = RX_400 }; gpuChipsets.Add(Radeon_RX_470);
            GPUChipset Radeon_RX_480 = new GPUChipset() { Id = 39, Name = "Radeon RX 480", ChipsetSeries = RX_400 }; gpuChipsets.Add(Radeon_RX_480);
            GPUChipset Radeon_RX560 = new GPUChipset() { Id = 40, Name = "Radeon RX560", ChipsetSeries = RX_500 }; gpuChipsets.Add(Radeon_RX560);
            GPUChipset Radeon_RX570 = new GPUChipset() { Id = 41, Name = "Radeon RX570", ChipsetSeries = RX_500 }; gpuChipsets.Add(Radeon_RX570);
            GPUChipset Radeon_RX580 = new GPUChipset() { Id = 42, Name = "Radeon RX580", ChipsetSeries = RX_500 }; gpuChipsets.Add(Radeon_RX580);
            GPUChipset Radeon_RX590 = new GPUChipset() { Id = 43, Name = "Radeon RX590", ChipsetSeries = RX_500 }; gpuChipsets.Add(Radeon_RX590);
            GPUChipset Radeon_RX_VEGA_56 = new GPUChipset() { Id = 44, Name = "Radeon RX VEGA 56", ChipsetSeries = RX_Vega }; gpuChipsets.Add(Radeon_RX_VEGA_56);
            GPUChipset Radeon_RX_VEGA_64 = new GPUChipset() { Id = 45, Name = "Radeon RX VEGA 64", ChipsetSeries = RX_Vega }; gpuChipsets.Add(Radeon_RX_VEGA_64);
            GPUChipset Radeon_VII = new GPUChipset() { Id = 46, Name = "Radeon VII", ChipsetSeries = VII }; gpuChipsets.Add(Radeon_VII);
            GPUChipset Radeon_RX_5500_XT = new GPUChipset() { Id = 47, Name = "Radeon RX 5500 XT", ChipsetSeries = RX_5000 }; gpuChipsets.Add(Radeon_RX_5500_XT);
            GPUChipset Radeon_RX_5600_XT = new GPUChipset() { Id = 48, Name = "Radeon RX 5600 XT", ChipsetSeries = RX_5000 }; gpuChipsets.Add(Radeon_RX_5600_XT);
            GPUChipset Radeon_RX5700 = new GPUChipset() { Id = 49, Name = "Radeon RX5700", ChipsetSeries = RX_5000 }; gpuChipsets.Add(Radeon_RX5700);
            GPUChipset Radeon_RX5700_XT = new GPUChipset() { Id = 50, Name = "Radeon RX5700 XT", ChipsetSeries = RX_5000 }; gpuChipsets.Add(Radeon_RX5700_XT);
            GPUChipset Radeon_RX_6700_XT = new GPUChipset() { Id = 51, Name = "Radeon RX 6700 XT", ChipsetSeries = RX_6000 }; gpuChipsets.Add(Radeon_RX_6700_XT);
            GPUChipset Radeon_RX_6800 = new GPUChipset() { Id = 52, Name = "Radeon RX 6800", ChipsetSeries = RX_6000 }; gpuChipsets.Add(Radeon_RX_6800);
            GPUChipset Radeon_RX_6800_XT = new GPUChipset() { Id = 53, Name = "Radeon RX 6800 XT", ChipsetSeries = RX_6000 }; gpuChipsets.Add(Radeon_RX_6800_XT);
            GPUChipset Radeon_RX_6900_XT = new GPUChipset() { Id = 54, Name = "Radeon RX 6900 XT", ChipsetSeries = RX_6000 }; gpuChipsets.Add(Radeon_RX_6900_XT);
            #endregion
            _context.GPUChipset.AddRange(gpuChipsets);
            #region Manufacturers Seed
            List<Manufacturer> manufacturers = new List<Manufacturer>();
            Manufacturer Acer = new Manufacturer() { Id = 1, Name = "Acer" }; manufacturers.Add(Acer);
            Manufacturer ADATA = new Manufacturer() { Id = 2, Name = "ADATA" }; manufacturers.Add(ADATA);
            Manufacturer Alphacool = new Manufacturer() { Id = 3, Name = "Alphacool" }; manufacturers.Add(Alphacool);
            Manufacturer AMD = new Manufacturer() { Id = 4, Name = "AMD" }; manufacturers.Add(AMD);
            Manufacturer Antec = new Manufacturer() { Id = 5, Name = "Antec" }; manufacturers.Add(Antec);
            Manufacturer ARCTIC = new Manufacturer() { Id = 6, Name = "ARCTIC" }; manufacturers.Add(ARCTIC);
            Manufacturer ASRock = new Manufacturer() { Id = 7, Name = "ASRock" }; manufacturers.Add(ASRock);
            Manufacturer ASUS = new Manufacturer() { Id = 8, Name = "ASUS" }; manufacturers.Add(ASUS);
            Manufacturer be_quiet_ = new Manufacturer() { Id = 9, Name = "be quiet!" }; manufacturers.Add(be_quiet_);
            Manufacturer BenQ = new Manufacturer() { Id = 10, Name = "BenQ" }; manufacturers.Add(BenQ);
            Manufacturer Colorful = new Manufacturer() { Id = 11, Name = "Colorful" }; manufacturers.Add(Colorful);
            Manufacturer Cooler_Master = new Manufacturer() { Id = 12, Name = "Cooler Master" }; manufacturers.Add(Cooler_Master);
            Manufacturer CORSAIR = new Manufacturer() { Id = 13, Name = "CORSAIR" }; manufacturers.Add(CORSAIR);
            Manufacturer Cryorig = new Manufacturer() { Id = 14, Name = "Cryorig" }; manufacturers.Add(Cryorig);
            Manufacturer Deepcool = new Manufacturer() { Id = 15, Name = "Deepcool" }; manufacturers.Add(Deepcool);
            Manufacturer DFL = new Manufacturer() { Id = 16, Name = "DFL" }; manufacturers.Add(DFL);
            Manufacturer EKWB = new Manufacturer() { Id = 17, Name = "EKWB" }; manufacturers.Add(EKWB);
            Manufacturer EVGA = new Manufacturer() { Id = 18, Name = "EVGA" }; manufacturers.Add(EVGA);
            Manufacturer Fractal_Design = new Manufacturer() { Id = 19, Name = "Fractal Design" }; manufacturers.Add(Fractal_Design);
            Manufacturer FSP = new Manufacturer() { Id = 20, Name = "FSP" }; manufacturers.Add(FSP);
            Manufacturer G_SKILL = new Manufacturer() { Id = 21, Name = "G.SKILL" }; manufacturers.Add(G_SKILL);
            Manufacturer GamerStorm = new Manufacturer() { Id = 22, Name = "GamerStorm" }; manufacturers.Add(GamerStorm);
            Manufacturer GIGABYTE = new Manufacturer() { Id = 23, Name = "GIGABYTE" }; manufacturers.Add(GIGABYTE);
            Manufacturer HyperX = new Manufacturer() { Id = 24, Name = "HyperX" }; manufacturers.Add(HyperX);
            Manufacturer Intel = new Manufacturer() { Id = 25, Name = "Intel" }; manufacturers.Add(Intel);
            Manufacturer InWin = new Manufacturer() { Id = 26, Name = "InWin" }; manufacturers.Add(InWin);
            Manufacturer Kingston = new Manufacturer() { Id = 27, Name = "Kingston" }; manufacturers.Add(Kingston);
            Manufacturer Kolink = new Manufacturer() { Id = 28, Name = "Kolink" }; manufacturers.Add(Kolink);
            Manufacturer Lian_Li = new Manufacturer() { Id = 29, Name = "Lian Li" }; manufacturers.Add(Lian_Li);
            Manufacturer Mediatonic = new Manufacturer() { Id = 30, Name = "Mediatonic" }; manufacturers.Add(Mediatonic);
            Manufacturer Mortoni = new Manufacturer() { Id = 31, Name = "Mortoni" }; manufacturers.Add(Mortoni);
            Manufacturer MSI = new Manufacturer() { Id = 32, Name = "MSI" }; manufacturers.Add(MSI);
            Manufacturer NIMBUS_Data = new Manufacturer() { Id = 33, Name = "NIMBUS Data" }; manufacturers.Add(NIMBUS_Data);
            Manufacturer NVIDIA = new Manufacturer() { Id = 34, Name = "NVIDIA" }; manufacturers.Add(NVIDIA);
            Manufacturer NZXT = new Manufacturer() { Id = 35, Name = "NZXT" }; manufacturers.Add(NZXT);
            Manufacturer OCUK = new Manufacturer() { Id = 36, Name = "OCUK" }; manufacturers.Add(OCUK);
            Manufacturer Open_Benchtable = new Manufacturer() { Id = 37, Name = "Open Benchtable" }; manufacturers.Add(Open_Benchtable);
            Manufacturer Patriot = new Manufacturer() { Id = 38, Name = "Patriot" }; manufacturers.Add(Patriot);
            Manufacturer Raijintek = new Manufacturer() { Id = 39, Name = "Raijintek" }; manufacturers.Add(Raijintek);
            Manufacturer Razer = new Manufacturer() { Id = 40, Name = "Razer" }; manufacturers.Add(Razer);
            Manufacturer ROG = new Manufacturer() { Id = 41, Name = "ROG" }; manufacturers.Add(ROG);
            Manufacturer Sabrent = new Manufacturer() { Id = 42, Name = "Sabrent" }; manufacturers.Add(Sabrent);
            Manufacturer Seagate = new Manufacturer() { Id = 43, Name = "Seagate" }; manufacturers.Add(Seagate);
            Manufacturer Shean = new Manufacturer() { Id = 44, Name = "Shean" }; manufacturers.Add(Shean);
            Manufacturer SilverStone = new Manufacturer() { Id = 45, Name = "SilverStone" }; manufacturers.Add(SilverStone);
            Manufacturer SteelSeries = new Manufacturer() { Id = 46, Name = "SteelSeries" }; manufacturers.Add(SteelSeries);
            Manufacturer Team_Group = new Manufacturer() { Id = 47, Name = "Team Group" }; manufacturers.Add(Team_Group);
            Manufacturer Thermaltake = new Manufacturer() { Id = 48, Name = "Thermaltake" }; manufacturers.Add(Thermaltake);
            Manufacturer ZOTAC = new Manufacturer() { Id = 49, Name = "ZOTAC" }; manufacturers.Add(ZOTAC);
            #endregion
            _context.Manufacturer.AddRange(manufacturers);
            #region MoboChipset
            List<MoboChipset> moboChipsets = new List<MoboChipset>();
            MoboChipset B450 = new MoboChipset() { Id = 1, Name = "B450" }; moboChipsets.Add(B450);
            MoboChipset B550 = new MoboChipset() { Id = 2, Name = "B550" }; moboChipsets.Add(B550);
            MoboChipset TRX40 = new MoboChipset() { Id = 3, Name = "TRX40" }; moboChipsets.Add(TRX40);
            MoboChipset X570 = new MoboChipset() { Id = 4, Name = "X570" }; moboChipsets.Add(X570);
            MoboChipset Z390 = new MoboChipset() { Id = 5, Name = "Z390" }; moboChipsets.Add(Z390);
            MoboChipset Z590 = new MoboChipset() { Id = 6, Name = "Z590" }; moboChipsets.Add(Z590);
            MoboChipset X299 = new MoboChipset() { Id = 7, Name = "X299" }; moboChipsets.Add(X299);
            MoboChipset X470 = new MoboChipset() { Id = 8, Name = "X470" }; moboChipsets.Add(X470);
            MoboChipset Z370 = new MoboChipset() { Id = 9, Name = "Z370" }; moboChipsets.Add(Z370);
            MoboChipset X399 = new MoboChipset() { Id = 10, Name = "X399" }; moboChipsets.Add(X399);
            MoboChipset B365 = new MoboChipset() { Id = 11, Name = "B365" }; moboChipsets.Add(B365);
            MoboChipset A320 = new MoboChipset() { Id = 12, Name = "A320" }; moboChipsets.Add(A320);
            MoboChipset H170 = new MoboChipset() { Id = 13, Name = "H170" }; moboChipsets.Add(H170);
            MoboChipset Z270 = new MoboChipset() { Id = 14, Name = "Z270" }; moboChipsets.Add(Z270);
            MoboChipset Z490 = new MoboChipset() { Id = 15, Name = "Z490" }; moboChipsets.Add(Z490);
            MoboChipset B360 = new MoboChipset() { Id = 16, Name = "B360" }; moboChipsets.Add(B360);
            MoboChipset B350 = new MoboChipset() { Id = 17, Name = "B350" }; moboChipsets.Add(B350);
            MoboChipset X370 = new MoboChipset() { Id = 18, Name = "X370" }; moboChipsets.Add(X370);
            MoboChipset B250 = new MoboChipset() { Id = 19, Name = "B250" }; moboChipsets.Add(B250);
            MoboChipset H370 = new MoboChipset() { Id = 20, Name = "H370" }; moboChipsets.Add(H370);
            MoboChipset B460 = new MoboChipset() { Id = 21, Name = "B460" }; moboChipsets.Add(B460);
            #endregion
            _context.MoboChipset.AddRange(moboChipsets);
            #region MoboSize
            List<MoboSize> moboSizes = new List<MoboSize>();
            MoboSize Mini_ITX = new MoboSize() { Id = 1, Name = "Mini-ITX" }; moboSizes.Add(Mini_ITX);
            MoboSize Micro_ATX = new MoboSize() { Id = 2, Name = "Micro-ATX" }; moboSizes.Add(Micro_ATX);
            MoboSize S_ATX = new MoboSize() { Id = 3, Name = "S-ATX" }; moboSizes.Add(S_ATX);
            MoboSize E_ATX = new MoboSize() { Id = 4, Name = "E-ATX" }; moboSizes.Add(E_ATX);
            MoboSize XL_ATX = new MoboSize() { Id = 5, Name = "XL-ATX" }; moboSizes.Add(XL_ATX);
            MoboSize SSI_EEB = new MoboSize() { Id = 6, Name = "SSI-EEB" }; moboSizes.Add(SSI_EEB);
            #endregion
            _context.MoboSize.AddRange(moboSizes);
            #region MultiGPU
            List<MultiGPU> multiGPUs = new List<MultiGPU>();
            MultiGPU CrossFire = new MultiGPU() { Id = 1, Name = "CrossFire" }; multiGPUs.Add(CrossFire);
            MultiGPU SLI = new MultiGPU() { Id = 2, Name = "SLI" }; multiGPUs.Add(SLI);
            #endregion
            _context.MultiGPU.AddRange(multiGPUs);
            #region PowerConnector
            List<PowerConnector> powerConnectors = new List<PowerConnector>();
            PowerConnector Six_Pin = new PowerConnector() { Id = 1, Name = "Six Pin" }; powerConnectors.Add(Six_Pin);
            PowerConnector Eight_Pin = new PowerConnector() { Id = 2, Name = "Eight Pin" }; powerConnectors.Add(Eight_Pin);
            #endregion
            _context.PowerConnector.AddRange(powerConnectors);
            #region PSUSize
            List<PSUSize> psuSizes = new List<PSUSize>();
            PSUSize SFX = new PSUSize() { Id = 1, Name = "SFX" }; psuSizes.Add(SFX);
            PSUSize ATX = new PSUSize() { Id = 2, Name = "ATX" }; psuSizes.Add(ATX);
            #endregion
            _context.PSUSize.AddRange(psuSizes);
            #region CaseFan
            List<CaseFan> caseFans = new List<CaseFan>();
            CaseFan XPG_VENTO_120 = new CaseFan() { Id = 1, Name = "XPG VENTO 120", PartType = PartType.CaseFan, Manufacturer = ADATA, Price = 30, SellPrice = 10, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 45.3, Size = 120, AirPressure = 0.68 }; caseFans.Add(XPG_VENTO_120);
            CaseFan XPG_VENTO_PRO_120_PWM = new CaseFan() { Id = 2, Name = "XPG VENTO PRO 120 PWM", PartType = PartType.CaseFan, Manufacturer = ADATA, Price = 30, SellPrice = 10, LevelUnlock = 30, LevelPercent = 50, Lighting = null, AirFlow = 75, Size = 120, AirPressure = 3.15 }; caseFans.Add(XPG_VENTO_PRO_120_PWM);
            CaseFan Prizm_120_ARGB = new CaseFan() { Id = 3, Name = "Prizm 120 ARGB", PartType = PartType.CaseFan, Manufacturer = Antec, Price = 20, SellPrice = 7, LevelUnlock = 30, LevelPercent = 50, Lighting = Color.RGB, AirFlow = 45.03, Size = 120, AirPressure = 2.56 }; caseFans.Add(Prizm_120_ARGB);
            CaseFan BioniX_F120__Green_ = new CaseFan() { Id = 4, Name = "BioniX F120 (Green)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 13, SellPrice = 4, LevelUnlock = 3, LevelPercent = 60, Lighting = null, AirFlow = 69, Size = 120, AirPressure = 3 }; caseFans.Add(BioniX_F120__Green_);
            CaseFan BioniX_F120__Grey___White_ = new CaseFan() { Id = 5, Name = "BioniX F120 (Grey + White)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 13, SellPrice = 4, LevelUnlock = 3, LevelPercent = 60, Lighting = null, AirFlow = 69, Size = 120, AirPressure = 3 }; caseFans.Add(BioniX_F120__Grey___White_);
            CaseFan BioniX_F120__Grey_ = new CaseFan() { Id = 6, Name = "BioniX F120 (Grey)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 13, SellPrice = 4, LevelUnlock = 3, LevelPercent = 60, Lighting = null, AirFlow = 69, Size = 120, AirPressure = 3 }; caseFans.Add(BioniX_F120__Grey_);
            CaseFan BioniX_F120__Red_ = new CaseFan() { Id = 7, Name = "BioniX F120 (Red)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 13, SellPrice = 4, LevelUnlock = 3, LevelPercent = 60, Lighting = null, AirFlow = 69, Size = 120, AirPressure = 3 }; caseFans.Add(BioniX_F120__Red_);
            CaseFan BioniX_F120__White_ = new CaseFan() { Id = 8, Name = "BioniX F120 (White)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 13, SellPrice = 4, LevelUnlock = 3, LevelPercent = 60, Lighting = null, AirFlow = 69, Size = 120, AirPressure = 3 }; caseFans.Add(BioniX_F120__White_);
            CaseFan BioniX_F120__Yellow_ = new CaseFan() { Id = 9, Name = "BioniX F120 (Yellow)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 13, SellPrice = 4, LevelUnlock = 3, LevelPercent = 60, Lighting = null, AirFlow = 69, Size = 120, AirPressure = 3 }; caseFans.Add(BioniX_F120__Yellow_);
            CaseFan BioniX_F140__Green_ = new CaseFan() { Id = 10, Name = "BioniX F140 (Green)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 14, SellPrice = 5, LevelUnlock = 5, LevelPercent = 1, Lighting = null, AirFlow = 104, Size = 140, AirPressure = 2 }; caseFans.Add(BioniX_F140__Green_);
            CaseFan BioniX_F140__Grey___White_ = new CaseFan() { Id = 11, Name = "BioniX F140 (Grey + White)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 14, SellPrice = 5, LevelUnlock = 5, LevelPercent = 1, Lighting = null, AirFlow = 104, Size = 140, AirPressure = 2 }; caseFans.Add(BioniX_F140__Grey___White_);
            CaseFan BioniX_F140__Grey_ = new CaseFan() { Id = 12, Name = "BioniX F140 (Grey)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 14, SellPrice = 5, LevelUnlock = 5, LevelPercent = 1, Lighting = null, AirFlow = 104, Size = 140, AirPressure = 2 }; caseFans.Add(BioniX_F140__Grey_);
            CaseFan BioniX_F140__Red_ = new CaseFan() { Id = 13, Name = "BioniX F140 (Red)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 14, SellPrice = 5, LevelUnlock = 5, LevelPercent = 1, Lighting = null, AirFlow = 104, Size = 140, AirPressure = 2 }; caseFans.Add(BioniX_F140__Red_);
            CaseFan BioniX_F140__White_ = new CaseFan() { Id = 14, Name = "BioniX F140 (White)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 14, SellPrice = 5, LevelUnlock = 5, LevelPercent = 1, Lighting = null, AirFlow = 104, Size = 140, AirPressure = 2 }; caseFans.Add(BioniX_F140__White_);
            CaseFan BioniX_F140__Yellow_ = new CaseFan() { Id = 15, Name = "BioniX F140 (Yellow)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 14, SellPrice = 5, LevelUnlock = 5, LevelPercent = 1, Lighting = null, AirFlow = 104, Size = 140, AirPressure = 2 }; caseFans.Add(BioniX_F140__Yellow_);
            CaseFan BioniX_P120__Green_ = new CaseFan() { Id = 16, Name = "BioniX P120 (Green)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 16, SellPrice = 5, LevelUnlock = 13, LevelPercent = 10, Lighting = null, AirFlow = 67.56, Size = 120, AirPressure = 2.75 }; caseFans.Add(BioniX_P120__Green_);
            CaseFan BioniX_P120__Grey___White_ = new CaseFan() { Id = 17, Name = "BioniX P120 (Grey + White)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 16, SellPrice = 5, LevelUnlock = 13, LevelPercent = 10, Lighting = null, AirFlow = 67.56, Size = 120, AirPressure = 2.75 }; caseFans.Add(BioniX_P120__Grey___White_);
            CaseFan BioniX_P120__Grey_ = new CaseFan() { Id = 18, Name = "BioniX P120 (Grey)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 16, SellPrice = 5, LevelUnlock = 13, LevelPercent = 10, Lighting = null, AirFlow = 67.56, Size = 120, AirPressure = 2.75 }; caseFans.Add(BioniX_P120__Grey_);
            CaseFan BioniX_P120__Red_ = new CaseFan() { Id = 19, Name = "BioniX P120 (Red)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 16, SellPrice = 5, LevelUnlock = 13, LevelPercent = 10, Lighting = null, AirFlow = 67.56, Size = 120, AirPressure = 2.75 }; caseFans.Add(BioniX_P120__Red_);
            CaseFan BioniX_P120__White_ = new CaseFan() { Id = 20, Name = "BioniX P120 (White)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 16, SellPrice = 5, LevelUnlock = 13, LevelPercent = 10, Lighting = null, AirFlow = 67.56, Size = 120, AirPressure = 2.75 }; caseFans.Add(BioniX_P120__White_);
            CaseFan BioniX_P120__Yellow_ = new CaseFan() { Id = 21, Name = "BioniX P120 (Yellow)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 16, SellPrice = 5, LevelUnlock = 13, LevelPercent = 10, Lighting = null, AirFlow = 67.56, Size = 120, AirPressure = 2.75 }; caseFans.Add(BioniX_P120__Yellow_);
            CaseFan BioniX_P120_ARGB = new CaseFan() { Id = 22, Name = "BioniX P120 ARGB", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 30, SellPrice = 20, LevelUnlock = 1, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 48, Size = 120, AirPressure = 2.1 }; caseFans.Add(BioniX_P120_ARGB);
            CaseFan BioniX_P140__Grey___White_ = new CaseFan() { Id = 23, Name = "BioniX P140 (Grey + White)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 18, SellPrice = 6, LevelUnlock = 13, LevelPercent = 10, Lighting = null, AirFlow = 77.6, Size = 140, AirPressure = 2.85 }; caseFans.Add(BioniX_P140__Grey___White_);
            CaseFan BioniX_P140__Grey_ = new CaseFan() { Id = 24, Name = "BioniX P140 (Grey)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 18, SellPrice = 6, LevelUnlock = 13, LevelPercent = 10, Lighting = null, AirFlow = 77.6, Size = 140, AirPressure = 2.85 }; caseFans.Add(BioniX_P140__Grey_);
            CaseFan BioniX_P140__Red_ = new CaseFan() { Id = 25, Name = "BioniX P140 (Red)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 18, SellPrice = 6, LevelUnlock = 13, LevelPercent = 10, Lighting = null, AirFlow = 77.6, Size = 140, AirPressure = 2.85 }; caseFans.Add(BioniX_P140__Red_);
            CaseFan BioniX_P140__White_ = new CaseFan() { Id = 26, Name = "BioniX P140 (White)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 18, SellPrice = 6, LevelUnlock = 13, LevelPercent = 10, Lighting = null, AirFlow = 77.6, Size = 140, AirPressure = 2.85 }; caseFans.Add(BioniX_P140__White_);
            CaseFan F12_PWM_PST = new CaseFan() { Id = 27, Name = "F12 PWM PST", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 10, SellPrice = 3, LevelUnlock = 11, LevelPercent = 1, Lighting = null, AirFlow = 53, Size = 120, AirPressure = 0.87 }; caseFans.Add(F12_PWM_PST);
            CaseFan F12_PWM_PST_CO = new CaseFan() { Id = 28, Name = "F12 PWM PST CO", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 12, SellPrice = 4, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 53, Size = 120, AirPressure = 2 }; caseFans.Add(F12_PWM_PST_CO);
            CaseFan F12_Silent = new CaseFan() { Id = 29, Name = "F12 Silent", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 10, SellPrice = 3, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 37, Size = 120, AirPressure = 2 }; caseFans.Add(F12_Silent);
            CaseFan F14_PWM_PST = new CaseFan() { Id = 30, Name = "F14 PWM PST", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 10, SellPrice = 3, LevelUnlock = 11, LevelPercent = 1, Lighting = null, AirFlow = 74, Size = 140, AirPressure = 2.4 }; caseFans.Add(F14_PWM_PST);
            CaseFan F14_PWM_PST_CO = new CaseFan() { Id = 31, Name = "F14 PWM PST CO", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 13, SellPrice = 4, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 74, Size = 140, AirPressure = 2 }; caseFans.Add(F14_PWM_PST_CO);
            CaseFan F14_Silent = new CaseFan() { Id = 32, Name = "F14 Silent", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 11, SellPrice = 4, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 46, Size = 140, AirPressure = 2 }; caseFans.Add(F14_Silent);
            CaseFan P12 = new CaseFan() { Id = 33, Name = "P12", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 10, SellPrice = 3, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 56.3, Size = 120, AirPressure = 2 }; caseFans.Add(P12);
            CaseFan P12_PWM__Black_Transparent_ = new CaseFan() { Id = 34, Name = "P12 PWM (Black Transparent)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 10, SellPrice = 3, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 56.3, Size = 120, AirPressure = 2 }; caseFans.Add(P12_PWM__Black_Transparent_);
            CaseFan P12_PWM__Black_ = new CaseFan() { Id = 35, Name = "P12 PWM (Black)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 10, SellPrice = 3, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 56.3, Size = 120, AirPressure = 2 }; caseFans.Add(P12_PWM__Black_);
            CaseFan P12_PWM__White_Transparent_ = new CaseFan() { Id = 36, Name = "P12 PWM (White Transparent)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 10, SellPrice = 3, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 56.3, Size = 120, AirPressure = 2 }; caseFans.Add(P12_PWM__White_Transparent_);
            CaseFan P12_PWM__White_ = new CaseFan() { Id = 37, Name = "P12 PWM (White)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 10, SellPrice = 3, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 56.3, Size = 120, AirPressure = 2 }; caseFans.Add(P12_PWM__White_);
            CaseFan P12_PWM_PST__Black_Transparent_ = new CaseFan() { Id = 38, Name = "P12 PWM PST (Black Transparent)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 11, SellPrice = 4, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 56.3, Size = 120, AirPressure = 2 }; caseFans.Add(P12_PWM_PST__Black_Transparent_);
            CaseFan P12_PWM_PST__Black_ = new CaseFan() { Id = 39, Name = "P12 PWM PST (Black)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 11, SellPrice = 4, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 56.3, Size = 120, AirPressure = 2 }; caseFans.Add(P12_PWM_PST__Black_);
            CaseFan P12_PWM_PST__White_Transparent_ = new CaseFan() { Id = 40, Name = "P12 PWM PST (White Transparent)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 11, SellPrice = 4, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 56.3, Size = 120, AirPressure = 2 }; caseFans.Add(P12_PWM_PST__White_Transparent_);
            CaseFan P12_PWM_PST__White_ = new CaseFan() { Id = 41, Name = "P12 PWM PST (White)", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 11, SellPrice = 4, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 56.3, Size = 120, AirPressure = 2 }; caseFans.Add(P12_PWM_PST__White_);
            CaseFan P12_PWM_PST_CO = new CaseFan() { Id = 42, Name = "P12 PWM PST CO", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 11, SellPrice = 4, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 56.3, Size = 120, AirPressure = 2 }; caseFans.Add(P12_PWM_PST_CO);
            CaseFan P12_Silent = new CaseFan() { Id = 43, Name = "P12 Silent", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 10, SellPrice = 3, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 24.1, Size = 120, AirPressure = 2 }; caseFans.Add(P12_Silent);
            CaseFan P12_Slim_PWM_PST = new CaseFan() { Id = 44, Name = "P12 Slim PWM PST", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 13, SellPrice = 20, LevelUnlock = 1, LevelPercent = 1, Lighting = null, AirFlow = 42.1, Size = 120, AirPressure = 1.45 }; caseFans.Add(P12_Slim_PWM_PST);
            CaseFan P12_TC = new CaseFan() { Id = 45, Name = "P12 TC", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 20, SellPrice = 7, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 56.3, Size = 120, AirPressure = 2 }; caseFans.Add(P12_TC);
            CaseFan P14 = new CaseFan() { Id = 46, Name = "P14", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 14, SellPrice = 5, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 72.8, Size = 140, AirPressure = 2 }; caseFans.Add(P14);
            CaseFan P14_PWM = new CaseFan() { Id = 47, Name = "P14 PWM", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 14, SellPrice = 5, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 72.8, Size = 140, AirPressure = 2 }; caseFans.Add(P14_PWM);
            CaseFan P14_PWM_PST = new CaseFan() { Id = 48, Name = "P14 PWM PST", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 14, SellPrice = 5, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 72.8, Size = 140, AirPressure = 2 }; caseFans.Add(P14_PWM_PST);
            CaseFan P14_PWM_PST_CO = new CaseFan() { Id = 49, Name = "P14 PWM PST CO", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 14, SellPrice = 5, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 72.8, Size = 140, AirPressure = 2 }; caseFans.Add(P14_PWM_PST_CO);
            CaseFan P14_Silent = new CaseFan() { Id = 50, Name = "P14 Silent", PartType = PartType.CaseFan, Manufacturer = ARCTIC, Price = 14, SellPrice = 5, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 29.8, Size = 140, AirPressure = 2 }; caseFans.Add(P14_Silent);
            CaseFan Pure_Wings_2_120mm = new CaseFan() { Id = 51, Name = "Pure Wings 2 120mm", PartType = PartType.CaseFan, Manufacturer = be_quiet_, Price = 10, SellPrice = 3, LevelUnlock = 27, LevelPercent = 30, Lighting = null, AirFlow = 65.51, Size = 120, AirPressure = 2.23 }; caseFans.Add(Pure_Wings_2_120mm);
            CaseFan Pure_Wings_2_140mm = new CaseFan() { Id = 52, Name = "Pure Wings 2 140mm", PartType = PartType.CaseFan, Manufacturer = be_quiet_, Price = 13, SellPrice = 4, LevelUnlock = 27, LevelPercent = 30, Lighting = null, AirFlow = 82.4, Size = 140, AirPressure = 1.82 }; caseFans.Add(Pure_Wings_2_140mm);
            CaseFan Shadow_Wings_2_120mm = new CaseFan() { Id = 53, Name = "Shadow Wings 2 120mm", PartType = PartType.CaseFan, Manufacturer = be_quiet_, Price = 16, SellPrice = 5, LevelUnlock = 27, LevelPercent = 70, Lighting = null, AirFlow = 38.5, Size = 120, AirPressure = 0.82 }; caseFans.Add(Shadow_Wings_2_120mm);
            CaseFan Shadow_Wings_2_140mm = new CaseFan() { Id = 54, Name = "Shadow Wings 2 140mm", PartType = PartType.CaseFan, Manufacturer = be_quiet_, Price = 19, SellPrice = 6, LevelUnlock = 27, LevelPercent = 70, Lighting = null, AirFlow = 49.8, Size = 140, AirPressure = 0.58 }; caseFans.Add(Shadow_Wings_2_140mm);
            CaseFan Silent_Wings_3_120mm = new CaseFan() { Id = 55, Name = "Silent Wings 3 120mm", PartType = PartType.CaseFan, Manufacturer = be_quiet_, Price = 7, SellPrice = 2, LevelUnlock = 27, LevelPercent = 1, Lighting = null, AirFlow = 50.5, Size = 120, AirPressure = 1.79 }; caseFans.Add(Silent_Wings_3_120mm);
            CaseFan Silent_Wings_3_140mm = new CaseFan() { Id = 56, Name = "Silent Wings 3 140mm", PartType = PartType.CaseFan, Manufacturer = be_quiet_, Price = 8, SellPrice = 3, LevelUnlock = 27, LevelPercent = 1, Lighting = null, AirFlow = 59.5, Size = 140, AirPressure = 1.08 }; caseFans.Add(Silent_Wings_3_140mm);
            CaseFan MasterCase_H500P_200mm_RGB = new CaseFan() { Id = 57, Name = "MasterCase H500P 200mm RGB", PartType = PartType.CaseFan, Manufacturer = Cooler_Master, Price = 10, SellPrice = 3, LevelUnlock = 3, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 90, Size = 200, AirPressure = 0.88 }; caseFans.Add(MasterCase_H500P_200mm_RGB);
            CaseFan SickleFlow_120mm = new CaseFan() { Id = 58, Name = "SickleFlow 120mm", PartType = PartType.CaseFan, Manufacturer = Cooler_Master, Price = 30, SellPrice = 10, LevelUnlock = 32, LevelPercent = 50, Lighting = null, AirFlow = 55, Size = 120, AirPressure = 2.5 }; caseFans.Add(SickleFlow_120mm);
            CaseFan SILENCIO_FP_120_PWM = new CaseFan() { Id = 59, Name = "SILENCIO FP 120 PWM", PartType = PartType.CaseFan, Manufacturer = Cooler_Master, Price = 30, SellPrice = 10, LevelUnlock = 31, LevelPercent = 1, Lighting = null, AirFlow = 52.02, Size = 120, AirPressure = 2 }; caseFans.Add(SILENCIO_FP_120_PWM);
            CaseFan HD120_RGB_LED = new CaseFan() { Id = 60, Name = "HD120 RGB LED", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 30, SellPrice = 10, LevelUnlock = 18, LevelPercent = 40, Lighting = Color.RGB, AirFlow = 54.4, Size = 120, AirPressure = 2.25 }; caseFans.Add(HD120_RGB_LED);
            CaseFan HD140_RGB_LED = new CaseFan() { Id = 61, Name = "HD140 RGB LED", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 33, SellPrice = 11, LevelUnlock = 18, LevelPercent = 40, Lighting = Color.RGB, AirFlow = 74, Size = 140, AirPressure = 1.85 }; caseFans.Add(HD140_RGB_LED);
            CaseFan iCUE_QL120_RGB_120mm_PWM__Black_ = new CaseFan() { Id = 62, Name = "iCUE QL120 RGB 120mm PWM (Black)", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 30, SellPrice = 10, LevelUnlock = 30, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 41.8, Size = 120, AirPressure = 2 }; caseFans.Add(iCUE_QL120_RGB_120mm_PWM__Black_);
            CaseFan iCUE_QL120_RGB_120mm_PWM__White_ = new CaseFan() { Id = 63, Name = "iCUE QL120 RGB 120mm PWM (White)", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 30, SellPrice = 10, LevelUnlock = 30, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 41.8, Size = 120, AirPressure = 2 }; caseFans.Add(iCUE_QL120_RGB_120mm_PWM__White_);
            CaseFan iCUE_QL140_RGB_140mm_PWM__Black_ = new CaseFan() { Id = 64, Name = "iCUE QL140 RGB 140mm PWM (Black)", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 35, SellPrice = 12, LevelUnlock = 30, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 52.02, Size = 140, AirPressure = 2 }; caseFans.Add(iCUE_QL140_RGB_140mm_PWM__Black_);
            CaseFan iCUE_QL140_RGB_140mm_PWM__White_ = new CaseFan() { Id = 65, Name = "iCUE QL140 RGB 140mm PWM (White)", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 35, SellPrice = 12, LevelUnlock = 30, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 52.02, Size = 140, AirPressure = 2 }; caseFans.Add(iCUE_QL140_RGB_140mm_PWM__White_);
            CaseFan LL120_RGB_LED = new CaseFan() { Id = 66, Name = "LL120 RGB LED", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 35, SellPrice = 12, LevelUnlock = 18, LevelPercent = 80, Lighting = Color.RGB, AirFlow = 44, Size = 120, AirPressure = 1.61 }; caseFans.Add(LL120_RGB_LED);
            CaseFan LL120_RGB_LED__White_ = new CaseFan() { Id = 67, Name = "LL120 RGB LED (White)", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 35, SellPrice = 12, LevelUnlock = 18, LevelPercent = 80, Lighting = Color.RGB, AirFlow = 44, Size = 120, AirPressure = 1.61 }; caseFans.Add(LL120_RGB_LED__White_);
            CaseFan LL140_RGB_LED = new CaseFan() { Id = 68, Name = "LL140 RGB LED", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 38, SellPrice = 13, LevelUnlock = 18, LevelPercent = 80, Lighting = Color.RGB, AirFlow = 52, Size = 140, AirPressure = 1.52 }; caseFans.Add(LL140_RGB_LED);
            CaseFan ML120 = new CaseFan() { Id = 69, Name = "ML120", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 25, SellPrice = 8, LevelUnlock = 2, LevelPercent = 1, Lighting = null, AirFlow = 75, Size = 120, AirPressure = 4.2 }; caseFans.Add(ML120);
            CaseFan ML140 = new CaseFan() { Id = 70, Name = "ML140", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 28, SellPrice = 9, LevelUnlock = 2, LevelPercent = 1, Lighting = null, AirFlow = 97, Size = 140, AirPressure = 3 }; caseFans.Add(ML140);
            CaseFan SP120__Black_ = new CaseFan() { Id = 71, Name = "SP120 (Black)", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 20, SellPrice = 7, LevelUnlock = 28, LevelPercent = 1, Lighting = null, AirFlow = 45, Size = 120, AirPressure = 1.46 }; caseFans.Add(SP120__Black_);
            CaseFan SP120__White_ = new CaseFan() { Id = 72, Name = "SP120 (White)", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 20, SellPrice = 7, LevelUnlock = 28, LevelPercent = 1, Lighting = null, AirFlow = 45, Size = 120, AirPressure = 1.46 }; caseFans.Add(SP120__White_);
            CaseFan SP120_RGB_Elite__Black_ = new CaseFan() { Id = 73, Name = "SP120 RGB Elite (Black)", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 25, SellPrice = 8, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 45, Size = 120, AirPressure = 1.46 }; caseFans.Add(SP120_RGB_Elite__Black_);
            CaseFan SP120_RGB_Elite__White_ = new CaseFan() { Id = 74, Name = "SP120 RGB Elite (White)", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 25, SellPrice = 8, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 45, Size = 120, AirPressure = 1.46 }; caseFans.Add(SP120_RGB_Elite__White_);
            CaseFan SP120_RGB_LED = new CaseFan() { Id = 75, Name = "SP120 RGB LED", PartType = PartType.CaseFan, Manufacturer = CORSAIR, Price = 35, SellPrice = 12, LevelUnlock = 10, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 52, Size = 120, AirPressure = 1.61 }; caseFans.Add(SP120_RGB_LED);
            CaseFan QF120___Performance = new CaseFan() { Id = 76, Name = "QF120 - Performance", PartType = PartType.CaseFan, Manufacturer = Cryorig, Price = 12, SellPrice = 4, LevelUnlock = 30, LevelPercent = 1, Lighting = null, AirFlow = 83, Size = 120, AirPressure = 3.33 }; caseFans.Add(QF120___Performance);
            CaseFan QF140___Performance = new CaseFan() { Id = 77, Name = "QF140 - Performance", PartType = PartType.CaseFan, Manufacturer = Cryorig, Price = 15, SellPrice = 5, LevelUnlock = 30, LevelPercent = 1, Lighting = null, AirFlow = 128, Size = 140, AirPressure = 2.12 }; caseFans.Add(QF140___Performance);
            CaseFan XF140 = new CaseFan() { Id = 78, Name = "XF140", PartType = PartType.CaseFan, Manufacturer = Cryorig, Price = 20, SellPrice = 7, LevelUnlock = 29, LevelPercent = 1, Lighting = null, AirFlow = 76, Size = 140, AirPressure = 1.44 }; caseFans.Add(XF140);
            CaseFan XT140 = new CaseFan() { Id = 79, Name = "XT140", PartType = PartType.CaseFan, Manufacturer = Cryorig, Price = 60, SellPrice = 20, LevelUnlock = 29, LevelPercent = 1, Lighting = null, AirFlow = 65, Size = 140, AirPressure = 1.49 }; caseFans.Add(XT140);
            CaseFan RF_120 = new CaseFan() { Id = 80, Name = "RF 120", PartType = PartType.CaseFan, Manufacturer = Deepcool, Price = 20, SellPrice = 7, LevelUnlock = 14, LevelPercent = 25, Lighting = Color.RGB, AirFlow = 56.5, Size = 120, AirPressure = null }; caseFans.Add(RF_120);
            CaseFan RF_140 = new CaseFan() { Id = 81, Name = "RF 140", PartType = PartType.CaseFan, Manufacturer = Deepcool, Price = 25, SellPrice = 8, LevelUnlock = 14, LevelPercent = 25, Lighting = Color.RGB, AirFlow = 64.13, Size = 140, AirPressure = null }; caseFans.Add(RF_140);
            CaseFan EK_Vardar_EVO_120ER_RGB = new CaseFan() { Id = 82, Name = "EK-Vardar EVO 120ER RGB", PartType = PartType.CaseFan, Manufacturer = EKWB, Price = 30, SellPrice = 10, LevelUnlock = 25, LevelPercent = 30, Lighting = Color.RGB, AirFlow = 77, Size = 120, AirPressure = 3.16 }; caseFans.Add(EK_Vardar_EVO_120ER_RGB);
            CaseFan EK_Vardar_EVO_140S_BB = new CaseFan() { Id = 83, Name = "EK-Vardar EVO 140S BB", PartType = PartType.CaseFan, Manufacturer = EKWB, Price = 30, SellPrice = 10, LevelUnlock = 25, LevelPercent = 1, Lighting = null, AirFlow = 98, Size = 140, AirPressure = 3.15 }; caseFans.Add(EK_Vardar_EVO_140S_BB);
            CaseFan EK_Vardar_F4_120ER = new CaseFan() { Id = 84, Name = "EK-Vardar F4-120ER", PartType = PartType.CaseFan, Manufacturer = EKWB, Price = 25, SellPrice = 8, LevelUnlock = 25, LevelPercent = 1, Lighting = null, AirFlow = 77, Size = 120, AirPressure = 3.16 }; caseFans.Add(EK_Vardar_F4_120ER);
            CaseFan Dynamic_X2_GP_12 = new CaseFan() { Id = 85, Name = "Dynamic X2 GP-12", PartType = PartType.CaseFan, Manufacturer = Fractal_Design, Price = 13, SellPrice = 4, LevelUnlock = 21, LevelPercent = 1, Lighting = null, AirFlow = 52, Size = 120, AirPressure = 0.88 }; caseFans.Add(Dynamic_X2_GP_12);
            CaseFan Dynamic_X2_GP_12__Black_ = new CaseFan() { Id = 86, Name = "Dynamic X2 GP-12 (Black)", PartType = PartType.CaseFan, Manufacturer = Fractal_Design, Price = 13, SellPrice = 4, LevelUnlock = 21, LevelPercent = 1, Lighting = null, AirFlow = 52, Size = 120, AirPressure = 0.88 }; caseFans.Add(Dynamic_X2_GP_12__Black_);
            CaseFan Dynamic_X2_GP_12__White_ = new CaseFan() { Id = 87, Name = "Dynamic X2 GP-12 (White)", PartType = PartType.CaseFan, Manufacturer = Fractal_Design, Price = 13, SellPrice = 4, LevelUnlock = 21, LevelPercent = 1, Lighting = null, AirFlow = 52, Size = 120, AirPressure = 0.88 }; caseFans.Add(Dynamic_X2_GP_12__White_);
            CaseFan Dynamic_X2_GP_14 = new CaseFan() { Id = 88, Name = "Dynamic X2 GP-14", PartType = PartType.CaseFan, Manufacturer = Fractal_Design, Price = 15, SellPrice = 5, LevelUnlock = 21, LevelPercent = 1, Lighting = null, AirFlow = 68, Size = 140, AirPressure = 0.71 }; caseFans.Add(Dynamic_X2_GP_14);
            CaseFan Dynamic_X2_GP_14__Black_ = new CaseFan() { Id = 89, Name = "Dynamic X2 GP-14 (Black)", PartType = PartType.CaseFan, Manufacturer = Fractal_Design, Price = 15, SellPrice = 5, LevelUnlock = 21, LevelPercent = 1, Lighting = null, AirFlow = 68, Size = 140, AirPressure = 0.71 }; caseFans.Add(Dynamic_X2_GP_14__Black_);
            CaseFan Dynamic_X2_GP_14__White_ = new CaseFan() { Id = 90, Name = "Dynamic X2 GP-14 (White)", PartType = PartType.CaseFan, Manufacturer = Fractal_Design, Price = 15, SellPrice = 5, LevelUnlock = 1, LevelPercent = 1, Lighting = null, AirFlow = 68, Size = 140, AirPressure = 0.71 }; caseFans.Add(Dynamic_X2_GP_14__White_);
            CaseFan Dynamic_X2_GP_18_PWM = new CaseFan() { Id = 91, Name = "Dynamic X2 GP-18 PWM", PartType = PartType.CaseFan, Manufacturer = Fractal_Design, Price = 1, SellPrice = 0, LevelUnlock = 21, LevelPercent = 1, Lighting = null, AirFlow = 44.9, Size = 180, AirPressure = 0.4 }; caseFans.Add(Dynamic_X2_GP_18_PWM);
            CaseFan Prisma_AL_12 = new CaseFan() { Id = 92, Name = "Prisma AL-12", PartType = PartType.CaseFan, Manufacturer = Fractal_Design, Price = 25, SellPrice = 8, LevelUnlock = 24, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 50, Size = 120, AirPressure = 0.8 }; caseFans.Add(Prisma_AL_12);
            CaseFan Prisma_AL_14 = new CaseFan() { Id = 93, Name = "Prisma AL-14", PartType = PartType.CaseFan, Manufacturer = Fractal_Design, Price = 25, SellPrice = 8, LevelUnlock = 24, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 63, Size = 140, AirPressure = 0.8 }; caseFans.Add(Prisma_AL_14);
            CaseFan Prisma_AL_18_PWM = new CaseFan() { Id = 94, Name = "Prisma AL-18 PWM", PartType = PartType.CaseFan, Manufacturer = Fractal_Design, Price = 1, SellPrice = 0, LevelUnlock = 21, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 43.1, Size = 180, AirPressure = 0.44 }; caseFans.Add(Prisma_AL_18_PWM);
            CaseFan Silent_Series_LL_Blue_120mm = new CaseFan() { Id = 95, Name = "Silent Series LL Blue 120mm", PartType = PartType.CaseFan, Manufacturer = Fractal_Design, Price = 15, SellPrice = 5, LevelUnlock = 26, LevelPercent = 1, Lighting = Color.Blue, AirFlow = 41.8, Size = 120, AirPressure = 0.87 }; caseFans.Add(Silent_Series_LL_Blue_120mm);
            CaseFan Silent_Series_LL_Red_120mm = new CaseFan() { Id = 96, Name = "Silent Series LL Red 120mm", PartType = PartType.CaseFan, Manufacturer = Fractal_Design, Price = 15, SellPrice = 5, LevelUnlock = 26, LevelPercent = 1, Lighting = Color.Red, AirFlow = 41.8, Size = 120, AirPressure = 0.87 }; caseFans.Add(Silent_Series_LL_Red_120mm);
            CaseFan Silent_Series_LL_White_120mm = new CaseFan() { Id = 97, Name = "Silent Series LL White 120mm", PartType = PartType.CaseFan, Manufacturer = Fractal_Design, Price = 15, SellPrice = 5, LevelUnlock = 26, LevelPercent = 1, Lighting = Color.White, AirFlow = 41.8, Size = 120, AirPressure = 0.87 }; caseFans.Add(Silent_Series_LL_White_120mm);
            CaseFan CMT510 = new CaseFan() { Id = 98, Name = "CMT510", PartType = PartType.CaseFan, Manufacturer = FSP, Price = 15, SellPrice = 5, LevelUnlock = 14, LevelPercent = 30, Lighting = Color.RGB, AirFlow = 45, Size = 120, AirPressure = 1.5 }; caseFans.Add(CMT510);
            CaseFan CMT520 = new CaseFan() { Id = 99, Name = "CMT520", PartType = PartType.CaseFan, Manufacturer = FSP, Price = 15, SellPrice = 5, LevelUnlock = 14, LevelPercent = 30, Lighting = Color.RGB, AirFlow = 60, Size = 120, AirPressure = 1.5 }; caseFans.Add(CMT520);
            CaseFan MF120 = new CaseFan() { Id = 100, Name = "MF120", PartType = PartType.CaseFan, Manufacturer = GamerStorm, Price = 60, SellPrice = 20, LevelUnlock = 30, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 45, Size = 120, AirPressure = 1.67 }; caseFans.Add(MF120);
            CaseFan MF120_GT = new CaseFan() { Id = 101, Name = "MF120 GT", PartType = PartType.CaseFan, Manufacturer = GamerStorm, Price = 40, SellPrice = 13, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 40, Size = 120, AirPressure = 1.67 }; caseFans.Add(MF120_GT);
            CaseFan TF120S__Black_ = new CaseFan() { Id = 102, Name = "TF120S (Black)", PartType = PartType.CaseFan, Manufacturer = GamerStorm, Price = 40, SellPrice = 13, LevelUnlock = 28, LevelPercent = 1, Lighting = null, AirFlow = 40, Size = 120, AirPressure = 1.67 }; caseFans.Add(TF120S__Black_);
            CaseFan TF120S__White_ = new CaseFan() { Id = 103, Name = "TF120S (White)", PartType = PartType.CaseFan, Manufacturer = GamerStorm, Price = 40, SellPrice = 13, LevelUnlock = 28, LevelPercent = 1, Lighting = null, AirFlow = 40, Size = 120, AirPressure = 1.67 }; caseFans.Add(TF120S__White_);
            CaseFan CROWN_AC120 = new CaseFan() { Id = 104, Name = "CROWN AC120", PartType = PartType.CaseFan, Manufacturer = InWin, Price = 20, SellPrice = 7, LevelUnlock = 24, LevelPercent = 30, Lighting = Color.RGB, AirFlow = 60, Size = 120, AirPressure = 2.24 }; caseFans.Add(CROWN_AC120);
            CaseFan CROWN_AC140 = new CaseFan() { Id = 105, Name = "CROWN AC140", PartType = PartType.CaseFan, Manufacturer = InWin, Price = 30, SellPrice = 10, LevelUnlock = 24, LevelPercent = 30, Lighting = Color.RGB, AirFlow = 70, Size = 140, AirPressure = 2.64 }; caseFans.Add(CROWN_AC140);
            CaseFan EGO_AE120 = new CaseFan() { Id = 106, Name = "EGO AE120", PartType = PartType.CaseFan, Manufacturer = InWin, Price = 30, SellPrice = 10, LevelUnlock = 25, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 60, Size = 120, AirPressure = 2.24 }; caseFans.Add(EGO_AE120);
            CaseFan Luna_AL120 = new CaseFan() { Id = 107, Name = "Luna AL120", PartType = PartType.CaseFan, Manufacturer = InWin, Price = 20, SellPrice = 7, LevelUnlock = 30, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 60, Size = 120, AirPressure = 2.31 }; caseFans.Add(Luna_AL120);
            CaseFan Polaris_LED__Blue_ = new CaseFan() { Id = 108, Name = "Polaris LED (Blue)", PartType = PartType.CaseFan, Manufacturer = InWin, Price = 25, SellPrice = 8, LevelUnlock = 24, LevelPercent = 1, Lighting = Color.Blue, AirFlow = 60, Size = 120, AirPressure = 2.24 }; caseFans.Add(Polaris_LED__Blue_);
            CaseFan Polaris_LED__Green_ = new CaseFan() { Id = 109, Name = "Polaris LED (Green)", PartType = PartType.CaseFan, Manufacturer = InWin, Price = 25, SellPrice = 8, LevelUnlock = 24, LevelPercent = 1, Lighting = Color.Green, AirFlow = 60, Size = 120, AirPressure = 2.24 }; caseFans.Add(Polaris_LED__Green_);
            CaseFan Polaris_LED__Red_ = new CaseFan() { Id = 110, Name = "Polaris LED (Red)", PartType = PartType.CaseFan, Manufacturer = InWin, Price = 25, SellPrice = 8, LevelUnlock = 24, LevelPercent = 1, Lighting = Color.Red, AirFlow = 60, Size = 120, AirPressure = 2.24 }; caseFans.Add(Polaris_LED__Red_);
            CaseFan Polaris_LED__White_ = new CaseFan() { Id = 111, Name = "Polaris LED (White)", PartType = PartType.CaseFan, Manufacturer = InWin, Price = 25, SellPrice = 8, LevelUnlock = 24, LevelPercent = 1, Lighting = Color.White, AirFlow = 60, Size = 120, AirPressure = 2.24 }; caseFans.Add(Polaris_LED__White_);
            CaseFan Polaris_RGB = new CaseFan() { Id = 112, Name = "Polaris RGB", PartType = PartType.CaseFan, Manufacturer = InWin, Price = 40, SellPrice = 13, LevelUnlock = 24, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 60, Size = 120, AirPressure = 2.24 }; caseFans.Add(Polaris_RGB);
            CaseFan Polaris_RGB_Aluminium = new CaseFan() { Id = 113, Name = "Polaris RGB Aluminium", PartType = PartType.CaseFan, Manufacturer = InWin, Price = 50, SellPrice = 17, LevelUnlock = 24, LevelPercent = 50, Lighting = Color.RGB, AirFlow = 60, Size = 120, AirPressure = 2.24 }; caseFans.Add(Polaris_RGB_Aluminium);
            CaseFan Saturn_ASN120 = new CaseFan() { Id = 114, Name = "Saturn ASN120", PartType = PartType.CaseFan, Manufacturer = InWin, Price = 10, SellPrice = 3, LevelUnlock = 20, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 50, Size = 120, AirPressure = 2 }; caseFans.Add(Saturn_ASN120);
            CaseFan Sirius_Loop_ASL120 = new CaseFan() { Id = 115, Name = "Sirius Loop ASL120", PartType = PartType.CaseFan, Manufacturer = InWin, Price = 12, SellPrice = 4, LevelUnlock = 24, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 60, Size = 120, AirPressure = 2.24 }; caseFans.Add(Sirius_Loop_ASL120);
            CaseFan Fan_120 = new CaseFan() { Id = 116, Name = "Fan 120", PartType = PartType.CaseFan, Manufacturer = Kolink, Price = 11, SellPrice = 4, LevelUnlock = 1, LevelPercent = 1, Lighting = null, AirFlow = 60, Size = 120, AirPressure = 1.61 }; caseFans.Add(Fan_120);
            CaseFan Bora_Digital_ARGB__Black_ = new CaseFan() { Id = 117, Name = "Bora Digital ARGB (Black)", PartType = PartType.CaseFan, Manufacturer = Lian_Li, Price = 20, SellPrice = 7, LevelUnlock = 15, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 57.97, Size = 120, AirPressure = 1.46 }; caseFans.Add(Bora_Digital_ARGB__Black_);
            CaseFan Bora_Digital_ARGB__Silver_ = new CaseFan() { Id = 118, Name = "Bora Digital ARGB (Silver)", PartType = PartType.CaseFan, Manufacturer = Lian_Li, Price = 20, SellPrice = 7, LevelUnlock = 15, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 57.97, Size = 120, AirPressure = 1.46 }; caseFans.Add(Bora_Digital_ARGB__Silver_);
            CaseFan Bora_Digital_ARGB__Space_Grey_ = new CaseFan() { Id = 119, Name = "Bora Digital ARGB (Space Grey)", PartType = PartType.CaseFan, Manufacturer = Lian_Li, Price = 20, SellPrice = 7, LevelUnlock = 15, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 57.97, Size = 120, AirPressure = 1.46 }; caseFans.Add(Bora_Digital_ARGB__Space_Grey_);
            CaseFan Heat_Away_120 = new CaseFan() { Id = 120, Name = "Heat Away 120", PartType = PartType.CaseFan, Manufacturer = Mortoni, Price = 7, SellPrice = 2, LevelUnlock = 1, LevelPercent = 1, Lighting = null, AirFlow = 40, Size = 120, AirPressure = 1.61 }; caseFans.Add(Heat_Away_120);
            CaseFan Heat_Away_140 = new CaseFan() { Id = 121, Name = "Heat Away 140", PartType = PartType.CaseFan, Manufacturer = Mortoni, Price = 7, SellPrice = 2, LevelUnlock = 1, LevelPercent = 1, Lighting = null, AirFlow = 60, Size = 140, AirPressure = 1.61 }; caseFans.Add(Heat_Away_140);
            CaseFan Heat_Away_90 = new CaseFan() { Id = 122, Name = "Heat Away 90", PartType = PartType.CaseFan, Manufacturer = Mortoni, Price = 5, SellPrice = 2, LevelUnlock = 1, LevelPercent = 1, Lighting = null, AirFlow = 25, Size = 90, AirPressure = 1.2 }; caseFans.Add(Heat_Away_90);
            CaseFan Heat_Away_Pro_RGB_120 = new CaseFan() { Id = 123, Name = "Heat Away Pro RGB 120", PartType = PartType.CaseFan, Manufacturer = Mortoni, Price = 12, SellPrice = 4, LevelUnlock = 10, LevelPercent = 50, Lighting = Color.RGB, AirFlow = 42, Size = 120, AirPressure = 1.2 }; caseFans.Add(Heat_Away_Pro_RGB_120);
            CaseFan Heat_Away_RGB_120 = new CaseFan() { Id = 124, Name = "Heat Away RGB 120", PartType = PartType.CaseFan, Manufacturer = Mortoni, Price = 10, SellPrice = 3, LevelUnlock = 10, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 40, Size = 120, AirPressure = 1.61 }; caseFans.Add(Heat_Away_RGB_120);
            CaseFan Heat_Away_RGB_140 = new CaseFan() { Id = 125, Name = "Heat Away RGB 140", PartType = PartType.CaseFan, Manufacturer = Mortoni, Price = 10, SellPrice = 3, LevelUnlock = 10, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 60, Size = 140, AirPressure = 1.61 }; caseFans.Add(Heat_Away_RGB_140);
            CaseFan N20mm = new CaseFan() { Id = 126, Name = "120mm", PartType = PartType.CaseFan, Manufacturer = MSI, Price = 40, SellPrice = 13, LevelUnlock = 8, LevelPercent = 1, Lighting = null, AirFlow = 50, Size = 120, AirPressure = 2 }; caseFans.Add(N20mm);
            CaseFan N20mm_ARGB__Black_Logo_ = new CaseFan() { Id = 127, Name = "120mm ARGB (Black Logo)", PartType = PartType.CaseFan, Manufacturer = MSI, Price = 20, SellPrice = 7, LevelUnlock = 8, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 50, Size = 120, AirPressure = 2 }; caseFans.Add(N20mm_ARGB__Black_Logo_);
            CaseFan N20mm_ARGB__Silver_Logo_ = new CaseFan() { Id = 128, Name = "120mm ARGB (Silver Logo)", PartType = PartType.CaseFan, Manufacturer = MSI, Price = 20, SellPrice = 7, LevelUnlock = 8, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 50, Size = 120, AirPressure = 2 }; caseFans.Add(N20mm_ARGB__Silver_Logo_);
            CaseFan N20mm_RGB = new CaseFan() { Id = 129, Name = "120mm RGB", PartType = PartType.CaseFan, Manufacturer = MSI, Price = 40, SellPrice = 13, LevelUnlock = 8, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 50, Size = 120, AirPressure = 2 }; caseFans.Add(N20mm_RGB);
            CaseFan N00mm = new CaseFan() { Id = 130, Name = "200mm", PartType = PartType.CaseFan, Manufacturer = MSI, Price = 40, SellPrice = 13, LevelUnlock = 8, LevelPercent = 1, Lighting = null, AirFlow = 90, Size = 200, AirPressure = 2 }; caseFans.Add(N00mm);
            CaseFan MAG_MAX_F20A_1 = new CaseFan() { Id = 131, Name = "MAG MAX F20A-1", PartType = PartType.CaseFan, Manufacturer = MSI, Price = 40, SellPrice = 13, LevelUnlock = 8, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 90, Size = 200, AirPressure = 2 }; caseFans.Add(MAG_MAX_F20A_1);
            CaseFan Aer_P_120mm__Black_ = new CaseFan() { Id = 132, Name = "Aer P 120mm (Black)", PartType = PartType.CaseFan, Manufacturer = NZXT, Price = 17, SellPrice = 6, LevelUnlock = 9, LevelPercent = 1, Lighting = null, AirFlow = 73, Size = 120, AirPressure = 2.93 }; caseFans.Add(Aer_P_120mm__Black_);
            CaseFan Aer_P_120mm__Blue_ = new CaseFan() { Id = 133, Name = "Aer P 120mm (Blue)", PartType = PartType.CaseFan, Manufacturer = NZXT, Price = 17, SellPrice = 6, LevelUnlock = 9, LevelPercent = 1, Lighting = null, AirFlow = 73, Size = 120, AirPressure = 2.93 }; caseFans.Add(Aer_P_120mm__Blue_);
            CaseFan Aer_P_120mm__Red_ = new CaseFan() { Id = 134, Name = "Aer P 120mm (Red)", PartType = PartType.CaseFan, Manufacturer = NZXT, Price = 17, SellPrice = 6, LevelUnlock = 9, LevelPercent = 1, Lighting = null, AirFlow = 73, Size = 120, AirPressure = 2.93 }; caseFans.Add(Aer_P_120mm__Red_);
            CaseFan Aer_P_120mm__White_ = new CaseFan() { Id = 135, Name = "Aer P 120mm (White)", PartType = PartType.CaseFan, Manufacturer = NZXT, Price = 17, SellPrice = 6, LevelUnlock = 9, LevelPercent = 1, Lighting = null, AirFlow = 73, Size = 120, AirPressure = 2.93 }; caseFans.Add(Aer_P_120mm__White_);
            CaseFan Aer_P_140mm__Black_ = new CaseFan() { Id = 136, Name = "Aer P 140mm (Black)", PartType = PartType.CaseFan, Manufacturer = NZXT, Price = 17, SellPrice = 6, LevelUnlock = 9, LevelPercent = 1, Lighting = null, AirFlow = 98, Size = 140, AirPressure = 2.71 }; caseFans.Add(Aer_P_140mm__Black_);
            CaseFan Aer_P_140mm__Blue_ = new CaseFan() { Id = 137, Name = "Aer P 140mm (Blue)", PartType = PartType.CaseFan, Manufacturer = NZXT, Price = 17, SellPrice = 6, LevelUnlock = 9, LevelPercent = 1, Lighting = null, AirFlow = 98, Size = 140, AirPressure = 2.71 }; caseFans.Add(Aer_P_140mm__Blue_);
            CaseFan Aer_P_140mm__Red_ = new CaseFan() { Id = 138, Name = "Aer P 140mm (Red)", PartType = PartType.CaseFan, Manufacturer = NZXT, Price = 17, SellPrice = 6, LevelUnlock = 9, LevelPercent = 1, Lighting = null, AirFlow = 98, Size = 140, AirPressure = 2.71 }; caseFans.Add(Aer_P_140mm__Red_);
            CaseFan Aer_P_140mm__White_ = new CaseFan() { Id = 139, Name = "Aer P 140mm (White)", PartType = PartType.CaseFan, Manufacturer = NZXT, Price = 17, SellPrice = 6, LevelUnlock = 9, LevelPercent = 1, Lighting = null, AirFlow = 98, Size = 140, AirPressure = 2.71 }; caseFans.Add(Aer_P_140mm__White_);
            CaseFan IRIS_12 = new CaseFan() { Id = 140, Name = "IRIS 12", PartType = PartType.CaseFan, Manufacturer = Raijintek, Price = 20, SellPrice = 7, LevelUnlock = 10, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 42, Size = 120, AirPressure = 1.7 }; caseFans.Add(IRIS_12);
            CaseFan IRIS_14_RBW_ADD = new CaseFan() { Id = 141, Name = "IRIS 14 RBW ADD", PartType = PartType.CaseFan, Manufacturer = Raijintek, Price = 25, SellPrice = 8, LevelUnlock = 10, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 70, Size = 140, AirPressure = 2.56 }; caseFans.Add(IRIS_14_RBW_ADD);
            CaseFan MACULA_12_RAINBOW_RGB = new CaseFan() { Id = 142, Name = "MACULA 12 RAINBOW RGB", PartType = PartType.CaseFan, Manufacturer = Raijintek, Price = 30, SellPrice = 10, LevelUnlock = 12, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 45, Size = 120, AirPressure = 1.7 }; caseFans.Add(MACULA_12_RAINBOW_RGB);
            CaseFan SKLERA_12_RBW_ADD = new CaseFan() { Id = 143, Name = "SKLERA 12 RBW ADD", PartType = PartType.CaseFan, Manufacturer = Raijintek, Price = 30, SellPrice = 10, LevelUnlock = 12, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 45, Size = 120, AirPressure = 1.7 }; caseFans.Add(SKLERA_12_RBW_ADD);
            CaseFan Air_Blazer_120R = new CaseFan() { Id = 144, Name = "Air Blazer 120R", PartType = PartType.CaseFan, Manufacturer = SilverStone, Price = 35, SellPrice = 12, LevelUnlock = 34, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 60, Size = 120, AirPressure = 3.53 }; caseFans.Add(Air_Blazer_120R);
            CaseFan Air_Blazer_120RW = new CaseFan() { Id = 145, Name = "Air Blazer 120RW", PartType = PartType.CaseFan, Manufacturer = SilverStone, Price = 35, SellPrice = 12, LevelUnlock = 34, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 60, Size = 120, AirPressure = 3.53 }; caseFans.Add(Air_Blazer_120RW);
            CaseFan AP182__Black_ = new CaseFan() { Id = 146, Name = "AP182 (Black)", PartType = PartType.CaseFan, Manufacturer = SilverStone, Price = 40, SellPrice = 13, LevelUnlock = 1, LevelPercent = 1, Lighting = null, AirFlow = 150, Size = 180, AirPressure = 6.1 }; caseFans.Add(AP182__Black_);
            CaseFan AP182__White_ = new CaseFan() { Id = 147, Name = "AP182 (White)", PartType = PartType.CaseFan, Manufacturer = SilverStone, Price = 40, SellPrice = 13, LevelUnlock = 1, LevelPercent = 1, Lighting = null, AirFlow = 150, Size = 180, AirPressure = 6.1 }; caseFans.Add(AP182__White_);
            CaseFan Pure_Plus_12_LED_RGB = new CaseFan() { Id = 148, Name = "Pure Plus 12 LED RGB", PartType = PartType.CaseFan, Manufacturer = Thermaltake, Price = 20, SellPrice = 7, LevelUnlock = 28, LevelPercent = 20, Lighting = Color.RGB, AirFlow = 56.45, Size = 120, AirPressure = 1.59 }; caseFans.Add(Pure_Plus_12_LED_RGB);
            CaseFan Riing_Plus_12_LED_RGB = new CaseFan() { Id = 149, Name = "Riing Plus 12 LED RGB", PartType = PartType.CaseFan, Manufacturer = Thermaltake, Price = 20, SellPrice = 7, LevelUnlock = 28, LevelPercent = 20, Lighting = Color.RGB, AirFlow = 48.34, Size = 120, AirPressure = 1.54 }; caseFans.Add(Riing_Plus_12_LED_RGB);
            CaseFan Riing_Plus_14_LED_RGB = new CaseFan() { Id = 150, Name = "Riing Plus 14 LED RGB", PartType = PartType.CaseFan, Manufacturer = Thermaltake, Price = 25, SellPrice = 8, LevelUnlock = 28, LevelPercent = 20, Lighting = Color.RGB, AirFlow = 63.19, Size = 140, AirPressure = 1.53 }; caseFans.Add(Riing_Plus_14_LED_RGB);
            #endregion
            _context.CaseFan.AddRange(caseFans);
            #region Case
            List<Case> cases = new List<Case>();
            Case XPG_Battlecruiser__Black_ = new Case() { Id = 1, Name = "XPG Battlecruiser (Black)", PartType = PartType.Case, Manufacturer = ADATA, Price = 180, SellPrice = 60, LevelUnlock = 28, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 225, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_RGB_120, Heat_Away_RGB_120, Heat_Away_RGB_120, Heat_Away_RGB_120 }, InherentCooling = 0 }; cases.Add(XPG_Battlecruiser__Black_);
            Case XPG_Battlecruiser__White_ = new Case() { Id = 2, Name = "XPG Battlecruiser (White)", PartType = PartType.Case, Manufacturer = ADATA, Price = 180, SellPrice = 60, LevelUnlock = 28, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 225, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_RGB_120, Heat_Away_RGB_120, Heat_Away_RGB_120, Heat_Away_RGB_120 }, InherentCooling = 0 }; cases.Add(XPG_Battlecruiser__White_);
            Case XPG_Defender_Pro__Black_ = new Case() { Id = 3, Name = "XPG Defender Pro (Black)", PartType = PartType.Case, Manufacturer = ADATA, Price = 140, SellPrice = 47, LevelUnlock = 31, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, SSI_EEB }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 220, MaxGPULength = 380, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { XPG_VENTO_120, XPG_VENTO_120, XPG_VENTO_120 }, InherentCooling = 0 }; cases.Add(XPG_Defender_Pro__Black_);
            Case XPG_Defender_Pro__White_ = new Case() { Id = 4, Name = "XPG Defender Pro (White)", PartType = PartType.Case, Manufacturer = ADATA, Price = 140, SellPrice = 47, LevelUnlock = 31, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, SSI_EEB }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 220, MaxGPULength = 380, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { XPG_VENTO_120, XPG_VENTO_120, XPG_VENTO_120 }, InherentCooling = 0 }; cases.Add(XPG_Defender_Pro__White_);
            Case Dark_Avenger_DA601 = new Case() { Id = 5, Name = "Dark Avenger DA601", PartType = PartType.Case, Manufacturer = Antec, Price = 85, SellPrice = 28, LevelUnlock = 6, LevelPercent = 50, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 400, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Prizm_120_ARGB }, InherentCooling = 0 }; cases.Add(Dark_Avenger_DA601);
            Case DF500 = new Case() { Id = 6, Name = "DF500", PartType = PartType.Case, Manufacturer = Antec, Price = 60, SellPrice = 20, LevelUnlock = 1, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 0, MaxPsuLength = 200, MaxGPULength = 380, MaxCPUFanHeight = 155, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(DF500);
            Case P110_Luce = new Case() { Id = 7, Name = "P110 Luce", PartType = PartType.Case, Manufacturer = Antec, Price = 105, SellPrice = 35, LevelUnlock = 14, LevelPercent = 48, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 390, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(P110_Luce);
            Case P120_Crystal = new Case() { Id = 8, Name = "P120 Crystal", PartType = PartType.Case, Manufacturer = Antec, Price = 100, SellPrice = 33, LevelUnlock = 5, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 294, MaxGPULength = 450, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(P120_Crystal);
            Case P6 = new Case() { Id = 9, Name = "P6", PartType = PartType.Case, Manufacturer = Antec, Price = 85, SellPrice = 28, LevelUnlock = 13, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 1, MaxPsuLength = 160, MaxGPULength = 390, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(P6);
            Case P8 = new Case() { Id = 10, Name = "P8", PartType = PartType.Case, Manufacturer = Antec, Price = 85, SellPrice = 28, LevelUnlock = 13, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 240, MaxGPULength = 390, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(P8);
            Case ROG_Strix_Helios = new Case() { Id = 11, Name = "ROG Strix Helios", PartType = PartType.Case, Manufacturer = ASUS, Price = 330, SellPrice = 110, LevelUnlock = 33, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 220, MaxGPULength = 450, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_140, Heat_Away_140, Heat_Away_140 }, InherentCooling = 0 }; cases.Add(ROG_Strix_Helios);
            Case Dark_Base_700__Black_ = new Case() { Id = 12, Name = "Dark Base 700 (Black)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 180, SellPrice = 60, LevelUnlock = 25, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 285, MaxGPULength = 430, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Silent_Wings_3_140mm, Silent_Wings_3_140mm, Silent_Wings_3_140mm }, RestrictedGpuLength = 286, InherentCooling = 0 }; cases.Add(Dark_Base_700__Black_);
            Case Dark_Base_700__White_ = new Case() { Id = 13, Name = "Dark Base 700 (White)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 180, SellPrice = 60, LevelUnlock = 25, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 285, MaxGPULength = 430, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Silent_Wings_3_140mm, Silent_Wings_3_140mm, Silent_Wings_3_140mm }, RestrictedGpuLength = 286, InherentCooling = 0 }; cases.Add(Dark_Base_700__White_);
            Case Dark_Base_900__Black_ = new Case() { Id = 14, Name = "Dark Base 900 (Black)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 200, SellPrice = 67, LevelUnlock = 25, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Full_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 3, MaxPsuLength = 284, MaxGPULength = 472, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Silent_Wings_3_140mm, Silent_Wings_3_140mm, Silent_Wings_3_140mm }, RestrictedGpuLength = 323, InherentCooling = 0 }; cases.Add(Dark_Base_900__Black_);
            Case Dark_Base_900__Orange_ = new Case() { Id = 15, Name = "Dark Base 900 (Orange)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 200, SellPrice = 67, LevelUnlock = 25, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Full_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 3, MaxPsuLength = 284, MaxGPULength = 472, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Silent_Wings_3_140mm, Silent_Wings_3_140mm, Silent_Wings_3_140mm }, RestrictedGpuLength = 323, InherentCooling = 0 }; cases.Add(Dark_Base_900__Orange_);
            Case Dark_Base_900__Silver_ = new Case() { Id = 16, Name = "Dark Base 900 (Silver)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 200, SellPrice = 67, LevelUnlock = 25, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Full_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 3, MaxPsuLength = 284, MaxGPULength = 472, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Silent_Wings_3_140mm, Silent_Wings_3_140mm, Silent_Wings_3_140mm }, RestrictedGpuLength = 323, InherentCooling = 0 }; cases.Add(Dark_Base_900__Silver_);
            Case Dark_Base_Pro_900_rev__2__Black_ = new Case() { Id = 17, Name = "Dark Base Pro 900 rev. 2 (Black)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 280, SellPrice = 93, LevelUnlock = 26, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Full_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 284, MaxGPULength = 472, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Silent_Wings_3_140mm, Silent_Wings_3_140mm, Silent_Wings_3_140mm }, RestrictedGpuLength = 323, InherentCooling = 0 }; cases.Add(Dark_Base_Pro_900_rev__2__Black_);
            Case Dark_Base_Pro_900_rev__2__Orange_ = new Case() { Id = 18, Name = "Dark Base Pro 900 rev. 2 (Orange)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 280, SellPrice = 93, LevelUnlock = 26, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Full_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 284, MaxGPULength = 472, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Silent_Wings_3_140mm, Silent_Wings_3_140mm, Silent_Wings_3_140mm }, RestrictedGpuLength = 323, InherentCooling = 0 }; cases.Add(Dark_Base_Pro_900_rev__2__Orange_);
            Case Dark_Base_Pro_900_rev__2__Silver_ = new Case() { Id = 19, Name = "Dark Base Pro 900 rev. 2 (Silver)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 280, SellPrice = 93, LevelUnlock = 26, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Full_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 284, MaxGPULength = 472, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Silent_Wings_3_140mm, Silent_Wings_3_140mm, Silent_Wings_3_140mm }, RestrictedGpuLength = 323, InherentCooling = 0 }; cases.Add(Dark_Base_Pro_900_rev__2__Silver_);
            Case Pure_Base_500__Black_Window_ = new Case() { Id = 20, Name = "Pure Base 500 (Black Window)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 80, SellPrice = 27, LevelUnlock = 17, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 258, MaxGPULength = 369, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 323, InherentCooling = 0 }; cases.Add(Pure_Base_500__Black_Window_);
            Case Pure_Base_500__Black_ = new Case() { Id = 21, Name = "Pure Base 500 (Black)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 70, SellPrice = 23, LevelUnlock = 17, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 258, MaxGPULength = 369, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 323, InherentCooling = 0 }; cases.Add(Pure_Base_500__Black_);
            Case Pure_Base_500__Metallic_Grey_Window_ = new Case() { Id = 22, Name = "Pure Base 500 (Metallic Grey Window)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 80, SellPrice = 27, LevelUnlock = 17, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 258, MaxGPULength = 369, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 323, InherentCooling = 0 }; cases.Add(Pure_Base_500__Metallic_Grey_Window_);
            Case Pure_Base_500__Metallic_Grey_ = new Case() { Id = 23, Name = "Pure Base 500 (Metallic Grey)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 70, SellPrice = 23, LevelUnlock = 17, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 258, MaxGPULength = 369, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 323, InherentCooling = 0 }; cases.Add(Pure_Base_500__Metallic_Grey_);
            Case Pure_Base_500__White_Window_ = new Case() { Id = 24, Name = "Pure Base 500 (White Window)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 80, SellPrice = 27, LevelUnlock = 17, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 258, MaxGPULength = 369, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 323, InherentCooling = 0 }; cases.Add(Pure_Base_500__White_Window_);
            Case Pure_Base_500__White_ = new Case() { Id = 25, Name = "Pure Base 500 (White)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 70, SellPrice = 23, LevelUnlock = 17, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 258, MaxGPULength = 369, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 323, InherentCooling = 0 }; cases.Add(Pure_Base_500__White_);
            Case Pure_Base_500DX__Black_ = new Case() { Id = 26, Name = "Pure Base 500DX (Black)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 100, SellPrice = 33, LevelUnlock = 17, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 258, MaxGPULength = 369, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 323, InherentCooling = 0 }; cases.Add(Pure_Base_500DX__Black_);
            Case Pure_Base_500DX__White_ = new Case() { Id = 27, Name = "Pure Base 500DX (White)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 100, SellPrice = 33, LevelUnlock = 17, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 258, MaxGPULength = 369, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 323, InherentCooling = 0 }; cases.Add(Pure_Base_500DX__White_);
            Case Pure_Base_600__Black_ = new Case() { Id = 28, Name = "Pure Base 600 (Black)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 90, SellPrice = 30, LevelUnlock = 15, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 210, MaxGPULength = 425, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_120mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 280, InherentCooling = 0 }; cases.Add(Pure_Base_600__Black_);
            Case Pure_Base_600__Silver_ = new Case() { Id = 29, Name = "Pure Base 600 (Silver)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 90, SellPrice = 30, LevelUnlock = 15, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 210, MaxGPULength = 425, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_120mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 280, InherentCooling = 0 }; cases.Add(Pure_Base_600__Silver_);
            Case Pure_Base_600_Window__Black_ = new Case() { Id = 30, Name = "Pure Base 600 Window (Black)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 90, SellPrice = 30, LevelUnlock = 15, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 210, MaxGPULength = 425, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_120mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 280, InherentCooling = 0 }; cases.Add(Pure_Base_600_Window__Black_);
            Case Pure_Base_600_Window__Orange_ = new Case() { Id = 31, Name = "Pure Base 600 Window (Orange)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 90, SellPrice = 30, LevelUnlock = 15, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 210, MaxGPULength = 425, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_120mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 280, InherentCooling = 0 }; cases.Add(Pure_Base_600_Window__Orange_);
            Case Silent_Base_600__Black_ = new Case() { Id = 32, Name = "Silent Base 600 (Black)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 60, SellPrice = 20, LevelUnlock = 11, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 1, MaxPsuLength = 290, MaxGPULength = 413, MaxCPUFanHeight = 167, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_120mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(Silent_Base_600__Black_);
            Case Silent_Base_600__Green_ = new Case() { Id = 33, Name = "Silent Base 600 (Green)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 60, SellPrice = 20, LevelUnlock = 11, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 1, MaxPsuLength = 290, MaxGPULength = 413, MaxCPUFanHeight = 167, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_120mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(Silent_Base_600__Green_);
            Case Silent_Base_600__Orange_ = new Case() { Id = 34, Name = "Silent Base 600 (Orange)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 60, SellPrice = 20, LevelUnlock = 11, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 1, MaxPsuLength = 290, MaxGPULength = 413, MaxCPUFanHeight = 167, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_120mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(Silent_Base_600__Orange_);
            Case Silent_Base_600__Red_ = new Case() { Id = 35, Name = "Silent Base 600 (Red)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 60, SellPrice = 20, LevelUnlock = 11, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 1, MaxPsuLength = 290, MaxGPULength = 413, MaxCPUFanHeight = 167, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_120mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(Silent_Base_600__Red_);
            Case Silent_Base_600__Silver_ = new Case() { Id = 36, Name = "Silent Base 600 (Silver)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 60, SellPrice = 20, LevelUnlock = 11, LevelPercent = 10, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 1, MaxPsuLength = 290, MaxGPULength = 413, MaxCPUFanHeight = 167, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_120mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(Silent_Base_600__Silver_);
            Case Silent_Base_600_Window__Black_ = new Case() { Id = 37, Name = "Silent Base 600 Window (Black)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 60, SellPrice = 20, LevelUnlock = 12, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 1, MaxPsuLength = 290, MaxGPULength = 413, MaxCPUFanHeight = 167, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_120mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(Silent_Base_600_Window__Black_);
            Case Silent_Base_600_Window__Green_ = new Case() { Id = 38, Name = "Silent Base 600 Window (Green)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 60, SellPrice = 20, LevelUnlock = 12, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 1, MaxPsuLength = 290, MaxGPULength = 413, MaxCPUFanHeight = 167, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_120mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(Silent_Base_600_Window__Green_);
            Case Silent_Base_600_Window__Orange_ = new Case() { Id = 39, Name = "Silent Base 600 Window (Orange)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 60, SellPrice = 20, LevelUnlock = 12, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 1, MaxPsuLength = 290, MaxGPULength = 413, MaxCPUFanHeight = 167, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_120mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(Silent_Base_600_Window__Orange_);
            Case Silent_Base_600_Window__Red_ = new Case() { Id = 40, Name = "Silent Base 600 Window (Red)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 60, SellPrice = 20, LevelUnlock = 12, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 1, MaxPsuLength = 290, MaxGPULength = 413, MaxCPUFanHeight = 167, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_120mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(Silent_Base_600_Window__Red_);
            Case Silent_Base_600_Window__Silver_ = new Case() { Id = 41, Name = "Silent Base 600 Window (Silver)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 60, SellPrice = 20, LevelUnlock = 12, LevelPercent = 10, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 1, MaxPsuLength = 290, MaxGPULength = 413, MaxCPUFanHeight = 167, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_120mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(Silent_Base_600_Window__Silver_);
            Case Silent_Base_601__Black_ = new Case() { Id = 42, Name = "Silent Base 601 (Black)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 120, SellPrice = 40, LevelUnlock = 22, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_601__Black_);
            Case Silent_Base_601__Orange_ = new Case() { Id = 43, Name = "Silent Base 601 (Orange)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 120, SellPrice = 40, LevelUnlock = 22, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_601__Orange_);
            Case Silent_Base_601__Red_ = new Case() { Id = 44, Name = "Silent Base 601 (Red)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 120, SellPrice = 40, LevelUnlock = 22, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_601__Red_);
            Case Silent_Base_601__Silver_ = new Case() { Id = 45, Name = "Silent Base 601 (Silver)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 120, SellPrice = 40, LevelUnlock = 22, LevelPercent = 10, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_601__Silver_);
            Case Silent_Base_601_Window__Black_ = new Case() { Id = 46, Name = "Silent Base 601 Window (Black)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 120, SellPrice = 40, LevelUnlock = 22, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_601_Window__Black_);
            Case Silent_Base_601_Window__Orange_ = new Case() { Id = 47, Name = "Silent Base 601 Window (Orange)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 120, SellPrice = 40, LevelUnlock = 22, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_601_Window__Orange_);
            Case Silent_Base_601_Window__Red_ = new Case() { Id = 48, Name = "Silent Base 601 Window (Red)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 120, SellPrice = 40, LevelUnlock = 22, LevelPercent = 90, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_601_Window__Red_);
            Case Silent_Base_601_Window__Silver_ = new Case() { Id = 49, Name = "Silent Base 601 Window (Silver)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 120, SellPrice = 40, LevelUnlock = 22, LevelPercent = 70, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_601_Window__Silver_);
            Case Silent_Base_801__Black_ = new Case() { Id = 50, Name = "Silent Base 801 (Black)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 160, SellPrice = 53, LevelUnlock = 24, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_801__Black_);
            Case Silent_Base_801__Orange_ = new Case() { Id = 51, Name = "Silent Base 801 (Orange)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 160, SellPrice = 53, LevelUnlock = 24, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_801__Orange_);
            Case Silent_Base_801__Red_ = new Case() { Id = 52, Name = "Silent Base 801 (Red)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 160, SellPrice = 53, LevelUnlock = 24, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_801__Red_);
            Case Silent_Base_801__Silver_ = new Case() { Id = 53, Name = "Silent Base 801 (Silver)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 160, SellPrice = 53, LevelUnlock = 24, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_801__Silver_);
            Case Silent_Base_801_Window__Black_ = new Case() { Id = 54, Name = "Silent Base 801 Window (Black)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 160, SellPrice = 53, LevelUnlock = 24, LevelPercent = 70, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_801_Window__Black_);
            Case Silent_Base_801_Window__Orange_ = new Case() { Id = 55, Name = "Silent Base 801 Window (Orange)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 160, SellPrice = 53, LevelUnlock = 24, LevelPercent = 70, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_801_Window__Orange_);
            Case Silent_Base_801_Window__Red_ = new Case() { Id = 56, Name = "Silent Base 801 Window (Red)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 160, SellPrice = 53, LevelUnlock = 24, LevelPercent = 90, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_801_Window__Red_);
            Case Silent_Base_801_Window__Silver_ = new Case() { Id = 57, Name = "Silent Base 801 Window (Silver)", PartType = PartType.Case, Manufacturer = be_quiet_, Price = 160, SellPrice = 53, LevelUnlock = 24, LevelPercent = 90, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 288, MaxGPULength = 449, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Pure_Wings_2_140mm, Pure_Wings_2_140mm, Pure_Wings_2_140mm }, RestrictedGpuLength = 287, InherentCooling = 0 }; cases.Add(Silent_Base_801_Window__Silver_);
            Case COSMOS_C700P = new Case() { Id = 58, Name = "COSMOS C700P", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 300, SellPrice = 100, LevelUnlock = 3, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Full_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 490, MaxCPUFanHeight = 198, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_140, Heat_Away_140 }, RestrictedGpuLength = 320, InherentCooling = 0 }; cases.Add(COSMOS_C700P);
            Case MasterBox_5__White_ = new Case() { Id = 59, Name = "MasterBox 5 (White)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 80, SellPrice = 27, LevelUnlock = 1, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 410, MaxCPUFanHeight = 167, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(MasterBox_5__White_);
            Case MasterBox_5_MSI_Edition = new Case() { Id = 60, Name = "MasterBox 5 MSI Edition", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 100, SellPrice = 33, LevelUnlock = 15, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 410, MaxCPUFanHeight = 167, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(MasterBox_5_MSI_Edition);
            Case MasterBox_NR200P__Black_Window_ = new Case() { Id = 61, Name = "MasterBox NR200P (Black Window)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 130, SellPrice = 43, LevelUnlock = 32, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__Black_Window_);
            Case MasterBox_NR200P__Black_ = new Case() { Id = 62, Name = "MasterBox NR200P (Black)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 130, SellPrice = 43, LevelUnlock = 32, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__Black_);
            Case MasterBox_NR200P__Blue_Window_ = new Case() { Id = 63, Name = "MasterBox NR200P (Blue Window)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 180, SellPrice = 60, LevelUnlock = 32, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__Blue_Window_);
            Case MasterBox_NR200P__Blue_ = new Case() { Id = 64, Name = "MasterBox NR200P (Blue)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 180, SellPrice = 60, LevelUnlock = 32, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__Blue_);
            Case MasterBox_NR200P__Orange_Window_ = new Case() { Id = 65, Name = "MasterBox NR200P (Orange Window)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 180, SellPrice = 60, LevelUnlock = 32, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__Orange_Window_);
            Case MasterBox_NR200P__Orange_ = new Case() { Id = 66, Name = "MasterBox NR200P (Orange)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 180, SellPrice = 60, LevelUnlock = 32, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__Orange_);
            Case MasterBox_NR200P__Pink_Window_ = new Case() { Id = 67, Name = "MasterBox NR200P (Pink Window)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 180, SellPrice = 60, LevelUnlock = 32, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__Pink_Window_);
            Case MasterBox_NR200P__Pink_ = new Case() { Id = 68, Name = "MasterBox NR200P (Pink)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 180, SellPrice = 60, LevelUnlock = 32, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__Pink_);
            Case MasterBox_NR200P__Purple_Menu_ = new Case() { Id = 69, Name = "MasterBox NR200P (Purple Menu)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 0, SellPrice = 0, LevelUnlock = 1, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__Purple_Menu_);
            Case MasterBox_NR200P__Purple_Window_ = new Case() { Id = 70, Name = "MasterBox NR200P (Purple Window)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 180, SellPrice = 60, LevelUnlock = 32, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__Purple_Window_);
            Case MasterBox_NR200P__Purple_ = new Case() { Id = 71, Name = "MasterBox NR200P (Purple)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 180, SellPrice = 60, LevelUnlock = 32, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__Purple_);
            Case MasterBox_NR200P__Sakura_Window_ = new Case() { Id = 72, Name = "MasterBox NR200P (Sakura Window)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 330, SellPrice = 110, LevelUnlock = 32, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__Sakura_Window_);
            Case MasterBox_NR200P__Sakura_ = new Case() { Id = 73, Name = "MasterBox NR200P (Sakura)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 330, SellPrice = 110, LevelUnlock = 32, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__Sakura_);
            Case MasterBox_NR200P__White_Window_ = new Case() { Id = 74, Name = "MasterBox NR200P (White Window)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 130, SellPrice = 43, LevelUnlock = 32, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__White_Window_);
            Case MasterBox_NR200P__White_ = new Case() { Id = 75, Name = "MasterBox NR200P (White)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 130, SellPrice = 43, LevelUnlock = 32, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 120, MaxGPULength = 330, MaxCPUFanHeight = 153, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { SickleFlow_120mm, SickleFlow_120mm }, InherentCooling = 0 }; cases.Add(MasterBox_NR200P__White_);
            Case MasterCase_H500P = new Case() { Id = 76, Name = "MasterCase H500P", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 150, SellPrice = 50, LevelUnlock = 3, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 412, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_140, MasterCase_H500P_200mm_RGB, MasterCase_H500P_200mm_RGB }, InherentCooling = 0 }; cases.Add(MasterCase_H500P);
            Case MasterCase_Maker_5_MSI_Dragon_Edition = new Case() { Id = 77, Name = "MasterCase Maker 5 MSI Dragon Edition", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 250, SellPrice = 83, LevelUnlock = 15, LevelPercent = 20, Lighting = Color.White, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 412, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_140, Heat_Away_140 }, RestrictedGpuLength = 296, InherentCooling = 0 }; cases.Add(MasterCase_Maker_5_MSI_Dragon_Edition);
            Case MasterCase_Maker_5t = new Case() { Id = 78, Name = "MasterCase Maker 5t", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 180, SellPrice = 60, LevelUnlock = 8, LevelPercent = 1, Lighting = Color.Red, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 412, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_140 }, RestrictedGpuLength = 296, InherentCooling = 0 }; cases.Add(MasterCase_Maker_5t);
            Case MasterFrame_700__Bench_Mode_ = new Case() { Id = 79, Name = "MasterFrame 700 (Bench Mode)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 700, SellPrice = 233, LevelUnlock = 34, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Full_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 210, MaxGPULength = 500, MaxCPUFanHeight = 200, UseForWcJobs = false, IsOpenBench = true, InherentCooling = 0.7 }; cases.Add(MasterFrame_700__Bench_Mode_);
            Case MasterFrame_700__Showcase_Mode_ = new Case() { Id = 80, Name = "MasterFrame 700 (Showcase Mode)", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 700, SellPrice = 233, LevelUnlock = 34, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Full_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 210, MaxGPULength = 450, MaxCPUFanHeight = 158, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(MasterFrame_700__Showcase_Mode_);
            Case Silencio_S400 = new Case() { Id = 81, Name = "Silencio S400", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 115, SellPrice = 38, LevelUnlock = 31, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 140, MaxGPULength = 319, MaxCPUFanHeight = 166, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { SILENCIO_FP_120_PWM, SILENCIO_FP_120_PWM }, InherentCooling = 0 }; cases.Add(Silencio_S400);
            Case Silencio_S400___Window = new Case() { Id = 82, Name = "Silencio S400 - Window", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 130, SellPrice = 43, LevelUnlock = 31, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 140, MaxGPULength = 319, MaxCPUFanHeight = 166, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { SILENCIO_FP_120_PWM, SILENCIO_FP_120_PWM }, InherentCooling = 0 }; cases.Add(Silencio_S400___Window);
            Case Silencio_S600 = new Case() { Id = 83, Name = "Silencio S600", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 130, SellPrice = 43, LevelUnlock = 31, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 398, MaxCPUFanHeight = 166, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { SILENCIO_FP_120_PWM, SILENCIO_FP_120_PWM }, InherentCooling = 0 }; cases.Add(Silencio_S600);
            Case Silencio_S600___Window = new Case() { Id = 84, Name = "Silencio S600 - Window", PartType = PartType.Case, Manufacturer = Cooler_Master, Price = 130, SellPrice = 43, LevelUnlock = 31, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 398, MaxCPUFanHeight = 166, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { SILENCIO_FP_120_PWM, SILENCIO_FP_120_PWM }, InherentCooling = 0 }; cases.Add(Silencio_S600___Window);
            Case Carbide_Series_175R_RGB = new Case() { Id = 85, Name = "Carbide Series 175R RGB", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 85, SellPrice = 28, LevelUnlock = 21, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 330, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { LL120_RGB_LED }, InherentCooling = 0 }; cases.Add(Carbide_Series_175R_RGB);
            Case Carbide_Series_275R__Black_ = new Case() { Id = 86, Name = "Carbide Series 275R (Black)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 80, SellPrice = 27, LevelUnlock = 13, LevelPercent = 70, Lighting = Color.White, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 370, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(Carbide_Series_275R__Black_);
            Case Carbide_Series_275R__White_ = new Case() { Id = 87, Name = "Carbide Series 275R (White)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 80, SellPrice = 27, LevelUnlock = 13, LevelPercent = 70, Lighting = Color.White, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 370, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(Carbide_Series_275R__White_);
            Case Carbide_Series_Air_740 = new Case() { Id = 88, Name = "Carbide Series Air 740", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 280, SellPrice = 93, LevelUnlock = 21, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Cube, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 225, MaxGPULength = 330, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_140, Heat_Away_140 }, InherentCooling = 0 }; cases.Add(Carbide_Series_Air_740);
            Case Carbide_Series_SPEC_DELTA_RGB = new Case() { Id = 89, Name = "Carbide Series SPEC-DELTA RGB", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 90, SellPrice = 30, LevelUnlock = 26, LevelPercent = 32, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 330, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { ML120, LL120_RGB_LED, LL120_RGB_LED, LL120_RGB_LED }, InherentCooling = 0 }; cases.Add(Carbide_Series_SPEC_DELTA_RGB);
            Case Carbide_Series_SPEC_OMEGA__Black_ = new Case() { Id = 90, Name = "Carbide Series SPEC-OMEGA (Black)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 100, SellPrice = 33, LevelUnlock = 23, LevelPercent = 1, Lighting = Color.Red, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 370, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { ML120, ML120 }, InherentCooling = 0 }; cases.Add(Carbide_Series_SPEC_OMEGA__Black_);
            Case Carbide_Series_SPEC_OMEGA__Black_Red_ = new Case() { Id = 91, Name = "Carbide Series SPEC-OMEGA (Black/Red)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 100, SellPrice = 33, LevelUnlock = 23, LevelPercent = 1, Lighting = Color.Red, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 370, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { ML120, ML120 }, InherentCooling = 0 }; cases.Add(Carbide_Series_SPEC_OMEGA__Black_Red_);
            Case Carbide_Series_SPEC_OMEGA__Black_White_ = new Case() { Id = 92, Name = "Carbide Series SPEC-OMEGA (Black/White)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 100, SellPrice = 33, LevelUnlock = 23, LevelPercent = 1, Lighting = Color.White, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 370, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { ML120, ML120 }, InherentCooling = 0 }; cases.Add(Carbide_Series_SPEC_OMEGA__Black_White_);
            Case Carbide_SPEC_06_RGB__Black_ = new Case() { Id = 93, Name = "Carbide SPEC-06 RGB (Black)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 100, SellPrice = 33, LevelUnlock = 23, LevelPercent = 30, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 370, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(Carbide_SPEC_06_RGB__Black_);
            Case Carbide_SPEC_06_RGB__White_ = new Case() { Id = 94, Name = "Carbide SPEC-06 RGB (White)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 100, SellPrice = 33, LevelUnlock = 23, LevelPercent = 30, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 370, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(Carbide_SPEC_06_RGB__White_);
            Case Crystal_Series_280X_RGB__Black_ = new Case() { Id = 95, Name = "Crystal Series 280X RGB (Black)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 160, SellPrice = 53, LevelUnlock = 26, LevelPercent = 30, Lighting = Color.RGB, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 300, MaxCPUFanHeight = 150, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { LL120_RGB_LED, LL120_RGB_LED }, InherentCooling = 0 }; cases.Add(Crystal_Series_280X_RGB__Black_);
            Case Crystal_Series_280X_RGB__White_ = new Case() { Id = 96, Name = "Crystal Series 280X RGB (White)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 160, SellPrice = 53, LevelUnlock = 26, LevelPercent = 30, Lighting = Color.RGB, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 300, MaxCPUFanHeight = 150, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { LL120_RGB_LED, LL120_RGB_LED }, InherentCooling = 0 }; cases.Add(Crystal_Series_280X_RGB__White_);
            Case Crystal_Series_570X_RGB = new Case() { Id = 97, Name = "Crystal Series 570X RGB", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 180, SellPrice = 60, LevelUnlock = 24, LevelPercent = 33, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 225, MaxGPULength = 370, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { SP120_RGB_LED, SP120_RGB_LED, SP120_RGB_LED }, InherentCooling = 0 }; cases.Add(Crystal_Series_570X_RGB);
            Case Graphite_Series_380T__Black_ = new Case() { Id = 98, Name = "Graphite Series 380T (Black)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 110, SellPrice = 37, LevelUnlock = 23, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Cube, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 180, MaxGPULength = 290, MaxCPUFanHeight = 150, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { ML120, LL140_RGB_LED }, InherentCooling = 0 }; cases.Add(Graphite_Series_380T__Black_);
            Case Graphite_Series_380T__White_ = new Case() { Id = 99, Name = "Graphite Series 380T (White)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 110, SellPrice = 37, LevelUnlock = 23, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Cube, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 180, MaxGPULength = 290, MaxCPUFanHeight = 150, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { ML120, LL140_RGB_LED }, InherentCooling = 0 }; cases.Add(Graphite_Series_380T__White_);
            Case Graphite_Series_380T__Yellow_ = new Case() { Id = 100, Name = "Graphite Series 380T (Yellow)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 110, SellPrice = 37, LevelUnlock = 23, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Cube, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 180, MaxGPULength = 290, MaxCPUFanHeight = 150, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { ML120, LL140_RGB_LED }, InherentCooling = 0 }; cases.Add(Graphite_Series_380T__Yellow_);
            Case iCUE_220T_RGB_Airflow__Black_ = new Case() { Id = 101, Name = "iCUE 220T RGB Airflow (Black)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 120, SellPrice = 40, LevelUnlock = 23, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 300, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { LL120_RGB_LED, LL120_RGB_LED, LL120_RGB_LED }, InherentCooling = 0 }; cases.Add(iCUE_220T_RGB_Airflow__Black_);
            Case iCUE_220T_RGB_Airflow__White_ = new Case() { Id = 102, Name = "iCUE 220T RGB Airflow (White)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 120, SellPrice = 40, LevelUnlock = 23, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 300, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { LL120_RGB_LED, LL120_RGB_LED, LL120_RGB_LED }, InherentCooling = 0 }; cases.Add(iCUE_220T_RGB_Airflow__White_);
            Case iCUE_220T_RGB_TG__Black_ = new Case() { Id = 103, Name = "iCUE 220T RGB TG (Black)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 140, SellPrice = 47, LevelUnlock = 23, LevelPercent = 20, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 300, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { LL120_RGB_LED, LL120_RGB_LED, LL120_RGB_LED }, InherentCooling = 0 }; cases.Add(iCUE_220T_RGB_TG__Black_);
            Case iCUE_220T_RGB_TG__White_ = new Case() { Id = 104, Name = "iCUE 220T RGB TG (White)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 140, SellPrice = 47, LevelUnlock = 23, LevelPercent = 20, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 300, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { LL120_RGB_LED, LL120_RGB_LED, LL120_RGB_LED }, InherentCooling = 0 }; cases.Add(iCUE_220T_RGB_TG__White_);
            Case iCUE_5000D__Black_ = new Case() { Id = 105, Name = "iCUE 5000D (Black)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 180, SellPrice = 60, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { SP120__Black_, SP120__Black_ }, InherentCooling = 0 }; cases.Add(iCUE_5000D__Black_);
            Case iCUE_5000D__White_ = new Case() { Id = 106, Name = "iCUE 5000D (White)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 180, SellPrice = 60, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { SP120__White_, SP120__White_ }, InherentCooling = 0 }; cases.Add(iCUE_5000D__White_);
            Case iCUE_5000D_Airflow__Black_ = new Case() { Id = 107, Name = "iCUE 5000D Airflow (Black)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 180, SellPrice = 60, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { SP120__Black_, SP120__Black_ }, InherentCooling = 0 }; cases.Add(iCUE_5000D_Airflow__Black_);
            Case iCUE_5000D_Airflow__White_ = new Case() { Id = 108, Name = "iCUE 5000D Airflow (White)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 180, SellPrice = 60, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { SP120__White_, SP120__White_ }, InherentCooling = 0 }; cases.Add(iCUE_5000D_Airflow__White_);
            Case iCUE_5000T = new Case() { Id = 109, Name = "iCUE 5000T", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 180, SellPrice = 60, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { LL120_RGB_LED, LL120_RGB_LED, LL120_RGB_LED }, InherentCooling = 0 }; cases.Add(iCUE_5000T);
            Case iCUE_5000T__White_ = new Case() { Id = 110, Name = "iCUE 5000T (White)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 180, SellPrice = 60, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { LL120_RGB_LED__White_, LL120_RGB_LED__White_, LL120_RGB_LED__White_ }, InherentCooling = 0 }; cases.Add(iCUE_5000T__White_);
            Case iCUE_5000X_RGB__Black_ = new Case() { Id = 111, Name = "iCUE 5000X RGB (Black)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 180, SellPrice = 60, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { SP120_RGB_Elite__Black_, SP120_RGB_Elite__Black_, SP120_RGB_Elite__Black_ }, InherentCooling = 0 }; cases.Add(iCUE_5000X_RGB__Black_);
            Case iCUE_5000X_RGB__White_ = new Case() { Id = 112, Name = "iCUE 5000X RGB (White)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 180, SellPrice = 60, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { SP120_RGB_Elite__White_, SP120_RGB_Elite__White_, SP120_RGB_Elite__White_ }, InherentCooling = 0 }; cases.Add(iCUE_5000X_RGB__White_);
            Case MENU_iCUE_5000D_Airflow__White_ = new Case() { Id = 113, Name = "MENU iCUE 5000D Airflow (White)", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 0, SellPrice = 0, LevelUnlock = 0, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { SP120_RGB_Elite__Black_, SP120_RGB_Elite__Black_, SP120_RGB_Elite__Black_ }, InherentCooling = 0 }; cases.Add(MENU_iCUE_5000D_Airflow__White_);
            Case Obsidian_Series_1000D = new Case() { Id = 114, Name = "Obsidian Series 1000D", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 500, SellPrice = 167, LevelUnlock = 8, LevelPercent = 80, Lighting = Color.RGB, CaseSize = CaseSize.Super_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 3, MaxPsuLength = 225, MaxGPULength = 400, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(Obsidian_Series_1000D);
            Case Obsidian_Series_500D = new Case() { Id = 115, Name = "Obsidian Series 500D", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 150, SellPrice = 50, LevelUnlock = 21, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 225, MaxGPULength = 370, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(Obsidian_Series_500D);
            Case Obsidian_Series_750D = new Case() { Id = 116, Name = "Obsidian Series 750D", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 160, SellPrice = 53, LevelUnlock = 8, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Full_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 220, MaxGPULength = 450, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { ML140, ML140, ML140 }, InherentCooling = 0 }; cases.Add(Obsidian_Series_750D);
            Case Obsidian_Series_900D = new Case() { Id = 117, Name = "Obsidian Series 900D", PartType = PartType.Case, Manufacturer = CORSAIR, Price = 360, SellPrice = 120, LevelUnlock = 8, LevelPercent = 60, Lighting = null, CaseSize = CaseSize.Super_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 3, MaxPsuLength = 280, MaxGPULength = 500, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { ML120, ML120, ML120, ML120 }, InherentCooling = 0 }; cases.Add(Obsidian_Series_900D);
            Case EARLKASE_RGB = new Case() { Id = 118, Name = "EARLKASE RGB", PartType = PartType.Case, Manufacturer = Deepcool, Price = 85, SellPrice = 28, LevelUnlock = 17, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 340, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { RF_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(EARLKASE_RGB);
            Case EARLKASE_RGB_WH = new Case() { Id = 119, Name = "EARLKASE RGB WH", PartType = PartType.Case, Manufacturer = Deepcool, Price = 85, SellPrice = 28, LevelUnlock = 17, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 340, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { RF_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(EARLKASE_RGB_WH);
            Case MATREXX_55 = new Case() { Id = 120, Name = "MATREXX 55", PartType = PartType.Case, Manufacturer = Deepcool, Price = 50, SellPrice = 17, LevelUnlock = 10, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 1, MaxPsuLength = 170, MaxGPULength = 370, MaxCPUFanHeight = 168, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(MATREXX_55);
            Case DG_73 = new Case() { Id = 121, Name = "DG-73", PartType = PartType.Case, Manufacturer = EVGA, Price = 90, SellPrice = 30, LevelUnlock = 28, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 1, MaxPsuLength = 250, MaxGPULength = 390, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(DG_73);
            Case DG_75__Black_ = new Case() { Id = 122, Name = "DG-75 (Black)", PartType = PartType.Case, Manufacturer = EVGA, Price = 110, SellPrice = 37, LevelUnlock = 28, LevelPercent = 15, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 1, MaxPsuLength = 250, MaxGPULength = 390, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(DG_75__Black_);
            Case DG_75__White_ = new Case() { Id = 123, Name = "DG-75 (White)", PartType = PartType.Case, Manufacturer = EVGA, Price = 120, SellPrice = 40, LevelUnlock = 28, LevelPercent = 15, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 1, MaxPsuLength = 250, MaxGPULength = 390, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(DG_75__White_);
            Case DG_76__Black_ = new Case() { Id = 124, Name = "DG-76 (Black)", PartType = PartType.Case, Manufacturer = EVGA, Price = 140, SellPrice = 47, LevelUnlock = 28, LevelPercent = 35, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 1, MaxPsuLength = 250, MaxGPULength = 390, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(DG_76__Black_);
            Case DG_76__White_ = new Case() { Id = 125, Name = "DG-76 (White)", PartType = PartType.Case, Manufacturer = EVGA, Price = 150, SellPrice = 50, LevelUnlock = 28, LevelPercent = 35, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 1, MaxPsuLength = 250, MaxGPULength = 390, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(DG_76__White_);
            Case DG_77__Black_ = new Case() { Id = 126, Name = "DG-77 (Black)", PartType = PartType.Case, Manufacturer = EVGA, Price = 160, SellPrice = 53, LevelUnlock = 28, LevelPercent = 55, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 1, MaxPsuLength = 250, MaxGPULength = 390, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(DG_77__Black_);
            Case DG_77__White_ = new Case() { Id = 127, Name = "DG-77 (White)", PartType = PartType.Case, Manufacturer = EVGA, Price = 170, SellPrice = 57, LevelUnlock = 28, LevelPercent = 55, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 1, MaxPsuLength = 250, MaxGPULength = 390, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(DG_77__White_);
            Case DG_84_Full_Tower = new Case() { Id = 128, Name = "DG-84 Full Tower", PartType = PartType.Case, Manufacturer = EVGA, Price = 150, SellPrice = 50, LevelUnlock = 18, LevelPercent = 1, Lighting = Color.White, CaseSize = CaseSize.Full_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 350, MaxCPUFanHeight = 175, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(DG_84_Full_Tower);
            Case DG_85_Full_Tower = new Case() { Id = 129, Name = "DG-85 Full Tower", PartType = PartType.Case, Manufacturer = EVGA, Price = 200, SellPrice = 67, LevelUnlock = 18, LevelPercent = 25, Lighting = Color.White, CaseSize = CaseSize.Full_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 350, MaxCPUFanHeight = 175, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(DG_85_Full_Tower);
            Case DG_86_Full_Tower = new Case() { Id = 130, Name = "DG-86 Full Tower", PartType = PartType.Case, Manufacturer = EVGA, Price = 220, SellPrice = 73, LevelUnlock = 18, LevelPercent = 50, Lighting = Color.White, CaseSize = CaseSize.Full_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 350, MaxCPUFanHeight = 175, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_140, Heat_Away_140, Heat_Away_140 }, InherentCooling = 0 }; cases.Add(DG_86_Full_Tower);
            Case DG_87_Full_Tower = new Case() { Id = 131, Name = "DG-87 Full Tower", PartType = PartType.Case, Manufacturer = EVGA, Price = 240, SellPrice = 80, LevelUnlock = 18, LevelPercent = 75, Lighting = Color.White, CaseSize = CaseSize.Full_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 350, MaxCPUFanHeight = 175, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_140, Heat_Away_140, Heat_Away_140, Heat_Away_140 }, InherentCooling = 0 }; cases.Add(DG_87_Full_Tower);
            Case Define_7_Black = new Case() { Id = 132, Name = "Define 7 Black", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 180, SellPrice = 60, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 491, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_Black);
            Case Define_7_Clear_TG_Black = new Case() { Id = 133, Name = "Define 7 Clear TG Black", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 180, SellPrice = 60, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 491, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_Clear_TG_Black);
            Case Define_7_Clear_TG_White = new Case() { Id = 134, Name = "Define 7 Clear TG White", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 180, SellPrice = 60, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 491, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__White_, Dynamic_X2_GP_14__White_, Dynamic_X2_GP_14__White_ }, InherentCooling = 0 }; cases.Add(Define_7_Clear_TG_White);
            Case Define_7_Compact = new Case() { Id = 135, Name = "Define 7 Compact", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 100, SellPrice = 33, LevelUnlock = 33, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_12__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_Compact);
            Case Define_7_Compact_Dark_TG_Black = new Case() { Id = 136, Name = "Define 7 Compact Dark TG Black", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 100, SellPrice = 33, LevelUnlock = 33, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_12__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_Compact_Dark_TG_Black);
            Case Define_7_Compact_Dark_TG_Black_Grill = new Case() { Id = 137, Name = "Define 7 Compact Dark TG Black Grill", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 100, SellPrice = 33, LevelUnlock = 33, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_12__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_Compact_Dark_TG_Black_Grill);
            Case Define_7_Compact_Grill = new Case() { Id = 138, Name = "Define 7 Compact Grill", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 100, SellPrice = 33, LevelUnlock = 33, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_12__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_Compact_Grill);
            Case Define_7_Compact_Light_TG_Black = new Case() { Id = 139, Name = "Define 7 Compact Light TG Black", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 110, SellPrice = 37, LevelUnlock = 33, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_12__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_Compact_Light_TG_Black);
            Case Define_7_Compact_Light_TG_Black_Grill = new Case() { Id = 140, Name = "Define 7 Compact Light TG Black Grill", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 110, SellPrice = 37, LevelUnlock = 33, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_12__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_Compact_Light_TG_Black_Grill);
            Case Define_7_Compact_Light_TG_White = new Case() { Id = 141, Name = "Define 7 Compact Light TG White", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 110, SellPrice = 37, LevelUnlock = 33, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_12__White_, Dynamic_X2_GP_14__White_ }, InherentCooling = 0 }; cases.Add(Define_7_Compact_Light_TG_White);
            Case Define_7_Compact_Light_TG_White_Grill = new Case() { Id = 142, Name = "Define 7 Compact Light TG White Grill", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 110, SellPrice = 37, LevelUnlock = 33, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_12__White_, Dynamic_X2_GP_14__White_ }, InherentCooling = 0 }; cases.Add(Define_7_Compact_Light_TG_White_Grill);
            Case Define_7_Compact_White = new Case() { Id = 143, Name = "Define 7 Compact White", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 100, SellPrice = 33, LevelUnlock = 33, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_12__White_, Dynamic_X2_GP_14__White_ }, InherentCooling = 0 }; cases.Add(Define_7_Compact_White);
            Case Define_7_Compact_White_Grill = new Case() { Id = 144, Name = "Define 7 Compact White Grill", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 100, SellPrice = 33, LevelUnlock = 33, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_12__White_, Dynamic_X2_GP_14__White_ }, InherentCooling = 0 }; cases.Add(Define_7_Compact_White_Grill);
            Case Define_7_Dark_TG_Gray = new Case() { Id = 145, Name = "Define 7 Dark TG Gray", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 180, SellPrice = 60, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 491, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_Dark_TG_Gray);
            Case Define_7_Gray = new Case() { Id = 146, Name = "Define 7 Gray", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 180, SellPrice = 60, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 491, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_Gray);
            Case Define_7_Light_TG_Black = new Case() { Id = 147, Name = "Define 7 Light TG Black", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 180, SellPrice = 60, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 491, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_Light_TG_Black);
            Case Define_7_Light_TG_Gray = new Case() { Id = 148, Name = "Define 7 Light TG Gray", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 180, SellPrice = 60, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 491, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_Light_TG_Gray);
            Case Define_7_White = new Case() { Id = 149, Name = "Define 7 White", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 180, SellPrice = 60, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 491, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__White_, Dynamic_X2_GP_14__White_, Dynamic_X2_GP_14__White_ }, InherentCooling = 0 }; cases.Add(Define_7_White);
            Case Define_7_XL = new Case() { Id = 150, Name = "Define 7 XL", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 210, SellPrice = 70, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Full_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 549, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_XL);
            Case Define_7_XL_Dark_TG = new Case() { Id = 151, Name = "Define 7 XL Dark TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 210, SellPrice = 70, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Full_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 549, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_XL_Dark_TG);
            Case Define_7_XL_Light_TG = new Case() { Id = 152, Name = "Define 7 XL Light TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 210, SellPrice = 70, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Full_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 549, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_7_XL_Light_TG);
            Case Define_R5_Black = new Case() { Id = 153, Name = "Define R5 Black", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 110, SellPrice = 37, LevelUnlock = 19, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14, Dynamic_X2_GP_14 }, RestrictedGpuLength = 310, InherentCooling = 0 }; cases.Add(Define_R5_Black);
            Case Define_R5_Black___Window = new Case() { Id = 154, Name = "Define R5 Black - Window", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 110, SellPrice = 37, LevelUnlock = 19, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14, Dynamic_X2_GP_14 }, RestrictedGpuLength = 310, InherentCooling = 0 }; cases.Add(Define_R5_Black___Window);
            Case Define_R5_Blackout_Edition = new Case() { Id = 155, Name = "Define R5 Blackout Edition", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 110, SellPrice = 37, LevelUnlock = 19, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, RestrictedGpuLength = 310, InherentCooling = 0 }; cases.Add(Define_R5_Blackout_Edition);
            Case Define_R5_Blackout_Edition___Window = new Case() { Id = 156, Name = "Define R5 Blackout Edition - Window", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 110, SellPrice = 37, LevelUnlock = 19, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, RestrictedGpuLength = 310, InherentCooling = 0 }; cases.Add(Define_R5_Blackout_Edition___Window);
            Case Define_R5_Titanium = new Case() { Id = 157, Name = "Define R5 Titanium", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 110, SellPrice = 37, LevelUnlock = 19, LevelPercent = 10, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14, Dynamic_X2_GP_14 }, RestrictedGpuLength = 310, InherentCooling = 0 }; cases.Add(Define_R5_Titanium);
            Case Define_R5_Titanium___Window = new Case() { Id = 158, Name = "Define R5 Titanium - Window", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 110, SellPrice = 37, LevelUnlock = 19, LevelPercent = 10, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14, Dynamic_X2_GP_14 }, RestrictedGpuLength = 310, InherentCooling = 0 }; cases.Add(Define_R5_Titanium___Window);
            Case Define_R5_White = new Case() { Id = 159, Name = "Define R5 White", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 110, SellPrice = 37, LevelUnlock = 19, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14, Dynamic_X2_GP_14 }, RestrictedGpuLength = 310, InherentCooling = 0 }; cases.Add(Define_R5_White);
            Case Define_R5_White___Window = new Case() { Id = 160, Name = "Define R5 White - Window", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 110, SellPrice = 37, LevelUnlock = 19, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14, Dynamic_X2_GP_14 }, RestrictedGpuLength = 310, InherentCooling = 0 }; cases.Add(Define_R5_White___Window);
            Case Define_R5_White___Gold_Limited_Edition___Window = new Case() { Id = 161, Name = "Define R5 White & Gold Limited Edition - Window", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 110, SellPrice = 37, LevelUnlock = 19, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14, Dynamic_X2_GP_14 }, RestrictedGpuLength = 310, InherentCooling = 0 }; cases.Add(Define_R5_White___Gold_Limited_Edition___Window);
            Case Define_R6_Black = new Case() { Id = 162, Name = "Define R6 Black", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 144, SellPrice = 48, LevelUnlock = 24, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14, Dynamic_X2_GP_14, Dynamic_X2_GP_14 }, InherentCooling = 0 }; cases.Add(Define_R6_Black);
            Case Define_R6_Black_TG = new Case() { Id = 163, Name = "Define R6 Black TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 150, SellPrice = 50, LevelUnlock = 24, LevelPercent = 60, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14, Dynamic_X2_GP_14, Dynamic_X2_GP_14 }, InherentCooling = 0 }; cases.Add(Define_R6_Black_TG);
            Case Define_R6_Blackout = new Case() { Id = 164, Name = "Define R6 Blackout", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 147, SellPrice = 49, LevelUnlock = 25, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_R6_Blackout);
            Case Define_R6_Blackout_TG = new Case() { Id = 165, Name = "Define R6 Blackout TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 153, SellPrice = 51, LevelUnlock = 25, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_R6_Blackout_TG);
            Case Define_R6_Gunmetal = new Case() { Id = 166, Name = "Define R6 Gunmetal", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 132, SellPrice = 44, LevelUnlock = 25, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_R6_Gunmetal);
            Case Define_R6_Gunmetal_TG = new Case() { Id = 167, Name = "Define R6 Gunmetal TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 143, SellPrice = 48, LevelUnlock = 25, LevelPercent = 60, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Define_R6_Gunmetal_TG);
            Case Define_R6_White = new Case() { Id = 168, Name = "Define R6 White", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 125, SellPrice = 42, LevelUnlock = 24, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__White_, Dynamic_X2_GP_14__White_, Dynamic_X2_GP_14__White_ }, InherentCooling = 0 }; cases.Add(Define_R6_White);
            Case Define_R6_White_TG = new Case() { Id = 169, Name = "Define R6 White TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 150, SellPrice = 50, LevelUnlock = 24, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__White_, Dynamic_X2_GP_14__White_, Dynamic_X2_GP_14__White_ }, InherentCooling = 0 }; cases.Add(Define_R6_White_TG);
            Case Focus_G___Black = new Case() { Id = 170, Name = "Focus G - Black", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 50, SellPrice = 17, LevelUnlock = 20, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 230, MaxGPULength = 380, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_12, Dynamic_X2_GP_12 }, InherentCooling = 0 }; cases.Add(Focus_G___Black);
            Case Focus_G___Gunmetal_Gray = new Case() { Id = 171, Name = "Focus G - Gunmetal Gray", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 60, SellPrice = 20, LevelUnlock = 20, LevelPercent = 15, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 230, MaxGPULength = 380, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_12, Dynamic_X2_GP_12 }, InherentCooling = 0 }; cases.Add(Focus_G___Gunmetal_Gray);
            Case Focus_G___Mystic_Red = new Case() { Id = 172, Name = "Focus G - Mystic Red", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 60, SellPrice = 20, LevelUnlock = 20, LevelPercent = 45, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 230, MaxGPULength = 380, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_12, Dynamic_X2_GP_12 }, InherentCooling = 0 }; cases.Add(Focus_G___Mystic_Red);
            Case Focus_G___Petrol_Blue = new Case() { Id = 173, Name = "Focus G - Petrol Blue", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 60, SellPrice = 20, LevelUnlock = 20, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 230, MaxGPULength = 380, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_12, Dynamic_X2_GP_12 }, InherentCooling = 0 }; cases.Add(Focus_G___Petrol_Blue);
            Case Focus_G___White = new Case() { Id = 174, Name = "Focus G - White", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 50, SellPrice = 17, LevelUnlock = 20, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 230, MaxGPULength = 380, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_12, Dynamic_X2_GP_12 }, InherentCooling = 0 }; cases.Add(Focus_G___White);
            Case Fractal_Menu = new Case() { Id = 175, Name = "Fractal Menu", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 0, SellPrice = 0, LevelUnlock = 0, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 491, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Fractal_Menu);
            Case Meshify_2 = new Case() { Id = 176, Name = "Meshify 2", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 110, SellPrice = 37, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 491, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_2);
            Case Meshify_2_Clear_TG = new Case() { Id = 177, Name = "Meshify 2 Clear TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 140, SellPrice = 47, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 491, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_2_Clear_TG);
            Case Meshify_2_Compact = new Case() { Id = 178, Name = "Meshify 2 Compact", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 140, SellPrice = 47, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 165, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_12__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_2_Compact);
            Case Meshify_2_Compact_Clear_TG_White = new Case() { Id = 179, Name = "Meshify 2 Compact Clear TG White", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 140, SellPrice = 47, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 165, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_12__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_2_Compact_Clear_TG_White);
            Case Meshify_2_Compact_Dark_TG_Black = new Case() { Id = 180, Name = "Meshify 2 Compact Dark TG Black", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 140, SellPrice = 47, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 165, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_12__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_2_Compact_Dark_TG_Black);
            Case Meshify_2_Compact_Light_TG_Black = new Case() { Id = 181, Name = "Meshify 2 Compact Light TG Black", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 140, SellPrice = 47, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 165, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_12__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_2_Compact_Light_TG_Black);
            Case Meshify_2_Compact_Light_TG_Grey = new Case() { Id = 182, Name = "Meshify 2 Compact Light TG Grey", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 140, SellPrice = 47, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 165, MaxGPULength = 360, MaxCPUFanHeight = 169, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_12__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_2_Compact_Light_TG_Grey);
            Case Meshify_2_Dark_TG = new Case() { Id = 183, Name = "Meshify 2 Dark TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 140, SellPrice = 47, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 491, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_2_Dark_TG);
            Case Meshify_2_Light_TG = new Case() { Id = 184, Name = "Meshify 2 Light TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 140, SellPrice = 47, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 491, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_2_Light_TG);
            Case Meshify_2_XL_Dark_TG = new Case() { Id = 185, Name = "Meshify 2 XL Dark TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 180, SellPrice = 60, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Full_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 549, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_2_XL_Dark_TG);
            Case Meshify_2_XL_Light_TG = new Case() { Id = 186, Name = "Meshify 2 XL Light TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 180, SellPrice = 60, LevelUnlock = 33, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Full_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 3, MaxPsuLength = 250, MaxGPULength = 549, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_, Dynamic_X2_GP_14__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_2_XL_Light_TG);
            Case Meshify_C = new Case() { Id = 187, Name = "Meshify C", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 68, SellPrice = 23, LevelUnlock = 22, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 175, MaxGPULength = 315, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_12__Black_, Dynamic_X2_GP_12__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_C);
            Case Meshify_C___Dark_TG = new Case() { Id = 188, Name = "Meshify C – Dark TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 90, SellPrice = 30, LevelUnlock = 22, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 175, MaxGPULength = 315, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_12__Black_, Dynamic_X2_GP_12__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_C___Dark_TG);
            Case Meshify_C___TG = new Case() { Id = 189, Name = "Meshify C – TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 90, SellPrice = 30, LevelUnlock = 22, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 175, MaxGPULength = 315, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_12__Black_, Dynamic_X2_GP_12__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_C___TG);
            Case Meshify_C_White___TG = new Case() { Id = 190, Name = "Meshify C White - TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 90, SellPrice = 30, LevelUnlock = 22, LevelPercent = 60, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 175, MaxGPULength = 315, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Dynamic_X2_GP_12__Black_, Dynamic_X2_GP_12__Black_ }, InherentCooling = 0 }; cases.Add(Meshify_C_White___TG);
            Case Node_202 = new Case() { Id = 191, Name = "Node 202", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 85, SellPrice = 28, LevelUnlock = 29, LevelPercent = 80, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 0, Number140mmSlots = 0, MaxPsuLength = 130, MaxGPULength = 310, MaxCPUFanHeight = 56, UseForWcJobs = false, IsOpenBench = false, InherentCooling = 0 }; cases.Add(Node_202);
            Case Vector_RS_Dark_TG = new Case() { Id = 192, Name = "Vector RS Dark TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 180, SellPrice = 60, LevelUnlock = 21, LevelPercent = 80, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, InherentCooling = 0 }; cases.Add(Vector_RS_Dark_TG);
            Case Vector_RS_Dark_TG__Glass_Lid_ = new Case() { Id = 193, Name = "Vector RS Dark TG (Glass Lid)", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 180, SellPrice = 60, LevelUnlock = 21, LevelPercent = 80, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, InherentCooling = 0 }; cases.Add(Vector_RS_Dark_TG__Glass_Lid_);
            Case Vector_RS_TG = new Case() { Id = 194, Name = "Vector RS TG", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 180, SellPrice = 60, LevelUnlock = 21, LevelPercent = 80, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, InherentCooling = 0 }; cases.Add(Vector_RS_TG);
            Case Vector_RS_TG__Glass_Lid_ = new Case() { Id = 195, Name = "Vector RS TG (Glass Lid)", PartType = PartType.Case, Manufacturer = Fractal_Design, Price = 180, SellPrice = 60, LevelUnlock = 21, LevelPercent = 80, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 440, MaxCPUFanHeight = 185, UseForWcJobs = false, IsOpenBench = false, InherentCooling = 0 }; cases.Add(Vector_RS_TG__Glass_Lid_);
            Case CMT340 = new Case() { Id = 196, Name = "CMT340", PartType = PartType.Case, Manufacturer = FSP, Price = 100, SellPrice = 33, LevelUnlock = 14, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 1, MaxPsuLength = 170, MaxGPULength = 350, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { CMT510, CMT510, CMT510, CMT510 }, InherentCooling = 0 }; cases.Add(CMT340);
            Case CMT510_Plus = new Case() { Id = 197, Name = "CMT510 Plus", PartType = PartType.Case, Manufacturer = FSP, Price = 130, SellPrice = 43, LevelUnlock = 14, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 311, MaxGPULength = 400, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { CMT510, CMT510, CMT510, CMT510 }, InherentCooling = 0 }; cases.Add(CMT510_Plus);
            Case CMT520_Plus = new Case() { Id = 198, Name = "CMT520 Plus", PartType = PartType.Case, Manufacturer = FSP, Price = 130, SellPrice = 43, LevelUnlock = 14, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 200, MaxGPULength = 423, MaxCPUFanHeight = 163, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { CMT520, CMT520, CMT520, CMT520 }, InherentCooling = 0 }; cases.Add(CMT520_Plus);
            Case Genome_ROG_Certified_Edition = new Case() { Id = 199, Name = "Genome ROG Certified Edition", PartType = PartType.Case, Manufacturer = GamerStorm, Price = 280, SellPrice = 93, LevelUnlock = 28, LevelPercent = 60, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 330, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(Genome_ROG_Certified_Edition);
            Case NEW_ARK_90 = new Case() { Id = 200, Name = "NEW ARK 90", PartType = PartType.Case, Manufacturer = GamerStorm, Price = 300, SellPrice = 100, LevelUnlock = 28, LevelPercent = 70, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 200, MaxGPULength = 400, MaxCPUFanHeight = 186, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { RF_140, RF_140, RF_140, RF_140 }, InherentCooling = 0 }; cases.Add(NEW_ARK_90);
            Case Quadstellar = new Case() { Id = 201, Name = "Quadstellar", PartType = PartType.Case, Manufacturer = GamerStorm, Price = 400, SellPrice = 133, LevelUnlock = 30, LevelPercent = 70, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 300, MaxGPULength = 380, MaxCPUFanHeight = 110, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120, Heat_Away_120, Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(Quadstellar);
            Case Quadstellar_Electro_Limited_Edition = new Case() { Id = 202, Name = "Quadstellar Electro Limited Edition", PartType = PartType.Case, Manufacturer = GamerStorm, Price = 450, SellPrice = 150, LevelUnlock = 30, LevelPercent = 90, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 300, MaxGPULength = 380, MaxCPUFanHeight = 110, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120, Heat_Away_120, Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(Quadstellar_Electro_Limited_Edition);
            Case TRISTELLAR_SW = new Case() { Id = 203, Name = "TRISTELLAR SW", PartType = PartType.Case, Manufacturer = GamerStorm, Price = 500, SellPrice = 167, LevelUnlock = 30, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 320, MaxCPUFanHeight = 80, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_90 }, InherentCooling = 0 }; cases.Add(TRISTELLAR_SW);
            Case N03_MSI_Dragon_Edition = new Case() { Id = 204, Name = "303-MSI Dragon Edition", PartType = PartType.Case, Manufacturer = InWin, Price = 160, SellPrice = 53, LevelUnlock = 15, LevelPercent = 40, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 0, MaxPsuLength = 180, MaxGPULength = 350, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(N03_MSI_Dragon_Edition);
            Case N09 = new Case() { Id = 205, Name = "309", PartType = PartType.Case, Manufacturer = InWin, Price = 470, SellPrice = 157, LevelUnlock = 25, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 0, MaxPsuLength = 200, MaxGPULength = 350, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { EGO_AE120, EGO_AE120, EGO_AE120, EGO_AE120 }, InherentCooling = 0 }; cases.Add(N09);
            Case N25 = new Case() { Id = 206, Name = "925", PartType = PartType.Case, Manufacturer = InWin, Price = 500, SellPrice = 167, LevelUnlock = 32, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Full_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 512, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(N25);
            Case A1__Black_ = new Case() { Id = 207, Name = "A1 (Black)", PartType = PartType.Case, Manufacturer = InWin, Price = 200, SellPrice = 67, LevelUnlock = 6, LevelPercent = 60, Lighting = Color.RGB, CaseSize = CaseSize.Cube, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 140, MaxGPULength = 320, MaxCPUFanHeight = 160, UseForWcJobs = false, IsOpenBench = false, InherentCooling = 0 }; cases.Add(A1__Black_);
            Case A1__White_ = new Case() { Id = 208, Name = "A1 (White)", PartType = PartType.Case, Manufacturer = InWin, Price = 200, SellPrice = 67, LevelUnlock = 6, LevelPercent = 60, Lighting = Color.RGB, CaseSize = CaseSize.Cube, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 140, MaxGPULength = 320, MaxCPUFanHeight = 160, UseForWcJobs = false, IsOpenBench = false, InherentCooling = 0 }; cases.Add(A1__White_);
            Case Big_Chungus = new Case() { Id = 209, Name = "Big Chungus", PartType = PartType.Case, Manufacturer = Kolink, Price = 220, SellPrice = 73, LevelUnlock = 12, LevelPercent = 80, Lighting = null, CaseSize = CaseSize.Full_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 0, MaxPsuLength = 220, MaxGPULength = 335, MaxCPUFanHeight = 175, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_RGB_120, Heat_Away_RGB_120, Heat_Away_RGB_120, Heat_Away_RGB_120, Heat_Away_RGB_120 }, InherentCooling = 0 }; cases.Add(Big_Chungus);
            Case Ethereal = new Case() { Id = 210, Name = "Ethereal", PartType = PartType.Case, Manufacturer = Kolink, Price = 60, SellPrice = 20, LevelUnlock = 12, LevelPercent = 20, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 380, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Fan_120 }, InherentCooling = 0 }; cases.Add(Ethereal);
            Case Observatory__Black_ = new Case() { Id = 211, Name = "Observatory (Black)", PartType = PartType.Case, Manufacturer = Kolink, Price = 70, SellPrice = 23, LevelUnlock = 12, LevelPercent = 20, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 380, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_Pro_RGB_120, Heat_Away_Pro_RGB_120, Heat_Away_Pro_RGB_120, Heat_Away_Pro_RGB_120 }, InherentCooling = 0 }; cases.Add(Observatory__Black_);
            Case Observatory__White_ = new Case() { Id = 212, Name = "Observatory (White)", PartType = PartType.Case, Manufacturer = Kolink, Price = 70, SellPrice = 23, LevelUnlock = 12, LevelPercent = 20, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 380, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_Pro_RGB_120, Heat_Away_Pro_RGB_120, Heat_Away_Pro_RGB_120, Heat_Away_Pro_RGB_120 }, InherentCooling = 0 }; cases.Add(Observatory__White_);
            Case Stronghold__Black_ = new Case() { Id = 213, Name = "Stronghold (Black)", PartType = PartType.Case, Manufacturer = Kolink, Price = 45, SellPrice = 15, LevelUnlock = 12, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 380, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Fan_120, Fan_120 }, InherentCooling = 0 }; cases.Add(Stronghold__Black_);
            Case Stronghold__White_ = new Case() { Id = 214, Name = "Stronghold (White)", PartType = PartType.Case, Manufacturer = Kolink, Price = 45, SellPrice = 15, LevelUnlock = 12, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 380, MaxCPUFanHeight = 160, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Fan_120, Fan_120 }, InherentCooling = 0 }; cases.Add(Stronghold__White_);
            Case LANCOOL_ONE_Digital__Gold_ = new Case() { Id = 215, Name = "LANCOOL ONE Digital (Gold)", PartType = PartType.Case, Manufacturer = Lian_Li, Price = 100, SellPrice = 33, LevelUnlock = 9, LevelPercent = 30, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 224, MaxGPULength = 420, MaxCPUFanHeight = 175, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(LANCOOL_ONE_Digital__Gold_);
            Case LANCOOL_ONE_Digital__White_ = new Case() { Id = 216, Name = "LANCOOL ONE Digital (White)", PartType = PartType.Case, Manufacturer = Lian_Li, Price = 100, SellPrice = 33, LevelUnlock = 9, LevelPercent = 30, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 224, MaxGPULength = 420, MaxCPUFanHeight = 175, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(LANCOOL_ONE_Digital__White_);
            Case O11D_XL_S = new Case() { Id = 217, Name = "O11D XL-S", PartType = PartType.Case, Manufacturer = Lian_Li, Price = 200, SellPrice = 67, LevelUnlock = 14, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 280, MaxGPULength = 446, MaxCPUFanHeight = 167, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(O11D_XL_S);
            Case O11D_XL_W = new Case() { Id = 218, Name = "O11D XL-W", PartType = PartType.Case, Manufacturer = Lian_Li, Price = 200, SellPrice = 67, LevelUnlock = 14, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 280, MaxGPULength = 446, MaxCPUFanHeight = 167, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(O11D_XL_W);
            Case O11D_XL_X = new Case() { Id = 219, Name = "O11D XL-X", PartType = PartType.Case, Manufacturer = Lian_Li, Price = 200, SellPrice = 67, LevelUnlock = 14, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 280, MaxGPULength = 446, MaxCPUFanHeight = 167, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(O11D_XL_X);
            Case PC_O11_Dynamic = new Case() { Id = 220, Name = "PC-O11 Dynamic", PartType = PartType.Case, Manufacturer = Lian_Li, Price = 160, SellPrice = 53, LevelUnlock = 9, LevelPercent = 60, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 0, MaxPsuLength = 210, MaxGPULength = 420, MaxCPUFanHeight = 155, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(PC_O11_Dynamic);
            Case TU150__Black___Window_ = new Case() { Id = 221, Name = "TU150 (Black + Window)", PartType = PartType.Case, Manufacturer = Lian_Li, Price = 110, SellPrice = 37, LevelUnlock = 28, LevelPercent = 65, Lighting = null, CaseSize = CaseSize.Cube, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 140, MaxGPULength = 320, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(TU150__Black___Window_);
            Case TU150__Black_ = new Case() { Id = 222, Name = "TU150 (Black)", PartType = PartType.Case, Manufacturer = Lian_Li, Price = 110, SellPrice = 37, LevelUnlock = 28, LevelPercent = 65, Lighting = null, CaseSize = CaseSize.Cube, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 140, MaxGPULength = 320, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(TU150__Black_);
            Case TU150__Silver___Window_ = new Case() { Id = 223, Name = "TU150 (Silver + Window)", PartType = PartType.Case, Manufacturer = Lian_Li, Price = 110, SellPrice = 37, LevelUnlock = 28, LevelPercent = 65, Lighting = null, CaseSize = CaseSize.Cube, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 140, MaxGPULength = 320, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(TU150__Silver___Window_);
            Case TU150__Silver_ = new Case() { Id = 224, Name = "TU150 (Silver)", PartType = PartType.Case, Manufacturer = Lian_Li, Price = 110, SellPrice = 37, LevelUnlock = 28, LevelPercent = 65, Lighting = null, CaseSize = CaseSize.Cube, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 140, MaxGPULength = 320, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(TU150__Silver_);
            Case MPG_Gungnir_100 = new Case() { Id = 225, Name = "MPG Gungnir 100", PartType = PartType.Case, Manufacturer = MSI, Price = 130, SellPrice = 43, LevelUnlock = 6, LevelPercent = 40, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 200, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { SP120_RGB_LED, Heat_Away_120, Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(MPG_Gungnir_100);
            Case MPG_Gungnir_110R = new Case() { Id = 226, Name = "MPG Gungnir 110R", PartType = PartType.Case, Manufacturer = MSI, Price = 110, SellPrice = 37, LevelUnlock = 8, LevelPercent = 80, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 180, MaxGPULength = 340, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { N20mm_ARGB__Silver_Logo_, N20mm_ARGB__Silver_Logo_, N20mm_ARGB__Silver_Logo_, N20mm_ARGB__Black_Logo_ }, InherentCooling = 0 }; cases.Add(MPG_Gungnir_110R);
            Case MPG_MAG_Vampiric_010 = new Case() { Id = 227, Name = "MPG MAG Vampiric 010", PartType = PartType.Case, Manufacturer = MSI, Price = 50, SellPrice = 17, LevelUnlock = 8, LevelPercent = 40, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 200, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(MPG_MAG_Vampiric_010);
            Case MPG_SEKIRA_500G = new Case() { Id = 228, Name = "MPG SEKIRA 500G", PartType = PartType.Case, Manufacturer = MSI, Price = 190, SellPrice = 63, LevelUnlock = 8, LevelPercent = 60, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { N20mm, N00mm, N00mm }, InherentCooling = 0 }; cases.Add(MPG_SEKIRA_500G);
            Case MPG_SEKIRA_500P = new Case() { Id = 229, Name = "MPG SEKIRA 500P", PartType = PartType.Case, Manufacturer = MSI, Price = 180, SellPrice = 60, LevelUnlock = 8, LevelPercent = 60, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { N20mm, N20mm, N20mm, N20mm }, InherentCooling = 0 }; cases.Add(MPG_SEKIRA_500P);
            Case MPG_SEKIRA_500X = new Case() { Id = 230, Name = "MPG SEKIRA 500X", PartType = PartType.Case, Manufacturer = MSI, Price = 220, SellPrice = 73, LevelUnlock = 8, LevelPercent = 60, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 400, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { N20mm_RGB, MAG_MAX_F20A_1, MAG_MAX_F20A_1, MAG_MAX_F20A_1, N00mm }, InherentCooling = 0 }; cases.Add(MPG_SEKIRA_500X);
            Case H200__Black___Blue_ = new Case() { Id = 231, Name = "H200 (Black + Blue)", PartType = PartType.Case, Manufacturer = NZXT, Price = 90, SellPrice = 30, LevelUnlock = 29, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { ATX, SFX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 311, MaxGPULength = 325, MaxCPUFanHeight = 165, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H200__Black___Blue_);
            Case H200__Black___Red_ = new Case() { Id = 232, Name = "H200 (Black + Red)", PartType = PartType.Case, Manufacturer = NZXT, Price = 90, SellPrice = 30, LevelUnlock = 29, LevelPercent = 60, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { ATX, SFX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 311, MaxGPULength = 325, MaxCPUFanHeight = 165, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H200__Black___Red_);
            Case H200__Black_ = new Case() { Id = 233, Name = "H200 (Black)", PartType = PartType.Case, Manufacturer = NZXT, Price = 90, SellPrice = 30, LevelUnlock = 29, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { ATX, SFX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 311, MaxGPULength = 325, MaxCPUFanHeight = 165, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H200__Black_);
            Case H200__White_ = new Case() { Id = 234, Name = "H200 (White)", PartType = PartType.Case, Manufacturer = NZXT, Price = 90, SellPrice = 30, LevelUnlock = 29, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { ATX, SFX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 311, MaxGPULength = 325, MaxCPUFanHeight = 165, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H200__White_);
            Case H210i__Black___Red_ = new Case() { Id = 235, Name = "H210i (Black + Red)", PartType = PartType.Case, Manufacturer = NZXT, Price = 120, SellPrice = 40, LevelUnlock = 20, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 311, MaxGPULength = 325, MaxCPUFanHeight = 165, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H210i__Black___Red_);
            Case H210i__Black___White_ = new Case() { Id = 236, Name = "H210i (Black + White)", PartType = PartType.Case, Manufacturer = NZXT, Price = 120, SellPrice = 40, LevelUnlock = 20, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 311, MaxGPULength = 325, MaxCPUFanHeight = 165, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H210i__Black___White_);
            Case H210i__Black_ = new Case() { Id = 237, Name = "H210i (Black)", PartType = PartType.Case, Manufacturer = NZXT, Price = 120, SellPrice = 40, LevelUnlock = 20, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 311, MaxGPULength = 325, MaxCPUFanHeight = 165, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H210i__Black_);
            Case H400__Black___Blue_ = new Case() { Id = 238, Name = "H400 (Black + Blue)", PartType = PartType.Case, Manufacturer = NZXT, Price = 110, SellPrice = 37, LevelUnlock = 29, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 411, MaxCPUFanHeight = 164, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H400__Black___Blue_);
            Case H400__Black___Red_ = new Case() { Id = 239, Name = "H400 (Black + Red)", PartType = PartType.Case, Manufacturer = NZXT, Price = 110, SellPrice = 37, LevelUnlock = 29, LevelPercent = 60, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 411, MaxCPUFanHeight = 164, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H400__Black___Red_);
            Case H400__Black_ = new Case() { Id = 240, Name = "H400 (Black)", PartType = PartType.Case, Manufacturer = NZXT, Price = 110, SellPrice = 37, LevelUnlock = 29, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 411, MaxCPUFanHeight = 164, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H400__Black_);
            Case H400__White_ = new Case() { Id = 241, Name = "H400 (White)", PartType = PartType.Case, Manufacturer = NZXT, Price = 110, SellPrice = 37, LevelUnlock = 29, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 411, MaxCPUFanHeight = 164, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H400__White_);
            Case H440___Designed_by_Razer = new Case() { Id = 242, Name = "H440 - Designed by Razer", PartType = PartType.Case, Manufacturer = NZXT, Price = 200, SellPrice = 67, LevelUnlock = 11, LevelPercent = 60, Lighting = Color.Green, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 406, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120, Heat_Away_120, Heat_Away_140 }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(H440___Designed_by_Razer);
            Case H440__Black___Blue_ = new Case() { Id = 243, Name = "H440 (Black + Blue)", PartType = PartType.Case, Manufacturer = NZXT, Price = 120, SellPrice = 40, LevelUnlock = 10, LevelPercent = 20, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 428, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_120, Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(H440__Black___Blue_);
            Case H440__Black___Green_ = new Case() { Id = 244, Name = "H440 (Black + Green)", PartType = PartType.Case, Manufacturer = NZXT, Price = 120, SellPrice = 40, LevelUnlock = 10, LevelPercent = 80, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 428, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_120, Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(H440__Black___Green_);
            Case H440__Black___Orange_ = new Case() { Id = 245, Name = "H440 (Black + Orange)", PartType = PartType.Case, Manufacturer = NZXT, Price = 120, SellPrice = 40, LevelUnlock = 10, LevelPercent = 60, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 428, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_120, Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(H440__Black___Orange_);
            Case H440__Black___Red_ = new Case() { Id = 246, Name = "H440 (Black + Red)", PartType = PartType.Case, Manufacturer = NZXT, Price = 120, SellPrice = 40, LevelUnlock = 10, LevelPercent = 40, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 428, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_120, Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(H440__Black___Red_);
            Case H440__Black_ = new Case() { Id = 247, Name = "H440 (Black)", PartType = PartType.Case, Manufacturer = NZXT, Price = 120, SellPrice = 40, LevelUnlock = 10, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 428, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_120, Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(H440__Black_);
            Case H440__PC_Building_Simulator_Limited_Edition_ = new Case() { Id = 248, Name = "H440 (PC Building Simulator Limited Edition)", PartType = PartType.Case, Manufacturer = NZXT, Price = 180, SellPrice = 60, LevelUnlock = 11, LevelPercent = 90, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 428, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_120, Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(H440__PC_Building_Simulator_Limited_Edition_);
            Case H440__White___Purple_ = new Case() { Id = 249, Name = "H440 (White + Purple)", PartType = PartType.Case, Manufacturer = NZXT, Price = 120, SellPrice = 40, LevelUnlock = 11, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 428, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_120, Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(H440__White___Purple_);
            Case H440__White_ = new Case() { Id = 250, Name = "H440 (White)", PartType = PartType.Case, Manufacturer = NZXT, Price = 120, SellPrice = 40, LevelUnlock = 10, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 428, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_120, Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(H440__White_);
            Case H440_Hyper_Beast = new Case() { Id = 251, Name = "H440 Hyper Beast", PartType = PartType.Case, Manufacturer = NZXT, Price = 200, SellPrice = 67, LevelUnlock = 11, LevelPercent = 30, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 428, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_120, Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 294, InherentCooling = 0 }; cases.Add(H440_Hyper_Beast);
            Case H500___Re_Animator = new Case() { Id = 252, Name = "H500 - Re-Animator", PartType = PartType.Case, Manufacturer = NZXT, Price = 200, SellPrice = 67, LevelUnlock = 26, LevelPercent = 90, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 381, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H500___Re_Animator);
            Case H500___Split = new Case() { Id = 253, Name = "H500 - Split", PartType = PartType.Case, Manufacturer = NZXT, Price = 200, SellPrice = 67, LevelUnlock = 26, LevelPercent = 90, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 381, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H500___Split);
            Case H500__Black___Blue_ = new Case() { Id = 254, Name = "H500 (Black + Blue)", PartType = PartType.Case, Manufacturer = NZXT, Price = 100, SellPrice = 33, LevelUnlock = 26, LevelPercent = 80, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 381, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H500__Black___Blue_);
            Case H500__Black___Red_ = new Case() { Id = 255, Name = "H500 (Black + Red)", PartType = PartType.Case, Manufacturer = NZXT, Price = 100, SellPrice = 33, LevelUnlock = 26, LevelPercent = 60, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 381, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H500__Black___Red_);
            Case H500__Black_ = new Case() { Id = 256, Name = "H500 (Black)", PartType = PartType.Case, Manufacturer = NZXT, Price = 100, SellPrice = 33, LevelUnlock = 26, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 381, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H500__Black_);
            Case H500__White_ = new Case() { Id = 257, Name = "H500 (White)", PartType = PartType.Case, Manufacturer = NZXT, Price = 100, SellPrice = 33, LevelUnlock = 26, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 381, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H500__White_);
            Case H510_Elite__Black___White_ = new Case() { Id = 258, Name = "H510 Elite (Black + White)", PartType = PartType.Case, Manufacturer = NZXT, Price = 170, SellPrice = 57, LevelUnlock = 20, LevelPercent = 25, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 311, MaxGPULength = 368, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_140mm__Black_, Aer_P_140mm__White_, Aer_P_140mm__White_ }, InherentCooling = 0 }; cases.Add(H510_Elite__Black___White_);
            Case H510_Elite__Black_ = new Case() { Id = 259, Name = "H510 Elite (Black)", PartType = PartType.Case, Manufacturer = NZXT, Price = 170, SellPrice = 57, LevelUnlock = 20, LevelPercent = 25, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 311, MaxGPULength = 368, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_140mm__Black_, Aer_P_140mm__White_, Aer_P_140mm__White_ }, InherentCooling = 0 }; cases.Add(H510_Elite__Black_);
            Case H510i__Black___Red_ = new Case() { Id = 260, Name = "H510i (Black + Red)", PartType = PartType.Case, Manufacturer = NZXT, Price = 110, SellPrice = 37, LevelUnlock = 20, LevelPercent = 50, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 311, MaxGPULength = 368, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H510i__Black___Red_);
            Case H510i__Black___White_ = new Case() { Id = 261, Name = "H510i (Black + White)", PartType = PartType.Case, Manufacturer = NZXT, Price = 110, SellPrice = 37, LevelUnlock = 20, LevelPercent = 50, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 311, MaxGPULength = 368, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H510i__Black___White_);
            Case H510i__Black_ = new Case() { Id = 262, Name = "H510i (Black)", PartType = PartType.Case, Manufacturer = NZXT, Price = 110, SellPrice = 37, LevelUnlock = 20, LevelPercent = 50, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 311, MaxGPULength = 368, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H510i__Black_);
            Case H700i___Bush_Flight_Simulator = new Case() { Id = 263, Name = "H700i - Bush Flight Simulator", PartType = PartType.Case, Manufacturer = NZXT, Price = 300, SellPrice = 100, LevelUnlock = 27, LevelPercent = 90, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 413, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_140mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H700i___Bush_Flight_Simulator);
            Case H700i___Extinction_Wars = new Case() { Id = 264, Name = "H700i - Extinction Wars", PartType = PartType.Case, Manufacturer = NZXT, Price = 300, SellPrice = 100, LevelUnlock = 27, LevelPercent = 90, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 413, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_140mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H700i___Extinction_Wars);
            Case H700i___Galaxy_Edition = new Case() { Id = 265, Name = "H700i - Galaxy Edition", PartType = PartType.Case, Manufacturer = NZXT, Price = 200, SellPrice = 67, LevelUnlock = 27, LevelPercent = 90, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 413, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_140mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H700i___Galaxy_Edition);
            Case H700i___Good_Company = new Case() { Id = 266, Name = "H700i - Good Company", PartType = PartType.Case, Manufacturer = NZXT, Price = 300, SellPrice = 100, LevelUnlock = 27, LevelPercent = 90, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 413, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_140mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H700i___Good_Company);
            Case H700i___Organ_Collector = new Case() { Id = 267, Name = "H700i - Organ Collector", PartType = PartType.Case, Manufacturer = NZXT, Price = 300, SellPrice = 100, LevelUnlock = 27, LevelPercent = 90, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 413, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_140mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H700i___Organ_Collector);
            Case H700i__Black___Blue_ = new Case() { Id = 268, Name = "H700i (Black + Blue)", PartType = PartType.Case, Manufacturer = NZXT, Price = 200, SellPrice = 67, LevelUnlock = 27, LevelPercent = 80, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 413, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_140mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H700i__Black___Blue_);
            Case H700i__Black___Red_ = new Case() { Id = 269, Name = "H700i (Black + Red)", PartType = PartType.Case, Manufacturer = NZXT, Price = 200, SellPrice = 67, LevelUnlock = 27, LevelPercent = 60, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 413, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_140mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H700i__Black___Red_);
            Case H700i__Black_ = new Case() { Id = 270, Name = "H700i (Black)", PartType = PartType.Case, Manufacturer = NZXT, Price = 200, SellPrice = 67, LevelUnlock = 27, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 413, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_140mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H700i__Black_);
            Case H700i__White_ = new Case() { Id = 271, Name = "H700i (White)", PartType = PartType.Case, Manufacturer = NZXT, Price = 200, SellPrice = 67, LevelUnlock = 27, LevelPercent = 30, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 413, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_140mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H700i__White_);
            Case H710i__Black___Red_ = new Case() { Id = 272, Name = "H710i (Black + Red)", PartType = PartType.Case, Manufacturer = NZXT, Price = 235, SellPrice = 78, LevelUnlock = 20, LevelPercent = 75, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 413, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_140mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H710i__Black___Red_);
            Case H710i__Black_ = new Case() { Id = 273, Name = "H710i (Black)", PartType = PartType.Case, Manufacturer = NZXT, Price = 235, SellPrice = 78, LevelUnlock = 20, LevelPercent = 75, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 413, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_140mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H710i__Black_);
            Case H710i__White_ = new Case() { Id = 274, Name = "H710i (White)", PartType = PartType.Case, Manufacturer = NZXT, Price = 235, SellPrice = 78, LevelUnlock = 20, LevelPercent = 75, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 413, MaxCPUFanHeight = 185, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Aer_P_140mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_, Aer_P_120mm__Black_ }, InherentCooling = 0 }; cases.Add(H710i__White_);
            Case S340___Designed_by_Razer = new Case() { Id = 275, Name = "S340 - Designed by Razer", PartType = PartType.Case, Manufacturer = NZXT, Price = 200, SellPrice = 67, LevelUnlock = 6, LevelPercent = 60, Lighting = Color.Green, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 364, MaxCPUFanHeight = 161, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 334, InherentCooling = 0 }; cases.Add(S340___Designed_by_Razer);
            Case S340__Black___Blue_ = new Case() { Id = 276, Name = "S340 (Black + Blue)", PartType = PartType.Case, Manufacturer = NZXT, Price = 80, SellPrice = 27, LevelUnlock = 5, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 364, MaxCPUFanHeight = 161, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 334, InherentCooling = 0 }; cases.Add(S340__Black___Blue_);
            Case S340__Black___Red_ = new Case() { Id = 277, Name = "S340 (Black + Red)", PartType = PartType.Case, Manufacturer = NZXT, Price = 80, SellPrice = 27, LevelUnlock = 5, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 364, MaxCPUFanHeight = 161, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 334, InherentCooling = 0 }; cases.Add(S340__Black___Red_);
            Case S340__Black_ = new Case() { Id = 278, Name = "S340 (Black)", PartType = PartType.Case, Manufacturer = NZXT, Price = 80, SellPrice = 27, LevelUnlock = 5, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 364, MaxCPUFanHeight = 161, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 334, InherentCooling = 0 }; cases.Add(S340__Black_);
            Case S340__White___Purple_ = new Case() { Id = 279, Name = "S340 (White + Purple)", PartType = PartType.Case, Manufacturer = NZXT, Price = 80, SellPrice = 27, LevelUnlock = 6, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 364, MaxCPUFanHeight = 161, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 334, InherentCooling = 0 }; cases.Add(S340__White___Purple_);
            Case S340__White_ = new Case() { Id = 280, Name = "S340 (White)", PartType = PartType.Case, Manufacturer = NZXT, Price = 80, SellPrice = 27, LevelUnlock = 5, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 364, MaxCPUFanHeight = 161, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 334, InherentCooling = 0 }; cases.Add(S340__White_);
            Case S340_Elite__Black___Blue_ = new Case() { Id = 281, Name = "S340 Elite (Black + Blue)", PartType = PartType.Case, Manufacturer = NZXT, Price = 100, SellPrice = 33, LevelUnlock = 7, LevelPercent = 40, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 364, MaxCPUFanHeight = 161, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 334, InherentCooling = 0 }; cases.Add(S340_Elite__Black___Blue_);
            Case S340_Elite__Black___Red_ = new Case() { Id = 282, Name = "S340 Elite (Black + Red)", PartType = PartType.Case, Manufacturer = NZXT, Price = 100, SellPrice = 33, LevelUnlock = 7, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 364, MaxCPUFanHeight = 161, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 334, InherentCooling = 0 }; cases.Add(S340_Elite__Black___Red_);
            Case S340_Elite__Black_ = new Case() { Id = 283, Name = "S340 Elite (Black)", PartType = PartType.Case, Manufacturer = NZXT, Price = 100, SellPrice = 33, LevelUnlock = 7, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 364, MaxCPUFanHeight = 161, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 334, InherentCooling = 0 }; cases.Add(S340_Elite__Black_);
            Case S340_Elite__White_ = new Case() { Id = 284, Name = "S340 Elite (White)", PartType = PartType.Case, Manufacturer = NZXT, Price = 100, SellPrice = 33, LevelUnlock = 7, LevelPercent = 60, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 364, MaxCPUFanHeight = 161, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 334, InherentCooling = 0 }; cases.Add(S340_Elite__White_);
            Case S340_Elite_Hyper_Beast = new Case() { Id = 285, Name = "S340 Elite Hyper Beast", PartType = PartType.Case, Manufacturer = NZXT, Price = 200, SellPrice = 67, LevelUnlock = 7, LevelPercent = 80, Lighting = Color.Blue, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 180, MaxGPULength = 364, MaxCPUFanHeight = 161, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, RestrictedGpuLength = 334, InherentCooling = 0 }; cases.Add(S340_Elite_Hyper_Beast);
            Case OBT_BC1__Black_ = new Case() { Id = 286, Name = "OBT-BC1 (Black)", PartType = PartType.Case, Manufacturer = Open_Benchtable, Price = 199, SellPrice = 66, LevelUnlock = 9, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Open_Frame, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 500, MaxCPUFanHeight = 200, UseForWcJobs = false, IsOpenBench = true, InherentCooling = 0.7 }; cases.Add(OBT_BC1__Black_);
            Case OBT_BC1__Red_ = new Case() { Id = 287, Name = "OBT-BC1 (Red)", PartType = PartType.Case, Manufacturer = Open_Benchtable, Price = 199, SellPrice = 66, LevelUnlock = 9, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Open_Frame, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 500, MaxCPUFanHeight = 200, UseForWcJobs = false, IsOpenBench = true, InherentCooling = 0.7 }; cases.Add(OBT_BC1__Red_);
            Case OBT_BC1__Silver_ = new Case() { Id = 288, Name = "OBT-BC1 (Silver)", PartType = PartType.Case, Manufacturer = Open_Benchtable, Price = 189, SellPrice = 63, LevelUnlock = 9, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Open_Frame, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 500, MaxCPUFanHeight = 200, UseForWcJobs = false, IsOpenBench = true, InherentCooling = 0.7 }; cases.Add(OBT_BC1__Silver_);
            Case Asterion_Plus = new Case() { Id = 289, Name = "Asterion Plus", PartType = PartType.Case, Manufacturer = Raijintek, Price = 140, SellPrice = 47, LevelUnlock = 1, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 340, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(Asterion_Plus);
            Case COEUS_ELITE_TC = new Case() { Id = 290, Name = "COEUS ELITE TC", PartType = PartType.Case, Manufacturer = Raijintek, Price = 180, SellPrice = 60, LevelUnlock = 30, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 350, MaxCPUFanHeight = 175, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { IRIS_12, IRIS_12, IRIS_12 }, InherentCooling = 0 }; cases.Add(COEUS_ELITE_TC);
            Case COEUS_EVO_TC = new Case() { Id = 291, Name = "COEUS EVO TC", PartType = PartType.Case, Manufacturer = Raijintek, Price = 200, SellPrice = 67, LevelUnlock = 30, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 350, MaxCPUFanHeight = 175, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { IRIS_12, IRIS_12, IRIS_12, IRIS_12 }, InherentCooling = 0 }; cases.Add(COEUS_EVO_TC);
            Case ENYO = new Case() { Id = 292, Name = "ENYO", PartType = PartType.Case, Manufacturer = Raijintek, Price = 500, SellPrice = 167, LevelUnlock = 30, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Super_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 3, MaxPsuLength = 280, MaxGPULength = 615, MaxCPUFanHeight = 188, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0.5 }; cases.Add(ENYO);
            Case ERIS_EVO = new Case() { Id = 293, Name = "ERIS EVO", PartType = PartType.Case, Manufacturer = Raijintek, Price = 400, SellPrice = 133, LevelUnlock = 30, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Full_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 512, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(ERIS_EVO);
            Case METIS__Black_ = new Case() { Id = 294, Name = "METIS (Black)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 80, SellPrice = 27, LevelUnlock = 18, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 170, MaxCPUFanHeight = 160, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(METIS__Black_);
            Case METIS__Blue_ = new Case() { Id = 295, Name = "METIS (Blue)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 80, SellPrice = 27, LevelUnlock = 18, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 170, MaxCPUFanHeight = 160, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(METIS__Blue_);
            Case METIS__Gold_ = new Case() { Id = 296, Name = "METIS (Gold)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 80, SellPrice = 27, LevelUnlock = 18, LevelPercent = 60, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 170, MaxCPUFanHeight = 160, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(METIS__Gold_);
            Case METIS__Green_ = new Case() { Id = 297, Name = "METIS (Green)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 80, SellPrice = 27, LevelUnlock = 18, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 170, MaxCPUFanHeight = 160, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(METIS__Green_);
            Case METIS__Red_ = new Case() { Id = 298, Name = "METIS (Red)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 80, SellPrice = 27, LevelUnlock = 18, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 170, MaxCPUFanHeight = 160, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(METIS__Red_);
            Case METIS__Silver_ = new Case() { Id = 299, Name = "METIS (Silver)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 80, SellPrice = 27, LevelUnlock = 18, LevelPercent = 60, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 170, MaxCPUFanHeight = 160, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(METIS__Silver_);
            Case METIS__White_ = new Case() { Id = 300, Name = "METIS (White)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 80, SellPrice = 27, LevelUnlock = 18, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 170, MaxCPUFanHeight = 160, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(METIS__White_);
            Case NYX_PRO__Red_ = new Case() { Id = 301, Name = "NYX PRO (Red)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 350, SellPrice = 117, LevelUnlock = 30, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Full_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 420, MaxCPUFanHeight = 83, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(NYX_PRO__Red_);
            Case NYX_PRO__Titan_ = new Case() { Id = 302, Name = "NYX PRO (Titan)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 350, SellPrice = 117, LevelUnlock = 30, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Full_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 420, MaxCPUFanHeight = 83, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(NYX_PRO__Titan_);
            Case NYX_PRO__White_ = new Case() { Id = 303, Name = "NYX PRO (White)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 350, SellPrice = 117, LevelUnlock = 30, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Full_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 420, MaxCPUFanHeight = 83, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(NYX_PRO__White_);
            Case NYX_PRO__Yellow_ = new Case() { Id = 304, Name = "NYX PRO (Yellow)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 350, SellPrice = 117, LevelUnlock = 30, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Full_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX, SSI_EEB }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 300, MaxGPULength = 420, MaxCPUFanHeight = 83, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(NYX_PRO__Yellow_);
            Case OPHION = new Case() { Id = 305, Name = "OPHION", PartType = PartType.Case, Manufacturer = Raijintek, Price = 180, SellPrice = 60, LevelUnlock = 28, LevelPercent = 80, Lighting = null, CaseSize = CaseSize.Cube, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 0, Number140mmSlots = 0, MaxPsuLength = 140, MaxGPULength = 330, MaxCPUFanHeight = 90, UseForWcJobs = false, IsOpenBench = false, InherentCooling = 0 }; cases.Add(OPHION);
            Case OPHION_EVO = new Case() { Id = 306, Name = "OPHION EVO", PartType = PartType.Case, Manufacturer = Raijintek, Price = 200, SellPrice = 67, LevelUnlock = 28, LevelPercent = 80, Lighting = null, CaseSize = CaseSize.Cube, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 140, MaxGPULength = 330, MaxCPUFanHeight = 90, UseForWcJobs = false, IsOpenBench = false, InherentCooling = 0 }; cases.Add(OPHION_EVO);
            Case PAEAN = new Case() { Id = 307, Name = "PAEAN", PartType = PartType.Case, Manufacturer = Raijintek, Price = 250, SellPrice = 83, LevelUnlock = 14, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Open_Frame, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 400, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0.5 }; cases.Add(PAEAN);
            Case PAEAN_M = new Case() { Id = 308, Name = "PAEAN M", PartType = PartType.Case, Manufacturer = Raijintek, Price = 130, SellPrice = 43, LevelUnlock = 28, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Open_Frame, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 200, MaxGPULength = 430, MaxCPUFanHeight = 140, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0.5 }; cases.Add(PAEAN_M);
            Case SILENOS = new Case() { Id = 309, Name = "SILENOS", PartType = PartType.Case, Manufacturer = Raijintek, Price = 125, SellPrice = 42, LevelUnlock = 18, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Full_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 330, MaxCPUFanHeight = 166, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(SILENOS);
            Case STYX__Black_ = new Case() { Id = 310, Name = "STYX (Black)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 105, SellPrice = 35, LevelUnlock = 30, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 280, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(STYX__Black_);
            Case STYX__Blue_ = new Case() { Id = 311, Name = "STYX (Blue)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 105, SellPrice = 35, LevelUnlock = 30, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 280, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(STYX__Blue_);
            Case STYX__Gold_ = new Case() { Id = 312, Name = "STYX (Gold)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 105, SellPrice = 35, LevelUnlock = 30, LevelPercent = 60, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 280, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(STYX__Gold_);
            Case STYX__Green_ = new Case() { Id = 313, Name = "STYX (Green)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 105, SellPrice = 35, LevelUnlock = 30, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 280, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(STYX__Green_);
            Case STYX__Red_ = new Case() { Id = 314, Name = "STYX (Red)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 105, SellPrice = 35, LevelUnlock = 30, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 280, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(STYX__Red_);
            Case STYX__Silver_ = new Case() { Id = 315, Name = "STYX (Silver)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 105, SellPrice = 35, LevelUnlock = 30, LevelPercent = 60, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 280, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(STYX__Silver_);
            Case STYX__White_ = new Case() { Id = 316, Name = "STYX (White)", PartType = PartType.Case, Manufacturer = Raijintek, Price = 105, SellPrice = 35, LevelUnlock = 30, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 280, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(STYX__White_);
            Case Thetis = new Case() { Id = 317, Name = "Thetis", PartType = PartType.Case, Manufacturer = Raijintek, Price = 80, SellPrice = 27, LevelUnlock = 4, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Cube, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 160, MaxGPULength = 280, MaxCPUFanHeight = 170, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(Thetis);
            Case ZOFOS_EVO = new Case() { Id = 318, Name = "ZOFOS EVO", PartType = PartType.Case, Manufacturer = Raijintek, Price = 180, SellPrice = 60, LevelUnlock = 29, LevelPercent = 20, Lighting = null, CaseSize = CaseSize.Full_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 300, MaxGPULength = 470, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { IRIS_12, Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(ZOFOS_EVO);
            Case CS381 = new Case() { Id = 319, Name = "CS381", PartType = PartType.Case, Manufacturer = SilverStone, Price = 350, SellPrice = 117, LevelUnlock = 28, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, PSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 250, MaxGPULength = 267, MaxCPUFanHeight = 60, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(CS381);
            Case FARA_B1 = new Case() { Id = 320, Name = "FARA B1", PartType = PartType.Case, Manufacturer = SilverStone, Price = 60, SellPrice = 20, LevelUnlock = 28, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 160, MaxGPULength = 322, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(FARA_B1);
            Case FT05__Black_ = new Case() { Id = 321, Name = "FT05 (Black)", PartType = PartType.Case, Manufacturer = SilverStone, Price = 160, SellPrice = 53, LevelUnlock = 8, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 312, MaxCPUFanHeight = 162, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { AP182__Black_, AP182__Black_ }, InherentCooling = 0 }; cases.Add(FT05__Black_);
            Case FT05__White_ = new Case() { Id = 322, Name = "FT05 (White)", PartType = PartType.Case, Manufacturer = SilverStone, Price = 160, SellPrice = 53, LevelUnlock = 8, LevelPercent = 50, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 2, MaxPsuLength = 250, MaxGPULength = 312, MaxCPUFanHeight = 162, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { AP182__Black_, AP182__Black_ }, InherentCooling = 0 }; cases.Add(FT05__White_);
            Case LD01 = new Case() { Id = 323, Name = "LD01", PartType = PartType.Case, Manufacturer = SilverStone, Price = 115, SellPrice = 38, LevelUnlock = 14, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 220, MaxGPULength = 370, MaxCPUFanHeight = 168, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(LD01);
            Case LD03 = new Case() { Id = 324, Name = "LD03", PartType = PartType.Case, Manufacturer = SilverStone, Price = 90, SellPrice = 30, LevelUnlock = 10, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { SFX }, Number120mmSlots = 1, Number140mmSlots = 0, MaxPsuLength = 130, MaxGPULength = 309, MaxCPUFanHeight = 190, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(LD03);
            Case PM01_RGB__Black_ = new Case() { Id = 325, Name = "PM01-RGB (Black)", PartType = PartType.Case, Manufacturer = SilverStone, Price = 160, SellPrice = 53, LevelUnlock = 12, LevelPercent = 65, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 240, MaxGPULength = 419, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_140, Heat_Away_140, Heat_Away_140 }, InherentCooling = 0 }; cases.Add(PM01_RGB__Black_);
            Case PM01_RGB__White_ = new Case() { Id = 326, Name = "PM01-RGB (White)", PartType = PartType.Case, Manufacturer = SilverStone, Price = 160, SellPrice = 53, LevelUnlock = 12, LevelPercent = 65, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 240, MaxGPULength = 419, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_140, Heat_Away_140, Heat_Away_140, Heat_Away_140 }, InherentCooling = 0 }; cases.Add(PM01_RGB__White_);
            Case PS14__Black___Window_ = new Case() { Id = 327, Name = "PS14 (Black + Window)", PartType = PartType.Case, Manufacturer = SilverStone, Price = 40, SellPrice = 13, LevelUnlock = 1, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 220, MaxGPULength = 401, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(PS14__Black___Window_);
            Case PS14__Black_ = new Case() { Id = 328, Name = "PS14 (Black)", PartType = PartType.Case, Manufacturer = SilverStone, Price = 40, SellPrice = 13, LevelUnlock = 1, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 220, MaxGPULength = 401, MaxCPUFanHeight = 165, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120 }, InherentCooling = 0 }; cases.Add(PS14__Black_);
            Case RL07__Black_ = new Case() { Id = 329, Name = "RL07 (Black)", PartType = PartType.Case, Manufacturer = SilverStone, Price = 300, SellPrice = 100, LevelUnlock = 16, LevelPercent = 60, Lighting = Color.Red, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 190, MaxGPULength = 415, MaxCPUFanHeight = 167, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(RL07__Black_);
            Case RL08__Red_ = new Case() { Id = 330, Name = "RL08 (Red)", PartType = PartType.Case, Manufacturer = SilverStone, Price = 120, SellPrice = 40, LevelUnlock = 10, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 220, MaxGPULength = 370, MaxCPUFanHeight = 168, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_RGB_120, Heat_Away_RGB_120 }, InherentCooling = 0 }; cases.Add(RL08__Red_);
            Case RL08__White_ = new Case() { Id = 331, Name = "RL08 (White)", PartType = PartType.Case, Manufacturer = SilverStone, Price = 120, SellPrice = 40, LevelUnlock = 10, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 2, MaxPsuLength = 220, MaxGPULength = 370, MaxCPUFanHeight = 168, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_RGB_120, Heat_Away_RGB_120 }, InherentCooling = 0 }; cases.Add(RL08__White_);
            Case RVX01__Blue_ = new Case() { Id = 332, Name = "RVX01 (Blue)", PartType = PartType.Case, Manufacturer = SilverStone, Price = 80, SellPrice = 27, LevelUnlock = 9, LevelPercent = 30, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 180, MaxGPULength = 347, MaxCPUFanHeight = 153, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(RVX01__Blue_);
            Case RVX01__Green_ = new Case() { Id = 333, Name = "RVX01 (Green)", PartType = PartType.Case, Manufacturer = SilverStone, Price = 80, SellPrice = 27, LevelUnlock = 9, LevelPercent = 60, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 180, MaxGPULength = 347, MaxCPUFanHeight = 153, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(RVX01__Green_);
            Case RVX01__Red_ = new Case() { Id = 334, Name = "RVX01 (Red)", PartType = PartType.Case, Manufacturer = SilverStone, Price = 80, SellPrice = 27, LevelUnlock = 9, LevelPercent = 1, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 2, Number140mmSlots = 0, MaxPsuLength = 180, MaxGPULength = 347, MaxCPUFanHeight = 153, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(RVX01__Red_);
            Case RVZ03__Black_ = new Case() { Id = 335, Name = "RVZ03 (Black)", PartType = PartType.Case, Manufacturer = SilverStone, Price = 135, SellPrice = 45, LevelUnlock = 18, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 0, Number140mmSlots = 0, MaxPsuLength = 140, MaxGPULength = 330, MaxCPUFanHeight = 60, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(RVZ03__Black_);
            Case RVZ03__White_ = new Case() { Id = 336, Name = "RVZ03 (White)", PartType = PartType.Case, Manufacturer = SilverStone, Price = 135, SellPrice = 45, LevelUnlock = 18, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Micro, MoboSizes = new List<MoboSize>() { Mini_ITX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 0, Number140mmSlots = 0, MaxPsuLength = 140, MaxGPULength = 330, MaxCPUFanHeight = 60, UseForWcJobs = false, IsOpenBench = false, CaseFans = new List<CaseFan>() { Heat_Away_120, Heat_Away_120 }, InherentCooling = 0 }; cases.Add(RVZ03__White_);
            Case Core_P5 = new Case() { Id = 337, Name = "Core P5", PartType = PartType.Case, Manufacturer = Thermaltake, Price = 200, SellPrice = 67, LevelUnlock = 26, LevelPercent = 32, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 3, MaxPsuLength = 200, MaxGPULength = 300, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(Core_P5);
            Case Core_P5_Green_Edition = new Case() { Id = 338, Name = "Core P5 Green Edition", PartType = PartType.Case, Manufacturer = Thermaltake, Price = 200, SellPrice = 67, LevelUnlock = 26, LevelPercent = 32, Lighting = null, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 3, MaxPsuLength = 200, MaxGPULength = 300, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, InherentCooling = 0 }; cases.Add(Core_P5_Green_Edition);
            Case View_37_RGB = new Case() { Id = 339, Name = "View 37 RGB", PartType = PartType.Case, Manufacturer = Thermaltake, Price = 150, SellPrice = 50, LevelUnlock = 24, LevelPercent = 1, Lighting = Color.RGB, CaseSize = CaseSize.Mid_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 3, Number140mmSlots = 3, MaxPsuLength = 220, MaxGPULength = 410, MaxCPUFanHeight = 180, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Riing_Plus_14_LED_RGB, Riing_Plus_14_LED_RGB, Riing_Plus_14_LED_RGB }, InherentCooling = 0 }; cases.Add(View_37_RGB);
            Case View_91_RGB = new Case() { Id = 340, Name = "View 91 RGB", PartType = PartType.Case, Manufacturer = Thermaltake, Price = 450, SellPrice = 150, LevelUnlock = 30, LevelPercent = 10, Lighting = Color.RGB, CaseSize = CaseSize.Super_Tower, MoboSizes = new List<MoboSize>() { Mini_ITX, Micro_ATX, S_ATX, E_ATX, XL_ATX }, PSUSizes = new List<PSUSize>() { ATX }, Number120mmSlots = 4, Number140mmSlots = 4, MaxPsuLength = 220, MaxGPULength = 470, MaxCPUFanHeight = 200, UseForWcJobs = true, IsOpenBench = false, CaseFans = new List<CaseFan>() { Riing_Plus_14_LED_RGB, Riing_Plus_14_LED_RGB, Riing_Plus_14_LED_RGB, Riing_Plus_14_LED_RGB }, InherentCooling = 0 }; cases.Add(View_91_RGB);
            #endregion
            _context.Case.AddRange(cases);
            #region CPU
            List<CPU> cpus = new List<CPU>();
            CPU Ryzen_3_Quad_Core_1200 = new CPU() { Id = 1, Name = "Ryzen 3 Quad Core 1200", PartType = PartType.CPU, Manufacturer = AMD, Price = 140, SellPrice = 47, LevelUnlock = 3, LevelPercent = 1, Lighting = null, Series = AMD_Ryzen_3, RankingScore = 988, Frequency = 3400, Cores = 4, CPUSocket = AM4, Wattage = 65, Overclockable = true, ThermalThrottling = 95, Voltage = 1.25, BasicCPUScore = 2945, ScoreToValueRatio = 21, DefaultMemorySpeed = 2666, OverclockedCPUScore = 3318, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 3950, CoreClockMultiplier = 0.002275, MemChannelsMultiplier = 0.504442, MemClockMultiplier = 0.000944 }; cpus.Add(Ryzen_3_Quad_Core_1200);
            CPU Ryzen_3_Quad_Core_1300X = new CPU() { Id = 2, Name = "Ryzen 3 Quad Core 1300X", PartType = PartType.CPU, Manufacturer = AMD, Price = 150, SellPrice = 50, LevelUnlock = 3, LevelPercent = 25, Lighting = null, Series = AMD_Ryzen_3, RankingScore = 1058, Frequency = 3700, Cores = 4, CPUSocket = AM4, Wattage = 65, Overclockable = true, ThermalThrottling = 95, Voltage = 1.3, BasicCPUScore = 3153, ScoreToValueRatio = 21, DefaultMemorySpeed = 2666, OverclockedCPUScore = 3337, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 4000, CoreClockMultiplier = 0.002055, MemChannelsMultiplier = 0.524845, MemClockMultiplier = 0.000823 }; cpus.Add(Ryzen_3_Quad_Core_1300X);
            CPU Ryzen_3_Quad_Core_3100 = new CPU() { Id = 3, Name = "Ryzen 3 Quad Core 3100", PartType = PartType.CPU, Manufacturer = AMD, Price = 280, SellPrice = 93, LevelUnlock = 32, LevelPercent = 1, Lighting = null, Series = AMD_Ryzen_3, RankingScore = 1621, Frequency = 3900, Cores = 4, CPUSocket = AM4, Wattage = 65, Overclockable = true, ThermalThrottling = 95, Voltage = 1.2, BasicCPUScore = 4831, ScoreToValueRatio = 17.3, DefaultMemorySpeed = 3200, OverclockedCPUScore = 4903, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 4200, CoreClockMultiplier = 0.000816, MemChannelsMultiplier = 1.136183, MemClockMultiplier = 0.001336 }; cpus.Add(Ryzen_3_Quad_Core_3100);
            CPU Ryzen_3_Quad_Core_3300X = new CPU() { Id = 4, Name = "Ryzen 3 Quad Core 3300X", PartType = PartType.CPU, Manufacturer = AMD, Price = 290, SellPrice = 97, LevelUnlock = 32, LevelPercent = 10, Lighting = null, Series = AMD_Ryzen_3, RankingScore = 1653, Frequency = 4300, Cores = 4, CPUSocket = AM4, Wattage = 65, Overclockable = true, ThermalThrottling = 95, Voltage = 1.2, BasicCPUScore = 4928, ScoreToValueRatio = 17, DefaultMemorySpeed = 3200, OverclockedCPUScore = 4989, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 4550, CoreClockMultiplier = 0.000816, MemChannelsMultiplier = 1.136183, MemClockMultiplier = 0.001336 }; cpus.Add(Ryzen_3_Quad_Core_3300X);
            CPU Ryzen_5_Quad_Core_1400 = new CPU() { Id = 5, Name = "Ryzen 5 Quad Core 1400", PartType = PartType.CPU, Manufacturer = AMD, Price = 170, SellPrice = 57, LevelUnlock = 3, LevelPercent = 1, Lighting = null, Series = AMD_Ryzen_5, RankingScore = 1247, Frequency = 3400, Cores = 4, CPUSocket = AM4, Wattage = 65, Overclockable = true, ThermalThrottling = 95, Voltage = 1.3, BasicCPUScore = 3716, ScoreToValueRatio = 21.9, DefaultMemorySpeed = 2666, OverclockedCPUScore = 4150, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 4000, CoreClockMultiplier = 0.002428, MemChannelsMultiplier = 0.904389, MemClockMultiplier = 0.00109 }; cpus.Add(Ryzen_5_Quad_Core_1400);
            CPU Ryzen_5_Quad_Core_1500X = new CPU() { Id = 6, Name = "Ryzen 5 Quad Core 1500X", PartType = PartType.CPU, Manufacturer = AMD, Price = 190, SellPrice = 63, LevelUnlock = 3, LevelPercent = 50, Lighting = null, Series = AMD_Ryzen_5, RankingScore = 1320, Frequency = 3700, Cores = 4, CPUSocket = AM4, Wattage = 65, Overclockable = true, ThermalThrottling = 95, Voltage = 1.3, BasicCPUScore = 3933, ScoreToValueRatio = 20.7, DefaultMemorySpeed = 2666, OverclockedCPUScore = 4150, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 4000, CoreClockMultiplier = 0.002428, MemChannelsMultiplier = 0.904389, MemClockMultiplier = 0.00109 }; cpus.Add(Ryzen_5_Quad_Core_1500X);
            CPU Ryzen_5_Six_Core_1600 = new CPU() { Id = 7, Name = "Ryzen 5 Six Core 1600", PartType = PartType.CPU, Manufacturer = AMD, Price = 260, SellPrice = 87, LevelUnlock = 7, LevelPercent = 1, Lighting = null, Series = AMD_Ryzen_5, RankingScore = 1865, Frequency = 3600, Cores = 6, CPUSocket = AM4, Wattage = 65, Overclockable = true, ThermalThrottling = 95, Voltage = 1.3, BasicCPUScore = 5558, ScoreToValueRatio = 21.4, DefaultMemorySpeed = 2666, OverclockedCPUScore = 6116, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 4000, CoreClockMultiplier = 0.004675, MemChannelsMultiplier = 1.510679, MemClockMultiplier = 0.001496 }; cpus.Add(Ryzen_5_Six_Core_1600);
            CPU Ryzen_5_Six_Core_1600X = new CPU() { Id = 8, Name = "Ryzen 5 Six Core 1600X", PartType = PartType.CPU, Manufacturer = AMD, Price = 270, SellPrice = 90, LevelUnlock = 7, LevelPercent = 20, Lighting = null, Series = AMD_Ryzen_5, RankingScore = 1984, Frequency = 4000, Cores = 6, CPUSocket = AM4, Wattage = 95, Overclockable = true, ThermalThrottling = 95, Voltage = 1.3, BasicCPUScore = 5914, ScoreToValueRatio = 21.9, DefaultMemorySpeed = 2666, OverclockedCPUScore = 5960, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 4100, CoreClockMultiplier = 0.001528, MemChannelsMultiplier = 1.906138, MemClockMultiplier = 0.001981 }; cpus.Add(Ryzen_5_Six_Core_1600X);
            CPU Ryzen_5_Six_Core_2600 = new CPU() { Id = 9, Name = "Ryzen 5 Six Core 2600", PartType = PartType.CPU, Manufacturer = AMD, Price = 290, SellPrice = 97, LevelUnlock = 18, LevelPercent = 1, Lighting = null, Series = AMD_Ryzen_5, RankingScore = 2092, Frequency = 3900, Cores = 6, CPUSocket = AM4, Wattage = 65, Overclockable = true, ThermalThrottling = 95, Voltage = 1.3, BasicCPUScore = 6235, ScoreToValueRatio = 21.5, DefaultMemorySpeed = 2933, OverclockedCPUScore = 6366, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 4200, CoreClockMultiplier = 0.001467, MemChannelsMultiplier = 1.908192, MemClockMultiplier = 0.001312 }; cpus.Add(Ryzen_5_Six_Core_2600);
            CPU Ryzen_5_Six_Core_2600X = new CPU() { Id = 10, Name = "Ryzen 5 Six Core 2600X", PartType = PartType.CPU, Manufacturer = AMD, Price = 300, SellPrice = 100, LevelUnlock = 18, LevelPercent = 33, Lighting = null, Series = AMD_Ryzen_5, RankingScore = 2143, Frequency = 4250, Cores = 6, CPUSocket = AM4, Wattage = 95, Overclockable = true, ThermalThrottling = 95, Voltage = 1.3, BasicCPUScore = 6388, ScoreToValueRatio = 21.3, DefaultMemorySpeed = 2933, OverclockedCPUScore = 6410, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 4300, CoreClockMultiplier = 0.001467, MemChannelsMultiplier = 1.908192, MemClockMultiplier = 0.001312 }; cpus.Add(Ryzen_5_Six_Core_2600X);
            CPU Ryzen_5_Six_Core_3600 = new CPU() { Id = 11, Name = "Ryzen 5 Six Core 3600", PartType = PartType.CPU, Manufacturer = AMD, Price = 200, SellPrice = 67, LevelUnlock = 30, LevelPercent = 1, Lighting = null, Series = AMD_Ryzen_5, RankingScore = 2376, Frequency = 4200, Cores = 6, CPUSocket = AM4, Wattage = 65, Overclockable = true, ThermalThrottling = 95, Voltage = 1.35, BasicCPUScore = 7082, ScoreToValueRatio = 35.4, DefaultMemorySpeed = 3200, OverclockedCPUScore = 7199, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 4300, CoreClockMultiplier = 0.003915, MemChannelsMultiplier = 1.488886, MemClockMultiplier = 0.001876 }; cpus.Add(Ryzen_5_Six_Core_3600);
            CPU Ryzen_5_Six_Core_3600X = new CPU() { Id = 12, Name = "Ryzen 5 Six Core 3600X", PartType = PartType.CPU, Manufacturer = AMD, Price = 250, SellPrice = 83, LevelUnlock = 30, LevelPercent = 1, Lighting = null, Series = AMD_Ryzen_5, RankingScore = 2455, Frequency = 4400, Cores = 6, CPUSocket = AM4, Wattage = 95, Overclockable = true, ThermalThrottling = 95, Voltage = 1.35, BasicCPUScore = 7316, ScoreToValueRatio = 29.3, DefaultMemorySpeed = 3200, OverclockedCPUScore = 7374, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 4450, CoreClockMultiplier = 0.003915, MemChannelsMultiplier = 1.488886, MemClockMultiplier = 0.001876 }; cpus.Add(Ryzen_5_Six_Core_3600X);
            CPU Ryzen_5_Six_Core_3600XT = new CPU() { Id = 13, Name = "Ryzen 5 Six Core 3600XT", PartType = PartType.CPU, Manufacturer = AMD, Price = 400, SellPrice = 133, LevelUnlock = 32, LevelPercent = 30, Lighting = null, Series = AMD_Ryzen_5, RankingScore = 2459, Frequency = 4500, Cores = 6, CPUSocket = AM4, Wattage = 95, Overclockable = true, ThermalThrottling = 95, Voltage = 1.25, BasicCPUScore = 7330, ScoreToValueRatio = 18.3, DefaultMemorySpeed = 3200, OverclockedCPUScore = 7447, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 4700, CoreClockMultiplier = 0.001968, MemChannelsMultiplier = 2.040162, MemClockMultiplier = 0.001955 }; cpus.Add(Ryzen_5_Six_Core_3600XT);
            CPU Ryzen_5_Six_Core_5600X = new CPU() { Id = 14, Name = "Ryzen 5 Six Core 5600X", PartType = PartType.CPU, Manufacturer = AMD, Price = 500, SellPrice = 167, LevelUnlock = 33, LevelPercent = 50, Lighting = null, Series = AMD_Ryzen_5, RankingScore = 2699, Frequency = 4600, Cores = 6, CPUSocket = AM4, Wattage = 65, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 8044, ScoreToValueRatio = 16.1, DefaultMemorySpeed = 3200, OverclockedCPUScore = 8238, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.85, OverclockedFrequency = 4750, CoreClockMultiplier = 0.00434, MemChannelsMultiplier = 2.997384, MemClockMultiplier = 0.001527 }; cpus.Add(Ryzen_5_Six_Core_5600X);
            CPU Ryzen_7_Eight_Core_1700 = new CPU() { Id = 15, Name = "Ryzen 7 Eight Core 1700", PartType = PartType.CPU, Manufacturer = AMD, Price = 350, SellPrice = 117, LevelUnlock = 7, LevelPercent = 1, Lighting = null, Series = AMD_Ryzen_7, RankingScore = 2569, Frequency = 3700, Cores = 8, CPUSocket = AM4, Wattage = 65, Overclockable = true, ThermalThrottling = 95, Voltage = 1.35, BasicCPUScore = 7658, ScoreToValueRatio = 21.9, DefaultMemorySpeed = 2666, OverclockedCPUScore = 8052, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 4000, CoreClockMultiplier = 0.004404, MemChannelsMultiplier = 3.292705, MemClockMultiplier = 0.00258 }; cpus.Add(Ryzen_7_Eight_Core_1700);
            CPU Ryzen_7_Eight_Core_1700X = new CPU() { Id = 16, Name = "Ryzen 7 Eight Core 1700X", PartType = PartType.CPU, Manufacturer = AMD, Price = 360, SellPrice = 120, LevelUnlock = 7, LevelPercent = 50, Lighting = null, Series = AMD_Ryzen_7, RankingScore = 2653, Frequency = 3800, Cores = 8, CPUSocket = AM4, Wattage = 95, Overclockable = true, ThermalThrottling = 95, Voltage = 1.35, BasicCPUScore = 7905, ScoreToValueRatio = 22, DefaultMemorySpeed = 2666, OverclockedCPUScore = 8191, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 4000, CoreClockMultiplier = 0.004788, MemChannelsMultiplier = 3.388378, MemClockMultiplier = 0.002495 }; cpus.Add(Ryzen_7_Eight_Core_1700X);
            CPU Ryzen_7_Eight_Core_1800X = new CPU() { Id = 17, Name = "Ryzen 7 Eight Core 1800X", PartType = PartType.CPU, Manufacturer = AMD, Price = 370, SellPrice = 123, LevelUnlock = 7, LevelPercent = 80, Lighting = null, Series = AMD_Ryzen_7, RankingScore = 2742, Frequency = 4000, Cores = 8, CPUSocket = AM4, Wattage = 95, Overclockable = true, ThermalThrottling = 95, Voltage = 1.35, BasicCPUScore = 8173, ScoreToValueRatio = 22.1, DefaultMemorySpeed = 2666, OverclockedCPUScore = 8393, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.6, OverclockedFrequency = 4175, CoreClockMultiplier = 0.004223, MemChannelsMultiplier = 3.73659, MemClockMultiplier = 0.002741 }; cpus.Add(Ryzen_7_Eight_Core_1800X);
            CPU Ryzen_7_Eight_Core_2700 = new CPU() { Id = 18, Name = "Ryzen 7 Eight Core 2700", PartType = PartType.CPU, Manufacturer = AMD, Price = 380, SellPrice = 127, LevelUnlock = 18, LevelPercent = 1, Lighting = null, Series = AMD_Ryzen_7, RankingScore = 2907, Frequency = 4100, Cores = 8, CPUSocket = AM4, Wattage = 65, Overclockable = true, ThermalThrottling = 95, Voltage = 1.35, BasicCPUScore = 8664, ScoreToValueRatio = 22.8, DefaultMemorySpeed = 2933, OverclockedCPUScore = 8701, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 4200, CoreClockMultiplier = 0.001259, MemChannelsMultiplier = 3.121079, MemClockMultiplier = 0.002813 }; cpus.Add(Ryzen_7_Eight_Core_2700);
            CPU Ryzen_7_Eight_Core_2700X = new CPU() { Id = 19, Name = "Ryzen 7 Eight Core 2700X", PartType = PartType.CPU, Manufacturer = AMD, Price = 390, SellPrice = 130, LevelUnlock = 18, LevelPercent = 66, Lighting = null, Series = AMD_Ryzen_7, RankingScore = 2938, Frequency = 4350, Cores = 8, CPUSocket = AM4, Wattage = 105, Overclockable = true, ThermalThrottling = 95, Voltage = 1.35, BasicCPUScore = 8758, ScoreToValueRatio = 22.5, DefaultMemorySpeed = 2933, OverclockedCPUScore = 8776, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 4400, CoreClockMultiplier = 0.001259, MemChannelsMultiplier = 3.121079, MemClockMultiplier = 0.002813 }; cpus.Add(Ryzen_7_Eight_Core_2700X);
            CPU Ryzen_7_Eight_Core_3700X = new CPU() { Id = 20, Name = "Ryzen 7 Eight Core 3700X", PartType = PartType.CPU, Manufacturer = AMD, Price = 330, SellPrice = 110, LevelUnlock = 30, LevelPercent = 20, Lighting = null, Series = AMD_Ryzen_7, RankingScore = 3307, Frequency = 4400, Cores = 8, CPUSocket = AM4, Wattage = 65, Overclockable = true, ThermalThrottling = 95, Voltage = 1.35, BasicCPUScore = 9855, ScoreToValueRatio = 29.9, DefaultMemorySpeed = 3200, OverclockedCPUScore = 9945, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 4470, CoreClockMultiplier = 0.00427, MemChannelsMultiplier = 3.125211, MemClockMultiplier = 0.002264 }; cpus.Add(Ryzen_7_Eight_Core_3700X);
            CPU Ryzen_7_Eight_Core_3800X = new CPU() { Id = 21, Name = "Ryzen 7 Eight Core 3800X", PartType = PartType.CPU, Manufacturer = AMD, Price = 400, SellPrice = 133, LevelUnlock = 30, LevelPercent = 40, Lighting = null, Series = AMD_Ryzen_7, RankingScore = 3350, Frequency = 4500, Cores = 8, CPUSocket = AM4, Wattage = 105, Overclockable = true, ThermalThrottling = 95, Voltage = 1.35, BasicCPUScore = 9983, ScoreToValueRatio = 25, DefaultMemorySpeed = 3200, OverclockedCPUScore = 10072, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 4570, CoreClockMultiplier = 0.00427, MemChannelsMultiplier = 3.125211, MemClockMultiplier = 0.002264 }; cpus.Add(Ryzen_7_Eight_Core_3800X);
            CPU Ryzen_7_Eight_Core_3800XT = new CPU() { Id = 22, Name = "Ryzen 7 Eight Core 3800XT", PartType = PartType.CPU, Manufacturer = AMD, Price = 650, SellPrice = 217, LevelUnlock = 32, LevelPercent = 50, Lighting = null, Series = AMD_Ryzen_7, RankingScore = 3428, Frequency = 4700, Cores = 8, CPUSocket = AM4, Wattage = 105, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 10216, ScoreToValueRatio = 15.7, DefaultMemorySpeed = 3200, OverclockedCPUScore = 10287, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 4800, CoreClockMultiplier = 0.002375, MemChannelsMultiplier = 3.376156, MemClockMultiplier = 0.002605 }; cpus.Add(Ryzen_7_Eight_Core_3800XT);
            CPU Ryzen_7_Eight_Core_5800X = new CPU() { Id = 23, Name = "Ryzen 7 Eight Core 5800X", PartType = PartType.CPU, Manufacturer = AMD, Price = 750, SellPrice = 250, LevelUnlock = 33, LevelPercent = 50, Lighting = null, Series = AMD_Ryzen_7, RankingScore = 3756, Frequency = 4700, Cores = 8, CPUSocket = AM4, Wattage = 105, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 11193, ScoreToValueRatio = 14.9, DefaultMemorySpeed = 3200, OverclockedCPUScore = 11295, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.85, OverclockedFrequency = 4850, CoreClockMultiplier = 0.002264, MemChannelsMultiplier = 5.554834, MemClockMultiplier = 0.003082 }; cpus.Add(Ryzen_7_Eight_Core_5800X);
            CPU Ryzen_9_Sixteen_Core_3950X = new CPU() { Id = 24, Name = "Ryzen 9 Sixteen Core 3950X", PartType = PartType.CPU, Manufacturer = AMD, Price = 900, SellPrice = 300, LevelUnlock = 30, LevelPercent = 80, Lighting = null, Series = AMD_Ryzen_9, RankingScore = 4109, Frequency = 4700, Cores = 16, CPUSocket = AM4, Wattage = 105, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 12245, ScoreToValueRatio = 13.6, DefaultMemorySpeed = 3200, OverclockedCPUScore = 12259, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 4750, CoreClockMultiplier = 0.000913, MemChannelsMultiplier = 6.050261, MemClockMultiplier = 0.005673 }; cpus.Add(Ryzen_9_Sixteen_Core_3950X);
            CPU Ryzen_9_Sixteen_Core_5950X = new CPU() { Id = 25, Name = "Ryzen 9 Sixteen Core 5950X", PartType = PartType.CPU, Manufacturer = AMD, Price = 1100, SellPrice = 367, LevelUnlock = 33, LevelPercent = 30, Lighting = null, Series = AMD_Ryzen_9, RankingScore = 4664, Frequency = 4900, Cores = 16, CPUSocket = AM4, Wattage = 105, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 13900, ScoreToValueRatio = 12.6, DefaultMemorySpeed = 3200, OverclockedCPUScore = 13922, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.85, OverclockedFrequency = 4950, CoreClockMultiplier = 0.001457, MemChannelsMultiplier = 10.6221, MemClockMultiplier = 0.00598 }; cpus.Add(Ryzen_9_Sixteen_Core_5950X);
            CPU Ryzen_9_Twelve_Core_3900X = new CPU() { Id = 26, Name = "Ryzen 9 Twelve Core 3900X", PartType = PartType.CPU, Manufacturer = AMD, Price = 700, SellPrice = 233, LevelUnlock = 30, LevelPercent = 60, Lighting = null, Series = AMD_Ryzen_9, RankingScore = 4102, Frequency = 4600, Cores = 12, CPUSocket = AM4, Wattage = 105, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 12225, ScoreToValueRatio = 17.5, DefaultMemorySpeed = 3200, OverclockedCPUScore = 12287, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 4650, CoreClockMultiplier = 0.004123, MemChannelsMultiplier = 6.668931, MemClockMultiplier = 0.005531 }; cpus.Add(Ryzen_9_Twelve_Core_3900X);
            CPU Ryzen_9_Twelve_Core_3900XT = new CPU() { Id = 27, Name = "Ryzen 9 Twelve Core 3900XT", PartType = PartType.CPU, Manufacturer = AMD, Price = 1000, SellPrice = 333, LevelUnlock = 32, LevelPercent = 70, Lighting = null, Series = AMD_Ryzen_9, RankingScore = 3993, Frequency = 4700, Cores = 12, CPUSocket = AM4, Wattage = 105, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 11900, ScoreToValueRatio = 11.9, DefaultMemorySpeed = 3200, OverclockedCPUScore = 11900, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 4800, CoreClockMultiplier = 0.0000182, MemChannelsMultiplier = 6.860246, MemClockMultiplier = 0.00548 }; cpus.Add(Ryzen_9_Twelve_Core_3900XT);
            CPU Ryzen_9_Twelve_Core_5900X = new CPU() { Id = 28, Name = "Ryzen 9 Twelve Core 5900X", PartType = PartType.CPU, Manufacturer = AMD, Price = 1000, SellPrice = 333, LevelUnlock = 33, LevelPercent = 1, Lighting = null, Series = AMD_Ryzen_9, RankingScore = 4381, Frequency = 4800, Cores = 12, CPUSocket = AM4, Wattage = 105, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 13057, ScoreToValueRatio = 13.1, DefaultMemorySpeed = 3200, OverclockedCPUScore = 13073, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.85, OverclockedFrequency = 4850, CoreClockMultiplier = 0.001072, MemChannelsMultiplier = 7.714274, MemClockMultiplier = 0.004702 }; cpus.Add(Ryzen_9_Twelve_Core_5900X);
            CPU Ryzen_Threadripper_2920X = new CPU() { Id = 29, Name = "Ryzen Threadripper 2920X", PartType = PartType.CPU, Manufacturer = AMD, Price = 775, SellPrice = 258, LevelUnlock = 28, LevelPercent = 20, Lighting = null, Series = AMD_Ryzen_Threadripper, RankingScore = 3422, Frequency = 4300, Cores = 12, CPUSocket = TR4, Wattage = 180, Overclockable = true, ThermalThrottling = 95, Voltage = 1.35, BasicCPUScore = 10198, ScoreToValueRatio = 13.2, DefaultMemorySpeed = 2933, OverclockedCPUScore = 10202, MultiplierStep = 0.25, NumberOfDies = 2.7, MaxMemoryChannels = 4, OverclockedVoltage = 1.55, OverclockedFrequency = 4400, CoreClockMultiplier = 0.00013, MemChannelsMultiplier = 1.92343, MemClockMultiplier = 0.00468 }; cpus.Add(Ryzen_Threadripper_2920X);
            CPU Ryzen_Threadripper_2950X = new CPU() { Id = 30, Name = "Ryzen Threadripper 2950X", PartType = PartType.CPU, Manufacturer = AMD, Price = 850, SellPrice = 283, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Series = AMD_Ryzen_Threadripper, RankingScore = 3423, Frequency = 4400, Cores = 16, CPUSocket = TR4, Wattage = 180, Overclockable = true, ThermalThrottling = 95, Voltage = 1.35, BasicCPUScore = 10202, ScoreToValueRatio = 12, DefaultMemorySpeed = 2933, OverclockedCPUScore = 10206, MultiplierStep = 0.25, NumberOfDies = 2.7, MaxMemoryChannels = 4, OverclockedVoltage = 1.55, OverclockedFrequency = 4500, CoreClockMultiplier = 0.00013, MemChannelsMultiplier = 1.92343, MemClockMultiplier = 0.00468 }; cpus.Add(Ryzen_Threadripper_2950X);
            CPU Ryzen_Threadripper_2970WX = new CPU() { Id = 31, Name = "Ryzen Threadripper 2970WX", PartType = PartType.CPU, Manufacturer = AMD, Price = 1000, SellPrice = 333, LevelUnlock = 28, LevelPercent = 40, Lighting = null, Series = AMD_Ryzen_Threadripper, RankingScore = 2526, Frequency = 4200, Cores = 24, CPUSocket = TR4, Wattage = 250, Overclockable = true, ThermalThrottling = 95, Voltage = 1.35, BasicCPUScore = 7528, ScoreToValueRatio = 7.5, DefaultMemorySpeed = 2933, OverclockedCPUScore = 7557, MultiplierStep = 0.25, NumberOfDies = 2.7, MaxMemoryChannels = 4, OverclockedVoltage = 1.55, OverclockedFrequency = 4300, CoreClockMultiplier = 0.001, MemChannelsMultiplier = 0.919709, MemClockMultiplier = 0.001872 }; cpus.Add(Ryzen_Threadripper_2970WX);
            CPU Ryzen_Threadripper_2990WX = new CPU() { Id = 32, Name = "Ryzen Threadripper 2990WX", PartType = PartType.CPU, Manufacturer = AMD, Price = 1100, SellPrice = 367, LevelUnlock = 28, LevelPercent = 60, Lighting = null, Series = AMD_Ryzen_Threadripper, RankingScore = 3909, Frequency = 4200, Cores = 32, CPUSocket = TR4, Wattage = 250, Overclockable = true, ThermalThrottling = 95, Voltage = 1.35, BasicCPUScore = 11649, ScoreToValueRatio = 10.6, DefaultMemorySpeed = 2933, OverclockedCPUScore = 11765, MultiplierStep = 0.25, NumberOfDies = 2.7, MaxMemoryChannels = 4, OverclockedVoltage = 1.55, OverclockedFrequency = 4300, CoreClockMultiplier = 0.00388, MemChannelsMultiplier = 0.215054, MemClockMultiplier = 0.00222 }; cpus.Add(Ryzen_Threadripper_2990WX);
            CPU Ryzen_Threadripper_3960X = new CPU() { Id = 33, Name = "Ryzen Threadripper 3960X", PartType = PartType.CPU, Manufacturer = AMD, Price = 1400, SellPrice = 467, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Series = AMD_Ryzen_Threadripper, RankingScore = 4032, Frequency = 4500, Cores = 24, CPUSocket = sTRX4, Wattage = 280, Overclockable = true, ThermalThrottling = 95, Voltage = 1.35, BasicCPUScore = 12017, ScoreToValueRatio = 8.6, DefaultMemorySpeed = 3200, OverclockedCPUScore = 12074, MultiplierStep = 0.25, NumberOfDies = 2.7, MaxMemoryChannels = 4, OverclockedVoltage = 1.55, OverclockedFrequency = 4550, CoreClockMultiplier = 0.003832, MemChannelsMultiplier = 2.259872, MemClockMultiplier = 0.008126 }; cpus.Add(Ryzen_Threadripper_3960X);
            CPU Ryzen_Threadripper_3970X = new CPU() { Id = 34, Name = "Ryzen Threadripper 3970X", PartType = PartType.CPU, Manufacturer = AMD, Price = 2000, SellPrice = 667, LevelUnlock = 31, LevelPercent = 30, Lighting = null, Series = AMD_Ryzen_Threadripper, RankingScore = 3724, Frequency = 4400, Cores = 32, CPUSocket = sTRX4, Wattage = 280, Overclockable = true, ThermalThrottling = 95, Voltage = 1.35, BasicCPUScore = 11099, ScoreToValueRatio = 5.5, DefaultMemorySpeed = 3200, OverclockedCPUScore = 11346, MultiplierStep = 0.25, NumberOfDies = 2.7, MaxMemoryChannels = 4, OverclockedVoltage = 1.55, OverclockedFrequency = 4550, CoreClockMultiplier = 0.005529, MemChannelsMultiplier = 2.26, MemClockMultiplier = 0.006308 }; cpus.Add(Ryzen_Threadripper_3970X);
            CPU Ryzen_Threadripper_3990X = new CPU() { Id = 35, Name = "Ryzen Threadripper 3990X", PartType = PartType.CPU, Manufacturer = AMD, Price = 3990, SellPrice = 1330, LevelUnlock = 31, LevelPercent = 75, Lighting = null, Series = AMD_Ryzen_Threadripper, RankingScore = 3595, Frequency = 4300, Cores = 64, CPUSocket = sTRX4, Wattage = 280, Overclockable = true, ThermalThrottling = 95, Voltage = 1.35, BasicCPUScore = 10713, ScoreToValueRatio = 2.7, DefaultMemorySpeed = 3200, OverclockedCPUScore = 10847, MultiplierStep = 0.25, NumberOfDies = 2.7, MaxMemoryChannels = 4, OverclockedVoltage = 1.55, OverclockedFrequency = 4400, CoreClockMultiplier = 0.004492, MemChannelsMultiplier = 3.459974, MemClockMultiplier = 0.006017 }; cpus.Add(Ryzen_Threadripper_3990X);
            CPU Ryzen_Threadripper_Eight_Core_1900X = new CPU() { Id = 36, Name = "Ryzen Threadripper Eight Core 1900X", PartType = PartType.CPU, Manufacturer = AMD, Price = 550, SellPrice = 183, LevelUnlock = 22, LevelPercent = 1, Lighting = null, Series = AMD_Ryzen_Threadripper, RankingScore = 2691, Frequency = 4000, Cores = 8, CPUSocket = TR4, Wattage = 180, Overclockable = true, ThermalThrottling = 95, Voltage = 1.35, BasicCPUScore = 8020, ScoreToValueRatio = 14.6, DefaultMemorySpeed = 2666, OverclockedCPUScore = 8193, MultiplierStep = 0.25, NumberOfDies = 2.7, MaxMemoryChannels = 4, OverclockedVoltage = 1.55, OverclockedFrequency = 4100, CoreClockMultiplier = 0.005827, MemChannelsMultiplier = 1.868445, MemClockMultiplier = 0.003449 }; cpus.Add(Ryzen_Threadripper_Eight_Core_1900X);
            CPU Ryzen_Threadripper_Sixteen_Core_1950X = new CPU() { Id = 37, Name = "Ryzen Threadripper Sixteen Core 1950X", PartType = PartType.CPU, Manufacturer = AMD, Price = 800, SellPrice = 267, LevelUnlock = 22, LevelPercent = 80, Lighting = null, Series = AMD_Ryzen_Threadripper, RankingScore = 3222, Frequency = 4000, Cores = 16, CPUSocket = TR4, Wattage = 180, Overclockable = true, ThermalThrottling = 95, Voltage = 1.35, BasicCPUScore = 9602, ScoreToValueRatio = 12, DefaultMemorySpeed = 2666, OverclockedCPUScore = 9711, MultiplierStep = 0.25, NumberOfDies = 2.7, MaxMemoryChannels = 4, OverclockedVoltage = 1.55, OverclockedFrequency = 4100, CoreClockMultiplier = 0.003667, MemChannelsMultiplier = 4.334733, MemClockMultiplier = 0.005344 }; cpus.Add(Ryzen_Threadripper_Sixteen_Core_1950X);
            CPU Ryzen_Threadripper_Twelve_Core_1920X = new CPU() { Id = 38, Name = "Ryzen Threadripper Twelve Core 1920X", PartType = PartType.CPU, Manufacturer = AMD, Price = 650, SellPrice = 217, LevelUnlock = 22, LevelPercent = 40, Lighting = null, Series = AMD_Ryzen_Threadripper, RankingScore = 3071, Frequency = 4000, Cores = 12, CPUSocket = TR4, Wattage = 180, Overclockable = true, ThermalThrottling = 95, Voltage = 1.35, BasicCPUScore = 9152, ScoreToValueRatio = 14.1, DefaultMemorySpeed = 2666, OverclockedCPUScore = 9227, MultiplierStep = 0.25, NumberOfDies = 2.7, MaxMemoryChannels = 4, OverclockedVoltage = 1.55, OverclockedFrequency = 4150, CoreClockMultiplier = 0.00167, MemChannelsMultiplier = 3.985663, MemClockMultiplier = 0.00483 }; cpus.Add(Ryzen_Threadripper_Twelve_Core_1920X);
            CPU Celeron_G3900 = new CPU() { Id = 39, Name = "Celeron G3900", PartType = PartType.CPU, Manufacturer = Intel, Price = 45, SellPrice = 15, LevelUnlock = 1, LevelPercent = 1, Lighting = null, Series = Intel_Celeron, RankingScore = 295, Frequency = 2800, Cores = 2, CPUSocket = LGA_1151__Skylake_, Wattage = 51, Overclockable = false, ThermalThrottling = 100, Voltage = 1.1, BasicCPUScore = 879, ScoreToValueRatio = 19.5, DefaultMemorySpeed = 2133, OverclockedCPUScore = 879, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.6, OverclockedFrequency = 2800, CoreClockMultiplier = 0.006022, MemChannelsMultiplier = 0.318855, MemClockMultiplier = 0.000614 }; cpus.Add(Celeron_G3900);
            CPU Celeron_G3930 = new CPU() { Id = 40, Name = "Celeron G3930", PartType = PartType.CPU, Manufacturer = Intel, Price = 40, SellPrice = 13, LevelUnlock = 5, LevelPercent = 1, Lighting = null, Series = Intel_Celeron, RankingScore = 483, Frequency = 2900, Cores = 2, CPUSocket = LGA_1151__Kaby_Lake_, Wattage = 51, Overclockable = false, ThermalThrottling = 100, Voltage = 1, BasicCPUScore = 1440, ScoreToValueRatio = 36, DefaultMemorySpeed = 2133, OverclockedCPUScore = 1440, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 2900, CoreClockMultiplier = 0.00055, MemChannelsMultiplier = 0.163871, MemClockMultiplier = 0.000266 }; cpus.Add(Celeron_G3930);
            CPU Celeron_G3950 = new CPU() { Id = 41, Name = "Celeron G3950", PartType = PartType.CPU, Manufacturer = Intel, Price = 60, SellPrice = 20, LevelUnlock = 5, LevelPercent = 20, Lighting = null, Series = Intel_Celeron, RankingScore = 489, Frequency = 3000, Cores = 2, CPUSocket = LGA_1151__Kaby_Lake_, Wattage = 51, Overclockable = false, ThermalThrottling = 100, Voltage = 1, BasicCPUScore = 1457, ScoreToValueRatio = 24.3, DefaultMemorySpeed = 2133, OverclockedCPUScore = 1457, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 3000, CoreClockMultiplier = 0.00055, MemChannelsMultiplier = 0.163871, MemClockMultiplier = 0.000266 }; cpus.Add(Celeron_G3950);
            CPU Celeron_G5900 = new CPU() { Id = 42, Name = "Celeron G5900", PartType = PartType.CPU, Manufacturer = Intel, Price = 50, SellPrice = 17, LevelUnlock = 32, LevelPercent = 1, Lighting = null, Series = Intel_Celeron, RankingScore = 335, Frequency = 3400, Cores = 2, CPUSocket = LGA_1200, Wattage = 58, Overclockable = false, ThermalThrottling = 100, Voltage = 1, BasicCPUScore = 1000, ScoreToValueRatio = 20, DefaultMemorySpeed = 2666, OverclockedCPUScore = 1000, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.6, OverclockedFrequency = 3400, CoreClockMultiplier = 0.0002456, MemChannelsMultiplier = 0.413108, MemClockMultiplier = 0.002032 }; cpus.Add(Celeron_G5900);
            CPU Celeron_G5920 = new CPU() { Id = 43, Name = "Celeron G5920", PartType = PartType.CPU, Manufacturer = Intel, Price = 55, SellPrice = 18, LevelUnlock = 32, LevelPercent = 1, Lighting = null, Series = Intel_Celeron, RankingScore = 338, Frequency = 3500, Cores = 2, CPUSocket = LGA_1200, Wattage = 58, Overclockable = false, ThermalThrottling = 100, Voltage = 1, BasicCPUScore = 1008, ScoreToValueRatio = 18.3, DefaultMemorySpeed = 2666, OverclockedCPUScore = 1008, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.6, OverclockedFrequency = 3500, CoreClockMultiplier = 0.0002456, MemChannelsMultiplier = 0.413108, MemClockMultiplier = 0.002032 }; cpus.Add(Celeron_G5920);
            CPU Core_i3_10100 = new CPU() { Id = 44, Name = "Core i3-10100", PartType = PartType.CPU, Manufacturer = Intel, Price = 250, SellPrice = 83, LevelUnlock = 32, LevelPercent = 1, Lighting = null, Series = Intel_Core_i3, RankingScore = 1664, Frequency = 4300, Cores = 4, CPUSocket = LGA_1200, Wattage = 65, Overclockable = false, ThermalThrottling = 100, Voltage = 1.1, BasicCPUScore = 4960, ScoreToValueRatio = 19.8, DefaultMemorySpeed = 2666, OverclockedCPUScore = 4960, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.6, OverclockedFrequency = 4300, CoreClockMultiplier = 0.00347, MemChannelsMultiplier = 2.068054, MemClockMultiplier = 0.000897 }; cpus.Add(Core_i3_10100);
            CPU Core_i3_10300 = new CPU() { Id = 45, Name = "Core i3-10300", PartType = PartType.CPU, Manufacturer = Intel, Price = 280, SellPrice = 93, LevelUnlock = 32, LevelPercent = 1, Lighting = null, Series = Intel_Core_i3, RankingScore = 1699, Frequency = 4400, Cores = 4, CPUSocket = LGA_1200, Wattage = 65, Overclockable = false, ThermalThrottling = 100, Voltage = 1.1, BasicCPUScore = 5063, ScoreToValueRatio = 18.1, DefaultMemorySpeed = 2666, OverclockedCPUScore = 5063, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.6, OverclockedFrequency = 4400, CoreClockMultiplier = 0.00347, MemChannelsMultiplier = 2.068054, MemClockMultiplier = 0.000897 }; cpus.Add(Core_i3_10300);
            CPU Core_i3_10320 = new CPU() { Id = 46, Name = "Core i3-10320", PartType = PartType.CPU, Manufacturer = Intel, Price = 310, SellPrice = 103, LevelUnlock = 32, LevelPercent = 1, Lighting = null, Series = Intel_Core_i3, RankingScore = 1768, Frequency = 4600, Cores = 4, CPUSocket = LGA_1200, Wattage = 65, Overclockable = false, ThermalThrottling = 100, Voltage = 1.1, BasicCPUScore = 5270, ScoreToValueRatio = 17, DefaultMemorySpeed = 2666, OverclockedCPUScore = 5270, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.6, OverclockedFrequency = 4600, CoreClockMultiplier = 0.00347, MemChannelsMultiplier = 2.068054, MemClockMultiplier = 0.000897 }; cpus.Add(Core_i3_10320);
            CPU Core_i3_6100 = new CPU() { Id = 47, Name = "Core i3-6100", PartType = PartType.CPU, Manufacturer = Intel, Price = 105, SellPrice = 35, LevelUnlock = 2, LevelPercent = 1, Lighting = null, Series = Intel_Core_i3, RankingScore = 792, Frequency = 3700, Cores = 2, CPUSocket = LGA_1151__Skylake_, Wattage = 51, Overclockable = false, ThermalThrottling = 100, Voltage = 1.2, BasicCPUScore = 2362, ScoreToValueRatio = 22.5, DefaultMemorySpeed = 2133, OverclockedCPUScore = 2362, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.7, OverclockedFrequency = 3700, CoreClockMultiplier = 0.00094, MemChannelsMultiplier = 0.40477, MemClockMultiplier = 0.000346 }; cpus.Add(Core_i3_6100);
            CPU Core_i3_6100T = new CPU() { Id = 48, Name = "Core i3-6100T", PartType = PartType.CPU, Manufacturer = Intel, Price = 90, SellPrice = 30, LevelUnlock = 2, LevelPercent = 1, Lighting = null, Series = Intel_Core_i3, RankingScore = 745, Frequency = 3200, Cores = 2, CPUSocket = LGA_1151__Skylake_, Wattage = 35, Overclockable = false, ThermalThrottling = 100, Voltage = 1.2, BasicCPUScore = 2222, ScoreToValueRatio = 24.7, DefaultMemorySpeed = 2133, OverclockedCPUScore = 2222, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.7, OverclockedFrequency = 3200, CoreClockMultiplier = 0.00094, MemChannelsMultiplier = 0.40477, MemClockMultiplier = 0.000346 }; cpus.Add(Core_i3_6100T);
            CPU Core_i3_6300 = new CPU() { Id = 49, Name = "Core i3-6300", PartType = PartType.CPU, Manufacturer = Intel, Price = 110, SellPrice = 37, LevelUnlock = 2, LevelPercent = 1, Lighting = null, Series = Intel_Core_i3, RankingScore = 802, Frequency = 3800, Cores = 2, CPUSocket = LGA_1151__Skylake_, Wattage = 51, Overclockable = false, ThermalThrottling = 100, Voltage = 1.2, BasicCPUScore = 2390, ScoreToValueRatio = 21.7, DefaultMemorySpeed = 2133, OverclockedCPUScore = 2390, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.7, OverclockedFrequency = 3800, CoreClockMultiplier = 0.00094, MemChannelsMultiplier = 0.40477, MemClockMultiplier = 0.000346 }; cpus.Add(Core_i3_6300);
            CPU Core_i3_6320 = new CPU() { Id = 50, Name = "Core i3-6320", PartType = PartType.CPU, Manufacturer = Intel, Price = 115, SellPrice = 38, LevelUnlock = 2, LevelPercent = 1, Lighting = null, Series = Intel_Core_i3, RankingScore = 811, Frequency = 3900, Cores = 2, CPUSocket = LGA_1151__Skylake_, Wattage = 51, Overclockable = false, ThermalThrottling = 100, Voltage = 1.2, BasicCPUScore = 2418, ScoreToValueRatio = 21, DefaultMemorySpeed = 2133, OverclockedCPUScore = 2418, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.7, OverclockedFrequency = 3900, CoreClockMultiplier = 0.00094, MemChannelsMultiplier = 0.40477, MemClockMultiplier = 0.000346 }; cpus.Add(Core_i3_6320);
            CPU Core_i3_7100 = new CPU() { Id = 51, Name = "Core i3-7100", PartType = PartType.CPU, Manufacturer = Intel, Price = 120, SellPrice = 40, LevelUnlock = 12, LevelPercent = 1, Lighting = null, Series = Intel_Core_i3, RankingScore = 833, Frequency = 3900, Cores = 2, CPUSocket = LGA_1151__Kaby_Lake_, Wattage = 51, Overclockable = false, ThermalThrottling = 100, Voltage = 1.2, BasicCPUScore = 2483, ScoreToValueRatio = 20.7, DefaultMemorySpeed = 2400, OverclockedCPUScore = 2483, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.7, OverclockedFrequency = 3900, CoreClockMultiplier = 0.001814, MemChannelsMultiplier = 0.494913, MemClockMultiplier = 0.000509 }; cpus.Add(Core_i3_7100);
            CPU Core_i3_7300 = new CPU() { Id = 52, Name = "Core i3-7300", PartType = PartType.CPU, Manufacturer = Intel, Price = 125, SellPrice = 42, LevelUnlock = 12, LevelPercent = 1, Lighting = null, Series = Intel_Core_i3, RankingScore = 851, Frequency = 4000, Cores = 2, CPUSocket = LGA_1151__Kaby_Lake_, Wattage = 51, Overclockable = false, ThermalThrottling = 100, Voltage = 1.2, BasicCPUScore = 2537, ScoreToValueRatio = 20.3, DefaultMemorySpeed = 2400, OverclockedCPUScore = 2537, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.7, OverclockedFrequency = 4000, CoreClockMultiplier = 0.001814, MemChannelsMultiplier = 0.494913, MemClockMultiplier = 0.000509 }; cpus.Add(Core_i3_7300);
            CPU Core_i3_7320 = new CPU() { Id = 53, Name = "Core i3-7320", PartType = PartType.CPU, Manufacturer = Intel, Price = 130, SellPrice = 43, LevelUnlock = 12, LevelPercent = 10, Lighting = null, Series = Intel_Core_i3, RankingScore = 869, Frequency = 4100, Cores = 2, CPUSocket = LGA_1151__Kaby_Lake_, Wattage = 51, Overclockable = false, ThermalThrottling = 100, Voltage = 1.2, BasicCPUScore = 2591, ScoreToValueRatio = 19.9, DefaultMemorySpeed = 2400, OverclockedCPUScore = 2591, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.7, OverclockedFrequency = 4100, CoreClockMultiplier = 0.001814, MemChannelsMultiplier = 0.494913, MemClockMultiplier = 0.000509 }; cpus.Add(Core_i3_7320);
            CPU Core_i3_7350K = new CPU() { Id = 54, Name = "Core i3-7350K", PartType = PartType.CPU, Manufacturer = Intel, Price = 135, SellPrice = 45, LevelUnlock = 13, LevelPercent = 1, Lighting = null, Series = Intel_Core_i3, RankingScore = 887, Frequency = 4200, Cores = 2, CPUSocket = LGA_1151__Kaby_Lake_, Wattage = 60, Overclockable = true, ThermalThrottling = 100, Voltage = 1.2, BasicCPUScore = 2645, ScoreToValueRatio = 19.6, DefaultMemorySpeed = 2400, OverclockedCPUScore = 3024, MultiplierStep = 1, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 4900, CoreClockMultiplier = 0.001814, MemChannelsMultiplier = 0.494913, MemClockMultiplier = 0.000509 }; cpus.Add(Core_i3_7350K);
            CPU Core_i3_8100 = new CPU() { Id = 55, Name = "Core i3-8100", PartType = PartType.CPU, Manufacturer = Intel, Price = 170, SellPrice = 57, LevelUnlock = 15, LevelPercent = 1, Lighting = null, Series = Intel_Core_i3, RankingScore = 1202, Frequency = 3600, Cores = 4, CPUSocket = LGA_1151__Coffee_Lake_, Wattage = 65, Overclockable = false, ThermalThrottling = 100, Voltage = 1.15, BasicCPUScore = 3583, ScoreToValueRatio = 21.1, DefaultMemorySpeed = 2400, OverclockedCPUScore = 3583, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.65, OverclockedFrequency = 3600, CoreClockMultiplier = 0.002553, MemChannelsMultiplier = 0.782394, MemClockMultiplier = 0.000508 }; cpus.Add(Core_i3_8100);
            CPU Core_i3_8350K = new CPU() { Id = 56, Name = "Core i3-8350K", PartType = PartType.CPU, Manufacturer = Intel, Price = 195, SellPrice = 65, LevelUnlock = 15, LevelPercent = 1, Lighting = null, Series = Intel_Core_i3, RankingScore = 1304, Frequency = 4000, Cores = 4, CPUSocket = LGA_1151__Coffee_Lake_, Wattage = 91, Overclockable = true, ThermalThrottling = 100, Voltage = 1.2, BasicCPUScore = 3887, ScoreToValueRatio = 19.9, DefaultMemorySpeed = 2400, OverclockedCPUScore = 4648, MultiplierStep = 1, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 5000, CoreClockMultiplier = 0.002553, MemChannelsMultiplier = 0.782394, MemClockMultiplier = 0.000508 }; cpus.Add(Core_i3_8350K);
            CPU Core_i5_10400 = new CPU() { Id = 57, Name = "Core i5-10400", PartType = PartType.CPU, Manufacturer = Intel, Price = 350, SellPrice = 117, LevelUnlock = 32, LevelPercent = 20, Lighting = null, Series = Intel_Core_i5, RankingScore = 2422, Frequency = 4300, Cores = 6, CPUSocket = LGA_1200, Wattage = 65, Overclockable = false, ThermalThrottling = 100, Voltage = 1.1, BasicCPUScore = 7218, ScoreToValueRatio = 20.6, DefaultMemorySpeed = 2666, OverclockedCPUScore = 7218, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.6, OverclockedFrequency = 4300, CoreClockMultiplier = 0.004088, MemChannelsMultiplier = 3.456004, MemClockMultiplier = 0.001699 }; cpus.Add(Core_i5_10400);
            CPU Core_i5_10500 = new CPU() { Id = 58, Name = "Core i5-10500", PartType = PartType.CPU, Manufacturer = Intel, Price = 390, SellPrice = 130, LevelUnlock = 32, LevelPercent = 20, Lighting = null, Series = Intel_Core_i5, RankingScore = 2503, Frequency = 4500, Cores = 6, CPUSocket = LGA_1200, Wattage = 65, Overclockable = false, ThermalThrottling = 100, Voltage = 1.2, BasicCPUScore = 7461, ScoreToValueRatio = 19.1, DefaultMemorySpeed = 2666, OverclockedCPUScore = 7461, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.6, OverclockedFrequency = 4500, CoreClockMultiplier = 0.004088, MemChannelsMultiplier = 3.456004, MemClockMultiplier = 0.001699 }; cpus.Add(Core_i5_10500);
            CPU Core_i5_10600 = new CPU() { Id = 59, Name = "Core i5-10600", PartType = PartType.CPU, Manufacturer = Intel, Price = 430, SellPrice = 143, LevelUnlock = 32, LevelPercent = 40, Lighting = null, Series = Intel_Core_i5, RankingScore = 2626, Frequency = 4800, Cores = 6, CPUSocket = LGA_1200, Wattage = 65, Overclockable = false, ThermalThrottling = 100, Voltage = 1.2, BasicCPUScore = 7827, ScoreToValueRatio = 18.2, DefaultMemorySpeed = 2666, OverclockedCPUScore = 7827, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.65, OverclockedFrequency = 4800, CoreClockMultiplier = 0.004088, MemChannelsMultiplier = 3.456004, MemClockMultiplier = 0.001699 }; cpus.Add(Core_i5_10600);
            CPU Core_i5_10600K = new CPU() { Id = 60, Name = "Core i5-10600K", PartType = PartType.CPU, Manufacturer = Intel, Price = 440, SellPrice = 147, LevelUnlock = 32, LevelPercent = 40, Lighting = null, Series = Intel_Core_i5, RankingScore = 2626, Frequency = 4800, Cores = 6, CPUSocket = LGA_1200, Wattage = 95, Overclockable = true, ThermalThrottling = 100, Voltage = 1.25, BasicCPUScore = 7827, ScoreToValueRatio = 17.8, DefaultMemorySpeed = 2666, OverclockedCPUScore = 8070, MultiplierStep = 1, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.65, OverclockedFrequency = 5000, CoreClockMultiplier = 0.004088, MemChannelsMultiplier = 3.456004, MemClockMultiplier = 0.001699 }; cpus.Add(Core_i5_10600K);
            CPU Core_i5_11400 = new CPU() { Id = 61, Name = "Core i5-11400", PartType = PartType.CPU, Manufacturer = Intel, Price = 500, SellPrice = 167, LevelUnlock = 34, LevelPercent = 1, Lighting = null, Series = Intel_Core_i5, RankingScore = 2749, Frequency = 4400, Cores = 6, CPUSocket = LGA_1200, Wattage = 65, Overclockable = false, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 8193, ScoreToValueRatio = 16.4, DefaultMemorySpeed = 3200, OverclockedCPUScore = 8193, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.85, OverclockedFrequency = 4400, CoreClockMultiplier = 0.005091, MemChannelsMultiplier = 5.748322, MemClockMultiplier = 0.002166 }; cpus.Add(Core_i5_11400);
            CPU Core_i5_11400F = new CPU() { Id = 62, Name = "Core i5-11400F", PartType = PartType.CPU, Manufacturer = Intel, Price = 500, SellPrice = 167, LevelUnlock = 34, LevelPercent = 1, Lighting = null, Series = Intel_Core_i5, RankingScore = 2749, Frequency = 4400, Cores = 6, CPUSocket = LGA_1200, Wattage = 65, Overclockable = false, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 8193, ScoreToValueRatio = 16.4, DefaultMemorySpeed = 3200, OverclockedCPUScore = 8193, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.85, OverclockedFrequency = 4400, CoreClockMultiplier = 0.005091, MemChannelsMultiplier = 5.748322, MemClockMultiplier = 0.002166 }; cpus.Add(Core_i5_11400F);
            CPU Core_i5_11500 = new CPU() { Id = 63, Name = "Core i5-11500", PartType = PartType.CPU, Manufacturer = Intel, Price = 550, SellPrice = 183, LevelUnlock = 34, LevelPercent = 1, Lighting = null, Series = Intel_Core_i5, RankingScore = 2851, Frequency = 4600, Cores = 6, CPUSocket = LGA_1200, Wattage = 65, Overclockable = false, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 8497, ScoreToValueRatio = 15.4, DefaultMemorySpeed = 3200, OverclockedCPUScore = 8497, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.85, OverclockedFrequency = 4600, CoreClockMultiplier = 0.005091, MemChannelsMultiplier = 5.748322, MemClockMultiplier = 0.002166 }; cpus.Add(Core_i5_11500);
            CPU Core_i5_11600 = new CPU() { Id = 64, Name = "Core i5-11600", PartType = PartType.CPU, Manufacturer = Intel, Price = 600, SellPrice = 200, LevelUnlock = 34, LevelPercent = 1, Lighting = null, Series = Intel_Core_i5, RankingScore = 2953, Frequency = 4800, Cores = 6, CPUSocket = LGA_1200, Wattage = 65, Overclockable = false, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 8800, ScoreToValueRatio = 14.7, DefaultMemorySpeed = 3200, OverclockedCPUScore = 8800, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.85, OverclockedFrequency = 4800, CoreClockMultiplier = 0.005091, MemChannelsMultiplier = 5.748322, MemClockMultiplier = 0.002166 }; cpus.Add(Core_i5_11600);
            CPU Core_i5_11600K = new CPU() { Id = 65, Name = "Core i5-11600K", PartType = PartType.CPU, Manufacturer = Intel, Price = 700, SellPrice = 233, LevelUnlock = 34, LevelPercent = 1, Lighting = null, Series = Intel_Core_i5, RankingScore = 3004, Frequency = 4900, Cores = 6, CPUSocket = LGA_1200, Wattage = 125, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 8952, ScoreToValueRatio = 12.8, DefaultMemorySpeed = 3200, OverclockedCPUScore = 9104, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.85, OverclockedFrequency = 5000, CoreClockMultiplier = 0.005091, MemChannelsMultiplier = 5.748322, MemClockMultiplier = 0.002166 }; cpus.Add(Core_i5_11600K);
            CPU Core_i5_11600KF = new CPU() { Id = 66, Name = "Core i5-11600KF", PartType = PartType.CPU, Manufacturer = Intel, Price = 700, SellPrice = 233, LevelUnlock = 34, LevelPercent = 1, Lighting = null, Series = Intel_Core_i5, RankingScore = 3004, Frequency = 4900, Cores = 6, CPUSocket = LGA_1200, Wattage = 125, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 8952, ScoreToValueRatio = 12.8, DefaultMemorySpeed = 3200, OverclockedCPUScore = 9180, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.85, OverclockedFrequency = 5050, CoreClockMultiplier = 0.005091, MemChannelsMultiplier = 5.748322, MemClockMultiplier = 0.002166 }; cpus.Add(Core_i5_11600KF);
            CPU Core_i5_6400 = new CPU() { Id = 67, Name = "Core i5-6400", PartType = PartType.CPU, Manufacturer = Intel, Price = 155, SellPrice = 52, LevelUnlock = 2, LevelPercent = 1, Lighting = null, Series = Intel_Core_i5, RankingScore = 1079, Frequency = 3300, Cores = 4, CPUSocket = LGA_1151__Skylake_, Wattage = 65, Overclockable = false, ThermalThrottling = 100, Voltage = 1.25, BasicCPUScore = 3216, ScoreToValueRatio = 20.7, DefaultMemorySpeed = 2133, OverclockedCPUScore = 3216, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.75, OverclockedFrequency = 3300, CoreClockMultiplier = 0.002468, MemChannelsMultiplier = 0.959185, MemClockMultiplier = 0.00121 }; cpus.Add(Core_i5_6400);
            CPU Core_i5_6500 = new CPU() { Id = 68, Name = "Core i5-6500", PartType = PartType.CPU, Manufacturer = Intel, Price = 165, SellPrice = 55, LevelUnlock = 2, LevelPercent = 1, Lighting = null, Series = Intel_Core_i5, RankingScore = 1153, Frequency = 3600, Cores = 4, CPUSocket = LGA_1151__Skylake_, Wattage = 65, Overclockable = false, ThermalThrottling = 100, Voltage = 1.25, BasicCPUScore = 3437, ScoreToValueRatio = 20.8, DefaultMemorySpeed = 2133, OverclockedCPUScore = 3437, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.75, OverclockedFrequency = 3600, CoreClockMultiplier = 0.002468, MemChannelsMultiplier = 0.959185, MemClockMultiplier = 0.00121 }; cpus.Add(Core_i5_6500);
            CPU Core_i5_6600 = new CPU() { Id = 69, Name = "Core i5-6600", PartType = PartType.CPU, Manufacturer = Intel, Price = 175, SellPrice = 58, LevelUnlock = 2, LevelPercent = 1, Lighting = null, Series = Intel_Core_i5, RankingScore = 1227, Frequency = 3900, Cores = 4, CPUSocket = LGA_1151__Skylake_, Wattage = 65, Overclockable = false, ThermalThrottling = 100, Voltage = 1.25, BasicCPUScore = 3657, ScoreToValueRatio = 20.9, DefaultMemorySpeed = 2133, OverclockedCPUScore = 3657, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.75, OverclockedFrequency = 3900, CoreClockMultiplier = 0.002468, MemChannelsMultiplier = 0.959185, MemClockMultiplier = 0.00121 }; cpus.Add(Core_i5_6600);
            CPU Core_i5_6600K = new CPU() { Id = 70, Name = "Core i5-6600K", PartType = PartType.CPU, Manufacturer = Intel, Price = 180, SellPrice = 60, LevelUnlock = 2, LevelPercent = 1, Lighting = null, Series = Intel_Core_i5, RankingScore = 1227, Frequency = 3900, Cores = 4, CPUSocket = LGA_1151__Skylake_, Wattage = 91, Overclockable = true, ThermalThrottling = 100, Voltage = 1.25, BasicCPUScore = 3657, ScoreToValueRatio = 20.3, DefaultMemorySpeed = 2133, OverclockedCPUScore = 4246, MultiplierStep = 1, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 4700, CoreClockMultiplier = 0.002468, MemChannelsMultiplier = 0.959185, MemClockMultiplier = 0.00121 }; cpus.Add(Core_i5_6600K);
            CPU Core_i5_7400 = new CPU() { Id = 71, Name = "Core i5-7400", PartType = PartType.CPU, Manufacturer = Intel, Price = 170, SellPrice = 57, LevelUnlock = 12, LevelPercent = 1, Lighting = null, Series = Intel_Core_i5, RankingScore = 1214, Frequency = 3500, Cores = 4, CPUSocket = LGA_1151__Kaby_Lake_, Wattage = 65, Overclockable = false, ThermalThrottling = 100, Voltage = 1.2, BasicCPUScore = 3620, ScoreToValueRatio = 21.3, DefaultMemorySpeed = 2400, OverclockedCPUScore = 3620, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.7, OverclockedFrequency = 3500, CoreClockMultiplier = 0.001886, MemChannelsMultiplier = 1.278305, MemClockMultiplier = 0.001309 }; cpus.Add(Core_i5_7400);
            CPU Core_i5_7500 = new CPU() { Id = 72, Name = "Core i5-7500", PartType = PartType.CPU, Manufacturer = Intel, Price = 180, SellPrice = 60, LevelUnlock = 12, LevelPercent = 30, Lighting = null, Series = Intel_Core_i5, RankingScore = 1271, Frequency = 3800, Cores = 4, CPUSocket = LGA_1151__Kaby_Lake_, Wattage = 65, Overclockable = false, ThermalThrottling = 100, Voltage = 1.2, BasicCPUScore = 3789, ScoreToValueRatio = 21.1, DefaultMemorySpeed = 2400, OverclockedCPUScore = 3789, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.7, OverclockedFrequency = 3800, CoreClockMultiplier = 0.001886, MemChannelsMultiplier = 1.278305, MemClockMultiplier = 0.001309 }; cpus.Add(Core_i5_7500);
            CPU Core_i5_7600 = new CPU() { Id = 73, Name = "Core i5-7600", PartType = PartType.CPU, Manufacturer = Intel, Price = 190, SellPrice = 63, LevelUnlock = 12, LevelPercent = 40, Lighting = null, Series = Intel_Core_i5, RankingScore = 1328, Frequency = 4100, Cores = 4, CPUSocket = LGA_1151__Kaby_Lake_, Wattage = 65, Overclockable = false, ThermalThrottling = 100, Voltage = 1.2, BasicCPUScore = 3957, ScoreToValueRatio = 20.8, DefaultMemorySpeed = 2400, OverclockedCPUScore = 3957, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.7, OverclockedFrequency = 4100, CoreClockMultiplier = 0.001886, MemChannelsMultiplier = 1.278305, MemClockMultiplier = 0.001309 }; cpus.Add(Core_i5_7600);
            CPU Core_i5_7600K = new CPU() { Id = 74, Name = "Core i5-7600K", PartType = PartType.CPU, Manufacturer = Intel, Price = 200, SellPrice = 67, LevelUnlock = 13, LevelPercent = 30, Lighting = null, Series = Intel_Core_i5, RankingScore = 1346, Frequency = 4200, Cores = 4, CPUSocket = LGA_1151__Kaby_Lake_, Wattage = 91, Overclockable = true, ThermalThrottling = 100, Voltage = 1.2, BasicCPUScore = 4013, ScoreToValueRatio = 20.1, DefaultMemorySpeed = 2400, OverclockedCPUScore = 4463, MultiplierStep = 1, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 5000, CoreClockMultiplier = 0.001886, MemChannelsMultiplier = 1.278305, MemClockMultiplier = 0.001309 }; cpus.Add(Core_i5_7600K);
            CPU Core_i5_7640X = new CPU() { Id = 75, Name = "Core i5-7640X", PartType = PartType.CPU, Manufacturer = Intel, Price = 195, SellPrice = 65, LevelUnlock = 24, LevelPercent = 1, Lighting = null, Series = Intel_Core_i5, RankingScore = 1400, Frequency = 4300, Cores = 4, CPUSocket = LGA_2066, Wattage = 112, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 4173, ScoreToValueRatio = 21.4, DefaultMemorySpeed = 2666, OverclockedCPUScore = 4623, MultiplierStep = 1, NumberOfDies = 2, MaxMemoryChannels = 2, OverclockedVoltage = 1.75, OverclockedFrequency = 5100, CoreClockMultiplier = 0.001886, MemChannelsMultiplier = 1.278305, MemClockMultiplier = 0.001309 }; cpus.Add(Core_i5_7640X);
            CPU Core_i5_8400 = new CPU() { Id = 76, Name = "Core i5-8400", PartType = PartType.CPU, Manufacturer = Intel, Price = 250, SellPrice = 83, LevelUnlock = 15, LevelPercent = 20, Lighting = null, Series = Intel_Core_i5, RankingScore = 1828, Frequency = 4000, Cores = 6, CPUSocket = LGA_1151__Coffee_Lake_, Wattage = 65, Overclockable = false, ThermalThrottling = 100, Voltage = 1.25, BasicCPUScore = 5449, ScoreToValueRatio = 21.8, DefaultMemorySpeed = 2666, OverclockedCPUScore = 5449, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.75, OverclockedFrequency = 4000, CoreClockMultiplier = 0.003415, MemChannelsMultiplier = 2.332593, MemClockMultiplier = 0.001356 }; cpus.Add(Core_i5_8400);
            CPU Core_i5_8600K = new CPU() { Id = 77, Name = "Core i5-8600K", PartType = PartType.CPU, Manufacturer = Intel, Price = 280, SellPrice = 93, LevelUnlock = 15, LevelPercent = 40, Lighting = null, Series = Intel_Core_i5, RankingScore = 1931, Frequency = 4300, Cores = 6, CPUSocket = LGA_1151__Coffee_Lake_, Wattage = 95, Overclockable = true, ThermalThrottling = 100, Voltage = 1.3, BasicCPUScore = 5755, ScoreToValueRatio = 20.6, DefaultMemorySpeed = 2666, OverclockedCPUScore = 6467, MultiplierStep = 1, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.55, OverclockedFrequency = 5000, CoreClockMultiplier = 0.003415, MemChannelsMultiplier = 2.332593, MemClockMultiplier = 0.001356 }; cpus.Add(Core_i5_8600K);
            CPU Core_i5_9600K = new CPU() { Id = 78, Name = "Core i5-9600K", PartType = PartType.CPU, Manufacturer = Intel, Price = 300, SellPrice = 100, LevelUnlock = 20, LevelPercent = 1, Lighting = null, Series = Intel_Core_i5, RankingScore = 1969, Frequency = 4600, Cores = 6, CPUSocket = LGA_1151__Coffee_Lake_, Wattage = 95, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 5868, ScoreToValueRatio = 19.6, DefaultMemorySpeed = 2666, OverclockedCPUScore = 6351, MultiplierStep = 1, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.75, OverclockedFrequency = 5200, CoreClockMultiplier = 0.002697, MemChannelsMultiplier = 2.631136, MemClockMultiplier = 0.001162 }; cpus.Add(Core_i5_9600K);
            CPU Core_i7_10700 = new CPU() { Id = 79, Name = "Core i7-10700", PartType = PartType.CPU, Manufacturer = Intel, Price = 600, SellPrice = 200, LevelUnlock = 32, LevelPercent = 60, Lighting = null, Series = Intel_Core_i7, RankingScore = 3613, Frequency = 4800, Cores = 8, CPUSocket = LGA_1200, Wattage = 65, Overclockable = false, ThermalThrottling = 100, Voltage = 1.25, BasicCPUScore = 10769, ScoreToValueRatio = 17.9, DefaultMemorySpeed = 2933, OverclockedCPUScore = 10769, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.7, OverclockedFrequency = 4800, CoreClockMultiplier = 0.00547, MemChannelsMultiplier = 6.944405, MemClockMultiplier = 0.00279 }; cpus.Add(Core_i7_10700);
            CPU Core_i7_10700K = new CPU() { Id = 80, Name = "Core i7-10700K", PartType = PartType.CPU, Manufacturer = Intel, Price = 630, SellPrice = 210, LevelUnlock = 32, LevelPercent = 60, Lighting = null, Series = Intel_Core_i7, RankingScore = 3778, Frequency = 5100, Cores = 8, CPUSocket = LGA_1200, Wattage = 95, Overclockable = true, ThermalThrottling = 100, Voltage = 1.3, BasicCPUScore = 11258, ScoreToValueRatio = 17.9, DefaultMemorySpeed = 2933, OverclockedCPUScore = 11340, MultiplierStep = 1, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.7, OverclockedFrequency = 5150, CoreClockMultiplier = 0.00547, MemChannelsMultiplier = 6.944405, MemClockMultiplier = 0.00279 }; cpus.Add(Core_i7_10700K);
            CPU Core_i7_11700 = new CPU() { Id = 81, Name = "Core i7-11700", PartType = PartType.CPU, Manufacturer = Intel, Price = 950, SellPrice = 317, LevelUnlock = 34, LevelPercent = 20, Lighting = null, Series = Intel_Core_i7, RankingScore = 3799, Frequency = 4900, Cores = 8, CPUSocket = LGA_1200, Wattage = 65, Overclockable = false, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 11322, ScoreToValueRatio = 11.9, DefaultMemorySpeed = 3200, OverclockedCPUScore = 11322, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.85, OverclockedFrequency = 4900, CoreClockMultiplier = 0.006518, MemChannelsMultiplier = 14.03, MemClockMultiplier = 0.003605 }; cpus.Add(Core_i7_11700);
            CPU Core_i7_11700K = new CPU() { Id = 82, Name = "Core i7-11700K", PartType = PartType.CPU, Manufacturer = Intel, Price = 1000, SellPrice = 333, LevelUnlock = 34, LevelPercent = 20, Lighting = null, Series = Intel_Core_i7, RankingScore = 3864, Frequency = 5000, Cores = 8, CPUSocket = LGA_1200, Wattage = 125, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 11516, ScoreToValueRatio = 11.5, DefaultMemorySpeed = 3200, OverclockedCPUScore = 11613, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.85, OverclockedFrequency = 5050, CoreClockMultiplier = 0.006518, MemChannelsMultiplier = 14.03, MemClockMultiplier = 0.003605 }; cpus.Add(Core_i7_11700K);
            CPU Core_i7_11700KF = new CPU() { Id = 83, Name = "Core i7-11700KF", PartType = PartType.CPU, Manufacturer = Intel, Price = 1000, SellPrice = 333, LevelUnlock = 34, LevelPercent = 20, Lighting = null, Series = Intel_Core_i7, RankingScore = 3864, Frequency = 5000, Cores = 8, CPUSocket = LGA_1200, Wattage = 125, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 11516, ScoreToValueRatio = 11.5, DefaultMemorySpeed = 3200, OverclockedCPUScore = 11710, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.85, OverclockedFrequency = 5100, CoreClockMultiplier = 0.006518, MemChannelsMultiplier = 14.03, MemClockMultiplier = 0.003605 }; cpus.Add(Core_i7_11700KF);
            CPU Core_i7_6700 = new CPU() { Id = 84, Name = "Core i7-6700", PartType = PartType.CPU, Manufacturer = Intel, Price = 240, SellPrice = 80, LevelUnlock = 2, LevelPercent = 1, Lighting = null, Series = Intel_Core_i7, RankingScore = 1572, Frequency = 4000, Cores = 4, CPUSocket = LGA_1151__Skylake_, Wattage = 65, Overclockable = false, ThermalThrottling = 100, Voltage = 1.25, BasicCPUScore = 4685, ScoreToValueRatio = 19.5, DefaultMemorySpeed = 2133, OverclockedCPUScore = 4685, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.75, OverclockedFrequency = 4000, CoreClockMultiplier = 0.00404, MemChannelsMultiplier = 1.678704, MemClockMultiplier = 0.001113 }; cpus.Add(Core_i7_6700);
            CPU Core_i7_6700K = new CPU() { Id = 85, Name = "Core i7-6700K", PartType = PartType.CPU, Manufacturer = Intel, Price = 250, SellPrice = 83, LevelUnlock = 2, LevelPercent = 1, Lighting = null, Series = Intel_Core_i7, RankingScore = 1653, Frequency = 4200, Cores = 4, CPUSocket = LGA_1151__Skylake_, Wattage = 91, Overclockable = true, ThermalThrottling = 100, Voltage = 1.25, BasicCPUScore = 4926, ScoreToValueRatio = 19.7, DefaultMemorySpeed = 2133, OverclockedCPUScore = 5768, MultiplierStep = 1, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.6, OverclockedFrequency = 4900, CoreClockMultiplier = 0.00404, MemChannelsMultiplier = 1.678704, MemClockMultiplier = 0.001113 }; cpus.Add(Core_i7_6700K);
            CPU Core_i7_7700 = new CPU() { Id = 86, Name = "Core i7-7700", PartType = PartType.CPU, Manufacturer = Intel, Price = 260, SellPrice = 87, LevelUnlock = 12, LevelPercent = 60, Lighting = null, Series = Intel_Core_i7, RankingScore = 1703, Frequency = 4200, Cores = 4, CPUSocket = LGA_1151__Kaby_Lake_, Wattage = 65, Overclockable = false, ThermalThrottling = 100, Voltage = 1.25, BasicCPUScore = 5076, ScoreToValueRatio = 19.5, DefaultMemorySpeed = 2400, OverclockedCPUScore = 5076, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.75, OverclockedFrequency = 4200, CoreClockMultiplier = 0.003356, MemChannelsMultiplier = 1.378, MemClockMultiplier = 0.001 }; cpus.Add(Core_i7_7700);
            CPU Core_i7_7700K = new CPU() { Id = 87, Name = "Core i7-7700K", PartType = PartType.CPU, Manufacturer = Intel, Price = 270, SellPrice = 90, LevelUnlock = 13, LevelPercent = 60, Lighting = null, Series = Intel_Core_i7, RankingScore = 1804, Frequency = 4500, Cores = 4, CPUSocket = LGA_1151__Kaby_Lake_, Wattage = 91, Overclockable = true, ThermalThrottling = 100, Voltage = 1.25, BasicCPUScore = 5376, ScoreToValueRatio = 19.9, DefaultMemorySpeed = 2400, OverclockedCPUScore = 5776, MultiplierStep = 1, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.6, OverclockedFrequency = 4900, CoreClockMultiplier = 0.003356, MemChannelsMultiplier = 1.378, MemClockMultiplier = 0.001 }; cpus.Add(Core_i7_7700K);
            CPU Core_i7_7740X = new CPU() { Id = 88, Name = "Core i7-7740X", PartType = PartType.CPU, Manufacturer = Intel, Price = 265, SellPrice = 88, LevelUnlock = 24, LevelPercent = 1, Lighting = null, Series = Intel_Core_i7, RankingScore = 1803, Frequency = 4500, Cores = 4, CPUSocket = LGA_2066, Wattage = 112, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 5374, ScoreToValueRatio = 20.3, DefaultMemorySpeed = 2666, OverclockedCPUScore = 6106, MultiplierStep = 1, NumberOfDies = 2, MaxMemoryChannels = 2, OverclockedVoltage = 1.75, OverclockedFrequency = 5100, CoreClockMultiplier = 0.004094, MemChannelsMultiplier = 1.918283, MemClockMultiplier = 0.001084 }; cpus.Add(Core_i7_7740X);
            CPU Core_i7_7800X = new CPU() { Id = 89, Name = "Core i7-7800X", PartType = PartType.CPU, Manufacturer = Intel, Price = 320, SellPrice = 107, LevelUnlock = 26, LevelPercent = 1, Lighting = null, Series = Intel_Core_i7, RankingScore = 2268, Frequency = 4000, Cores = 6, CPUSocket = LGA_2066, Wattage = 140, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 6760, ScoreToValueRatio = 21.1, DefaultMemorySpeed = 2666, OverclockedCPUScore = 6886, MultiplierStep = 1, NumberOfDies = 2, MaxMemoryChannels = 4, OverclockedVoltage = 1.75, OverclockedFrequency = 4100, CoreClockMultiplier = 0.004223, MemChannelsMultiplier = 0.59329, MemClockMultiplier = 0.001318 }; cpus.Add(Core_i7_7800X);
            CPU Core_i7_7820X = new CPU() { Id = 90, Name = "Core i7-7820X", PartType = PartType.CPU, Manufacturer = Intel, Price = 700, SellPrice = 233, LevelUnlock = 26, LevelPercent = 1, Lighting = null, Series = Intel_Core_i7, RankingScore = 3206, Frequency = 4300, Cores = 8, CPUSocket = LGA_2066, Wattage = 140, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 9556, ScoreToValueRatio = 13.7, DefaultMemorySpeed = 2666, OverclockedCPUScore = 9695, MultiplierStep = 1, NumberOfDies = 2, MaxMemoryChannels = 4, OverclockedVoltage = 1.75, OverclockedFrequency = 4400, CoreClockMultiplier = 0.004677, MemChannelsMultiplier = 1.499261, MemClockMultiplier = 0.002558 }; cpus.Add(Core_i7_7820X);
            CPU Core_i7_8086K = new CPU() { Id = 91, Name = "Core i7-8086K", PartType = PartType.CPU, Manufacturer = Intel, Price = 450, SellPrice = 150, LevelUnlock = 20, LevelPercent = 1, Lighting = null, Series = Intel_Core_i7, RankingScore = 2856, Frequency = 5000, Cores = 6, CPUSocket = LGA_1151__Coffee_Lake_, Wattage = 95, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 8512, ScoreToValueRatio = 18.9, DefaultMemorySpeed = 2666, OverclockedCPUScore = 8834, MultiplierStep = 1, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.8, OverclockedFrequency = 5200, CoreClockMultiplier = 0.005409, MemChannelsMultiplier = 4.643015, MemClockMultiplier = 0.001959 }; cpus.Add(Core_i7_8086K);
            CPU Core_i7_8700 = new CPU() { Id = 92, Name = "Core i7-8700", PartType = PartType.CPU, Manufacturer = Intel, Price = 360, SellPrice = 120, LevelUnlock = 15, LevelPercent = 60, Lighting = null, Series = Intel_Core_i7, RankingScore = 2640, Frequency = 4600, Cores = 6, CPUSocket = LGA_1151__Coffee_Lake_, Wattage = 65, Overclockable = false, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 7867, ScoreToValueRatio = 21.9, DefaultMemorySpeed = 2666, OverclockedCPUScore = 7867, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.85, OverclockedFrequency = 4600, CoreClockMultiplier = 0.005409, MemChannelsMultiplier = 4.643015, MemClockMultiplier = 0.001959 }; cpus.Add(Core_i7_8700);
            CPU Core_i7_8700K = new CPU() { Id = 93, Name = "Core i7-8700K", PartType = PartType.CPU, Manufacturer = Intel, Price = 400, SellPrice = 133, LevelUnlock = 15, LevelPercent = 80, Lighting = null, Series = Intel_Core_i7, RankingScore = 2694, Frequency = 4700, Cores = 6, CPUSocket = LGA_1151__Coffee_Lake_, Wattage = 95, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 8028, ScoreToValueRatio = 20.1, DefaultMemorySpeed = 2666, OverclockedCPUScore = 8512, MultiplierStep = 1, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.6, OverclockedFrequency = 5000, CoreClockMultiplier = 0.005409, MemChannelsMultiplier = 4.643015, MemClockMultiplier = 0.001959 }; cpus.Add(Core_i7_8700K);
            CPU Core_i7_9700K = new CPU() { Id = 94, Name = "Core i7-9700K", PartType = PartType.CPU, Manufacturer = Intel, Price = 420, SellPrice = 140, LevelUnlock = 20, LevelPercent = 30, Lighting = null, Series = Intel_Core_i7, RankingScore = 2698, Frequency = 4900, Cores = 8, CPUSocket = LGA_1151__Coffee_Lake_, Wattage = 95, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 8040, ScoreToValueRatio = 19.1, DefaultMemorySpeed = 2666, OverclockedCPUScore = 8567, MultiplierStep = 1, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.75, OverclockedFrequency = 5300, CoreClockMultiplier = 0.004427, MemChannelsMultiplier = 4.645202, MemClockMultiplier = 0.002606 }; cpus.Add(Core_i7_9700K);
            CPU Core_i7_9800X = new CPU() { Id = 95, Name = "Core i7-9800X", PartType = PartType.CPU, Manufacturer = Intel, Price = 500, SellPrice = 167, LevelUnlock = 29, LevelPercent = 1, Lighting = null, Series = Intel_Core_i7, RankingScore = 3253, Frequency = 4400, Cores = 8, CPUSocket = LGA_2066, Wattage = 165, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 9695, ScoreToValueRatio = 19.4, DefaultMemorySpeed = 2666, OverclockedCPUScore = 9834, MultiplierStep = 1, NumberOfDies = 2, MaxMemoryChannels = 4, OverclockedVoltage = 1.75, OverclockedFrequency = 4500, CoreClockMultiplier = 0.004677, MemChannelsMultiplier = 1.499261, MemClockMultiplier = 0.002558 }; cpus.Add(Core_i7_9800X);
            CPU Core_i9_10900 = new CPU() { Id = 96, Name = "Core i9-10900", PartType = PartType.CPU, Manufacturer = Intel, Price = 950, SellPrice = 317, LevelUnlock = 32, LevelPercent = 80, Lighting = null, Series = Intel_Core_i9, RankingScore = 4432, Frequency = 5200, Cores = 10, CPUSocket = LGA_1200, Wattage = 65, Overclockable = false, ThermalThrottling = 100, Voltage = 1.3, BasicCPUScore = 13209, ScoreToValueRatio = 13.9, DefaultMemorySpeed = 2933, OverclockedCPUScore = 13209, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.75, OverclockedFrequency = 5200, CoreClockMultiplier = 0.005652, MemChannelsMultiplier = 11.57727, MemClockMultiplier = 0.004724 }; cpus.Add(Core_i9_10900);
            CPU Core_i9_10900K = new CPU() { Id = 97, Name = "Core i9-10900K", PartType = PartType.CPU, Manufacturer = Intel, Price = 1000, SellPrice = 333, LevelUnlock = 32, LevelPercent = 80, Lighting = null, Series = Intel_Core_i9, RankingScore = 4489, Frequency = 5300, Cores = 10, CPUSocket = LGA_1200, Wattage = 125, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 13378, ScoreToValueRatio = 13.4, DefaultMemorySpeed = 2933, OverclockedCPUScore = 13462, MultiplierStep = 1, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.75, OverclockedFrequency = 5350, CoreClockMultiplier = 0.005652, MemChannelsMultiplier = 11.57727, MemClockMultiplier = 0.004724 }; cpus.Add(Core_i9_10900K);
            CPU Core_i9_10900X = new CPU() { Id = 98, Name = "Core i9-10900X", PartType = PartType.CPU, Manufacturer = Intel, Price = 1000, SellPrice = 333, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Series = Intel_Core_i9, RankingScore = 3737, Frequency = 4700, Cores = 10, CPUSocket = LGA_2066, Wattage = 165, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 11136, ScoreToValueRatio = 11.1, DefaultMemorySpeed = 2933, OverclockedCPUScore = 11140, MultiplierStep = 1, NumberOfDies = 2, MaxMemoryChannels = 4, OverclockedVoltage = 1.75, OverclockedFrequency = 4800, CoreClockMultiplier = 0.000135, MemChannelsMultiplier = 1.043, MemClockMultiplier = 0.005027 }; cpus.Add(Core_i9_10900X);
            CPU Core_i9_10920X = new CPU() { Id = 99, Name = "Core i9-10920X", PartType = PartType.CPU, Manufacturer = Intel, Price = 1200, SellPrice = 400, LevelUnlock = 31, LevelPercent = 15, Lighting = null, Series = Intel_Core_i9, RankingScore = 3855, Frequency = 4800, Cores = 12, CPUSocket = LGA_2066, Wattage = 165, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 11489, ScoreToValueRatio = 9.6, DefaultMemorySpeed = 2933, OverclockedCPUScore = 11566, MultiplierStep = 1, NumberOfDies = 2, MaxMemoryChannels = 4, OverclockedVoltage = 1.75, OverclockedFrequency = 4900, CoreClockMultiplier = 0.002584, MemChannelsMultiplier = 2.629461, MemClockMultiplier = 0.004931 }; cpus.Add(Core_i9_10920X);
            CPU Core_i9_10940X = new CPU() { Id = 100, Name = "Core i9-10940X", PartType = PartType.CPU, Manufacturer = Intel, Price = 1600, SellPrice = 533, LevelUnlock = 31, LevelPercent = 60, Lighting = null, Series = Intel_Core_i9, RankingScore = 3987, Frequency = 4800, Cores = 14, CPUSocket = LGA_2066, Wattage = 165, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 11882, ScoreToValueRatio = 7.4, DefaultMemorySpeed = 2933, OverclockedCPUScore = 11888, MultiplierStep = 1, NumberOfDies = 2, MaxMemoryChannels = 4, OverclockedVoltage = 1.75, OverclockedFrequency = 4900, CoreClockMultiplier = 0.000206, MemChannelsMultiplier = 3.014958, MemClockMultiplier = 0.005794 }; cpus.Add(Core_i9_10940X);
            CPU Core_i9_10980XE_Extreme_Edition = new CPU() { Id = 101, Name = "Core i9-10980XE Extreme Edition", PartType = PartType.CPU, Manufacturer = Intel, Price = 1200, SellPrice = 400, LevelUnlock = 34, LevelPercent = 80, Lighting = null, Series = Intel_Core_i9, RankingScore = 4326, Frequency = 4800, Cores = 18, CPUSocket = LGA_2066, Wattage = 165, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 12893, ScoreToValueRatio = 10.7, DefaultMemorySpeed = 2933, OverclockedCPUScore = 13079, MultiplierStep = 1, NumberOfDies = 2, MaxMemoryChannels = 4, OverclockedVoltage = 1.85, OverclockedFrequency = 4900, CoreClockMultiplier = 0.006234, MemChannelsMultiplier = 3.990303, MemClockMultiplier = 0.005258 }; cpus.Add(Core_i9_10980XE_Extreme_Edition);
            CPU Core_i9_11900 = new CPU() { Id = 102, Name = "Core i9-11900", PartType = PartType.CPU, Manufacturer = Intel, Price = 1150, SellPrice = 383, LevelUnlock = 34, LevelPercent = 50, Lighting = null, Series = Intel_Core_i9, RankingScore = 4154, Frequency = 5200, Cores = 8, CPUSocket = LGA_1200, Wattage = 65, Overclockable = false, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 12380, ScoreToValueRatio = 10.8, DefaultMemorySpeed = 3200, OverclockedCPUScore = 12380, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.85, OverclockedFrequency = 5200, CoreClockMultiplier = 0.004559, MemChannelsMultiplier = 12.91, MemClockMultiplier = 0.003981 }; cpus.Add(Core_i9_11900);
            CPU Core_i9_11900K = new CPU() { Id = 103, Name = "Core i9-11900K", PartType = PartType.CPU, Manufacturer = Intel, Price = 1200, SellPrice = 400, LevelUnlock = 34, LevelPercent = 50, Lighting = null, Series = Intel_Core_i9, RankingScore = 4200, Frequency = 5300, Cores = 8, CPUSocket = LGA_1200, Wattage = 125, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 12516, ScoreToValueRatio = 10.4, DefaultMemorySpeed = 3200, OverclockedCPUScore = 12611, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.85, OverclockedFrequency = 5370, CoreClockMultiplier = 0.004559, MemChannelsMultiplier = 12.91, MemClockMultiplier = 0.003981 }; cpus.Add(Core_i9_11900K);
            CPU Core_i9_11900KF = new CPU() { Id = 104, Name = "Core i9-11900KF", PartType = PartType.CPU, Manufacturer = Intel, Price = 1200, SellPrice = 400, LevelUnlock = 34, LevelPercent = 50, Lighting = null, Series = Intel_Core_i9, RankingScore = 4200, Frequency = 5300, Cores = 8, CPUSocket = LGA_1200, Wattage = 125, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 12516, ScoreToValueRatio = 10.4, DefaultMemorySpeed = 3200, OverclockedCPUScore = 12652, MultiplierStep = 0.25, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.85, OverclockedFrequency = 5400, CoreClockMultiplier = 0.004559, MemChannelsMultiplier = 12.91, MemClockMultiplier = 0.003981 }; cpus.Add(Core_i9_11900KF);
            CPU Core_i9_7900X = new CPU() { Id = 105, Name = "Core i9-7900X", PartType = PartType.CPU, Manufacturer = Intel, Price = 900, SellPrice = 300, LevelUnlock = 26, LevelPercent = 50, Lighting = null, Series = Intel_Core_i9, RankingScore = 3565, Frequency = 4500, Cores = 10, CPUSocket = LGA_2066, Wattage = 140, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 10626, ScoreToValueRatio = 11.8, DefaultMemorySpeed = 2666, OverclockedCPUScore = 10710, MultiplierStep = 1, NumberOfDies = 2, MaxMemoryChannels = 4, OverclockedVoltage = 1.75, OverclockedFrequency = 4600, CoreClockMultiplier = 0.002835, MemChannelsMultiplier = 2.227028, MemClockMultiplier = 0.004214 }; cpus.Add(Core_i9_7900X);
            CPU Core_i9_7920X = new CPU() { Id = 106, Name = "Core i9-7920X", PartType = PartType.CPU, Manufacturer = Intel, Price = 920, SellPrice = 307, LevelUnlock = 26, LevelPercent = 62, Lighting = null, Series = Intel_Core_i9, RankingScore = 3606, Frequency = 4300, Cores = 12, CPUSocket = LGA_2066, Wattage = 140, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 10746, ScoreToValueRatio = 11.7, DefaultMemorySpeed = 2666, OverclockedCPUScore = 10899, MultiplierStep = 1, NumberOfDies = 2, MaxMemoryChannels = 4, OverclockedVoltage = 1.75, OverclockedFrequency = 4400, CoreClockMultiplier = 0.005134, MemChannelsMultiplier = 3.494896, MemClockMultiplier = 0.00458 }; cpus.Add(Core_i9_7920X);
            CPU Core_i9_7940X = new CPU() { Id = 107, Name = "Core i9-7940X", PartType = PartType.CPU, Manufacturer = Intel, Price = 940, SellPrice = 313, LevelUnlock = 26, LevelPercent = 74, Lighting = null, Series = Intel_Core_i9, RankingScore = 3719, Frequency = 4300, Cores = 14, CPUSocket = LGA_2066, Wattage = 165, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 11084, ScoreToValueRatio = 11.8, DefaultMemorySpeed = 2666, OverclockedCPUScore = 11342, MultiplierStep = 1, NumberOfDies = 2, MaxMemoryChannels = 4, OverclockedVoltage = 1.75, OverclockedFrequency = 4400, CoreClockMultiplier = 0.008674, MemChannelsMultiplier = 3.557259, MemClockMultiplier = 0.004726 }; cpus.Add(Core_i9_7940X);
            CPU Core_i9_7960X = new CPU() { Id = 108, Name = "Core i9-7960X", PartType = PartType.CPU, Manufacturer = Intel, Price = 1000, SellPrice = 333, LevelUnlock = 26, LevelPercent = 86, Lighting = null, Series = Intel_Core_i9, RankingScore = 3821, Frequency = 4200, Cores = 16, CPUSocket = LGA_2066, Wattage = 165, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 11388, ScoreToValueRatio = 11.4, DefaultMemorySpeed = 2666, OverclockedCPUScore = 11556, MultiplierStep = 1, NumberOfDies = 2, MaxMemoryChannels = 4, OverclockedVoltage = 1.75, OverclockedFrequency = 4300, CoreClockMultiplier = 0.005643, MemChannelsMultiplier = 3.864359, MemClockMultiplier = 0.004518 }; cpus.Add(Core_i9_7960X);
            CPU Core_i9_7980XE = new CPU() { Id = 109, Name = "Core i9-7980XE", PartType = PartType.CPU, Manufacturer = Intel, Price = 1200, SellPrice = 400, LevelUnlock = 26, LevelPercent = 94, Lighting = null, Series = Intel_Core_i9, RankingScore = 3812, Frequency = 4200, Cores = 18, CPUSocket = LGA_2066, Wattage = 165, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 11360, ScoreToValueRatio = 9.5, DefaultMemorySpeed = 2666, OverclockedCPUScore = 11546, MultiplierStep = 1, NumberOfDies = 2, MaxMemoryChannels = 4, OverclockedVoltage = 1.75, OverclockedFrequency = 4300, CoreClockMultiplier = 0.006234, MemChannelsMultiplier = 3.990303, MemClockMultiplier = 0.005258 }; cpus.Add(Core_i9_7980XE);
            CPU Core_i9_9820X = new CPU() { Id = 110, Name = "Core i9-9820X", PartType = PartType.CPU, Manufacturer = Intel, Price = 580, SellPrice = 193, LevelUnlock = 29, LevelPercent = 20, Lighting = null, Series = Intel_Core_i9, RankingScore = 3428, Frequency = 4200, Cores = 10, CPUSocket = LGA_2066, Wattage = 165, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 10215, ScoreToValueRatio = 17.6, DefaultMemorySpeed = 2666, OverclockedCPUScore = 10316, MultiplierStep = 1, NumberOfDies = 2, MaxMemoryChannels = 4, OverclockedVoltage = 1.75, OverclockedFrequency = 4300, CoreClockMultiplier = 0.00337, MemChannelsMultiplier = 1.206831, MemClockMultiplier = 0.002361 }; cpus.Add(Core_i9_9820X);
            CPU Core_i9_9900K = new CPU() { Id = 111, Name = "Core i9-9900K", PartType = PartType.CPU, Manufacturer = Intel, Price = 730, SellPrice = 243, LevelUnlock = 20, LevelPercent = 60, Lighting = null, Series = Intel_Core_i9, RankingScore = 3568, Frequency = 5000, Cores = 8, CPUSocket = LGA_1151__Coffee_Lake_, Wattage = 95, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 10633, ScoreToValueRatio = 14.6, DefaultMemorySpeed = 2666, OverclockedCPUScore = 10862, MultiplierStep = 1, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.75, OverclockedFrequency = 5150, CoreClockMultiplier = 0.005127, MemChannelsMultiplier = 8.240937, MemClockMultiplier = 0.002073 }; cpus.Add(Core_i9_9900K);
            CPU Core_i9_9900KS = new CPU() { Id = 112, Name = "Core i9-9900KS", PartType = PartType.CPU, Manufacturer = Intel, Price = 800, SellPrice = 267, LevelUnlock = 20, LevelPercent = 90, Lighting = null, Series = Intel_Core_i9, RankingScore = 3568, Frequency = 5000, Cores = 8, CPUSocket = LGA_1151__Coffee_Lake_, Wattage = 127, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 10633, ScoreToValueRatio = 13.3, DefaultMemorySpeed = 2666, OverclockedCPUScore = 11091, MultiplierStep = 1, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.8, OverclockedFrequency = 5300, CoreClockMultiplier = 0.005127, MemChannelsMultiplier = 8.240937, MemClockMultiplier = 0.002073 }; cpus.Add(Core_i9_9900KS);
            CPU Core_i9_9900X = new CPU() { Id = 113, Name = "Core i9-9900X", PartType = PartType.CPU, Manufacturer = Intel, Price = 660, SellPrice = 220, LevelUnlock = 29, LevelPercent = 1, Lighting = null, Series = Intel_Core_i9, RankingScore = 3537, Frequency = 4400, Cores = 10, CPUSocket = LGA_2066, Wattage = 165, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 10541, ScoreToValueRatio = 16, DefaultMemorySpeed = 2666, OverclockedCPUScore = 10626, MultiplierStep = 1, NumberOfDies = 2, MaxMemoryChannels = 4, OverclockedVoltage = 1.75, OverclockedFrequency = 4500, CoreClockMultiplier = 0.002835, MemChannelsMultiplier = 2.227028, MemClockMultiplier = 0.004214 }; cpus.Add(Core_i9_9900X);
            CPU Core_i9_9920X = new CPU() { Id = 114, Name = "Core i9-9920X", PartType = PartType.CPU, Manufacturer = Intel, Price = 950, SellPrice = 317, LevelUnlock = 29, LevelPercent = 20, Lighting = null, Series = Intel_Core_i9, RankingScore = 3657, Frequency = 4400, Cores = 12, CPUSocket = LGA_2066, Wattage = 165, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 10899, ScoreToValueRatio = 11.5, DefaultMemorySpeed = 2666, OverclockedCPUScore = 11052, MultiplierStep = 1, NumberOfDies = 2, MaxMemoryChannels = 4, OverclockedVoltage = 1.75, OverclockedFrequency = 4500, CoreClockMultiplier = 0.005134, MemChannelsMultiplier = 3.494896, MemClockMultiplier = 0.00458 }; cpus.Add(Core_i9_9920X);
            CPU Core_i9_9940X = new CPU() { Id = 115, Name = "Core i9-9940X", PartType = PartType.CPU, Manufacturer = Intel, Price = 1050, SellPrice = 350, LevelUnlock = 29, LevelPercent = 40, Lighting = null, Series = Intel_Core_i9, RankingScore = 3806, Frequency = 4400, Cores = 14, CPUSocket = LGA_2066, Wattage = 165, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 11342, ScoreToValueRatio = 10.8, DefaultMemorySpeed = 2666, OverclockedCPUScore = 11601, MultiplierStep = 1, NumberOfDies = 2, MaxMemoryChannels = 4, OverclockedVoltage = 1.75, OverclockedFrequency = 4500, CoreClockMultiplier = 0.008674, MemChannelsMultiplier = 3.557259, MemClockMultiplier = 0.004726 }; cpus.Add(Core_i9_9940X);
            CPU Core_i9_9960X = new CPU() { Id = 116, Name = "Core i9-9960X", PartType = PartType.CPU, Manufacturer = Intel, Price = 1150, SellPrice = 383, LevelUnlock = 29, LevelPercent = 60, Lighting = null, Series = Intel_Core_i9, RankingScore = 3934, Frequency = 4400, Cores = 16, CPUSocket = LGA_2066, Wattage = 165, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 11724, ScoreToValueRatio = 10.2, DefaultMemorySpeed = 2666, OverclockedCPUScore = 11893, MultiplierStep = 1, NumberOfDies = 2, MaxMemoryChannels = 4, OverclockedVoltage = 1.75, OverclockedFrequency = 4500, CoreClockMultiplier = 0.005643, MemChannelsMultiplier = 3.864359, MemClockMultiplier = 0.004518 }; cpus.Add(Core_i9_9960X);
            CPU Core_i9_9980XE = new CPU() { Id = 117, Name = "Core i9-9980XE", PartType = PartType.CPU, Manufacturer = Intel, Price = 1300, SellPrice = 433, LevelUnlock = 29, LevelPercent = 80, Lighting = null, Series = Intel_Core_i9, RankingScore = 3936, Frequency = 4400, Cores = 18, CPUSocket = LGA_2066, Wattage = 165, Overclockable = true, ThermalThrottling = 100, Voltage = 1.35, BasicCPUScore = 11731, ScoreToValueRatio = 9, DefaultMemorySpeed = 2666, OverclockedCPUScore = 11917, MultiplierStep = 1, NumberOfDies = 2, MaxMemoryChannels = 4, OverclockedVoltage = 1.75, OverclockedFrequency = 4500, CoreClockMultiplier = 0.006234, MemChannelsMultiplier = 3.990303, MemClockMultiplier = 0.005258 }; cpus.Add(Core_i9_9980XE);
            CPU Pentium_G4400 = new CPU() { Id = 118, Name = "Pentium G4400", PartType = PartType.CPU, Manufacturer = Intel, Price = 65, SellPrice = 22, LevelUnlock = 1, LevelPercent = 1, Lighting = null, Series = Intel_Pentium, RankingScore = 541, Frequency = 3300, Cores = 2, CPUSocket = LGA_1151__Skylake_, Wattage = 54, Overclockable = false, ThermalThrottling = 100, Voltage = 1.1, BasicCPUScore = 1613, ScoreToValueRatio = 24.8, DefaultMemorySpeed = 2133, OverclockedCPUScore = 1613, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.6, OverclockedFrequency = 3300, CoreClockMultiplier = 0.001651, MemChannelsMultiplier = 0.183595, MemClockMultiplier = 0.000402 }; cpus.Add(Pentium_G4400);
            CPU Pentium_G4500 = new CPU() { Id = 119, Name = "Pentium G4500", PartType = PartType.CPU, Manufacturer = Intel, Price = 75, SellPrice = 25, LevelUnlock = 1, LevelPercent = 1, Lighting = null, Series = Intel_Pentium, RankingScore = 574, Frequency = 3500, Cores = 2, CPUSocket = LGA_1151__Skylake_, Wattage = 51, Overclockable = false, ThermalThrottling = 100, Voltage = 1.1, BasicCPUScore = 1711, ScoreToValueRatio = 22.8, DefaultMemorySpeed = 2133, OverclockedCPUScore = 1711, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.6, OverclockedFrequency = 3500, CoreClockMultiplier = 0.001651, MemChannelsMultiplier = 0.183595, MemClockMultiplier = 0.000402 }; cpus.Add(Pentium_G4500);
            CPU Pentium_G4520 = new CPU() { Id = 120, Name = "Pentium G4520", PartType = PartType.CPU, Manufacturer = Intel, Price = 90, SellPrice = 30, LevelUnlock = 1, LevelPercent = 1, Lighting = null, Series = Intel_Pentium, RankingScore = 590, Frequency = 3600, Cores = 2, CPUSocket = LGA_1151__Skylake_, Wattage = 51, Overclockable = false, ThermalThrottling = 100, Voltage = 1.1, BasicCPUScore = 1760, ScoreToValueRatio = 19.6, DefaultMemorySpeed = 2133, OverclockedCPUScore = 1760, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.6, OverclockedFrequency = 3600, CoreClockMultiplier = 0.001651, MemChannelsMultiplier = 0.183595, MemClockMultiplier = 0.000402 }; cpus.Add(Pentium_G4520);
            CPU Pentium_G4560 = new CPU() { Id = 121, Name = "Pentium G4560", PartType = PartType.CPU, Manufacturer = Intel, Price = 90, SellPrice = 30, LevelUnlock = 5, LevelPercent = 1, Lighting = null, Series = Intel_Pentium, RankingScore = 758, Frequency = 3500, Cores = 2, CPUSocket = LGA_1151__Kaby_Lake_, Wattage = 54, Overclockable = false, ThermalThrottling = 100, Voltage = 1.1, BasicCPUScore = 2259, ScoreToValueRatio = 25.1, DefaultMemorySpeed = 2400, OverclockedCPUScore = 2259, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.6, OverclockedFrequency = 3500, CoreClockMultiplier = 0.002539, MemChannelsMultiplier = 0.315911, MemClockMultiplier = 0.00024 }; cpus.Add(Pentium_G4560);
            CPU Pentium_G4600 = new CPU() { Id = 122, Name = "Pentium G4600", PartType = PartType.CPU, Manufacturer = Intel, Price = 90, SellPrice = 30, LevelUnlock = 5, LevelPercent = 40, Lighting = null, Series = Intel_Pentium, RankingScore = 783, Frequency = 3600, Cores = 2, CPUSocket = LGA_1151__Kaby_Lake_, Wattage = 51, Overclockable = false, ThermalThrottling = 100, Voltage = 1.1, BasicCPUScore = 2335, ScoreToValueRatio = 25.9, DefaultMemorySpeed = 2400, OverclockedCPUScore = 2335, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.6, OverclockedFrequency = 3600, CoreClockMultiplier = 0.002539, MemChannelsMultiplier = 0.315911, MemClockMultiplier = 0.00024 }; cpus.Add(Pentium_G4600);
            CPU Pentium_G4620 = new CPU() { Id = 123, Name = "Pentium G4620", PartType = PartType.CPU, Manufacturer = Intel, Price = 115, SellPrice = 38, LevelUnlock = 5, LevelPercent = 60, Lighting = null, Series = Intel_Pentium, RankingScore = 809, Frequency = 3700, Cores = 2, CPUSocket = LGA_1151__Kaby_Lake_, Wattage = 51, Overclockable = false, ThermalThrottling = 100, Voltage = 1.1, BasicCPUScore = 2410, ScoreToValueRatio = 21, DefaultMemorySpeed = 2400, OverclockedCPUScore = 2410, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.6, OverclockedFrequency = 3700, CoreClockMultiplier = 0.002539, MemChannelsMultiplier = 0.315911, MemClockMultiplier = 0.00024 }; cpus.Add(Pentium_G4620);
            CPU Pentium_G6400 = new CPU() { Id = 124, Name = "Pentium G6400", PartType = PartType.CPU, Manufacturer = Intel, Price = 120, SellPrice = 40, LevelUnlock = 32, LevelPercent = 20, Lighting = null, Series = Intel_Pentium, RankingScore = 858, Frequency = 4000, Cores = 2, CPUSocket = LGA_1200, Wattage = 58, Overclockable = false, ThermalThrottling = 100, Voltage = 1.1, BasicCPUScore = 2556, ScoreToValueRatio = 21.3, DefaultMemorySpeed = 2666, OverclockedCPUScore = 2556, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.6, OverclockedFrequency = 4000, CoreClockMultiplier = 0.00165, MemChannelsMultiplier = 0.733028, MemClockMultiplier = 0.000127 }; cpus.Add(Pentium_G6400);
            CPU Pentium_G6500 = new CPU() { Id = 125, Name = "Pentium G6500", PartType = PartType.CPU, Manufacturer = Intel, Price = 130, SellPrice = 43, LevelUnlock = 32, LevelPercent = 20, Lighting = null, Series = Intel_Pentium, RankingScore = 874, Frequency = 4100, Cores = 2, CPUSocket = LGA_1200, Wattage = 58, Overclockable = false, ThermalThrottling = 100, Voltage = 1.1, BasicCPUScore = 2606, ScoreToValueRatio = 20, DefaultMemorySpeed = 2666, OverclockedCPUScore = 2606, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.6, OverclockedFrequency = 4100, CoreClockMultiplier = 0.00165, MemChannelsMultiplier = 0.733028, MemClockMultiplier = 0.000127 }; cpus.Add(Pentium_G6500);
            CPU Pentium_G6600 = new CPU() { Id = 126, Name = "Pentium G6600", PartType = PartType.CPU, Manufacturer = Intel, Price = 140, SellPrice = 47, LevelUnlock = 32, LevelPercent = 20, Lighting = null, Series = Intel_Pentium, RankingScore = 891, Frequency = 4200, Cores = 2, CPUSocket = LGA_1200, Wattage = 58, Overclockable = false, ThermalThrottling = 100, Voltage = 1.1, BasicCPUScore = 2655, ScoreToValueRatio = 19, DefaultMemorySpeed = 2666, OverclockedCPUScore = 2655, MultiplierStep = 0, NumberOfDies = 1, MaxMemoryChannels = 2, OverclockedVoltage = 1.6, OverclockedFrequency = 4200, CoreClockMultiplier = 0.00165, MemChannelsMultiplier = 0.733028, MemClockMultiplier = 0.000127 }; cpus.Add(Pentium_G6600);
            #endregion
            _context.CPU.AddRange(cpus);
            #region CPUCooler
            List<CPUCooler> cpuCoolers = new List<CPUCooler>();
            CPUCooler Alpine_12_CO = new CPUCooler() { Id = 1, Name = "Alpine 12 CO", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 15, SellPrice = 5, LevelUnlock = 3, LevelPercent = 1, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 45, CPUSockets = new List<CPUSocket>() { LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200 }, Height = 77, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Alpine_12_CO);
            CPUCooler Alpine_12_LP = new CPUCooler() { Id = 2, Name = "Alpine 12 LP", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 15, SellPrice = 5, LevelUnlock = 3, LevelPercent = 35, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 35, CPUSockets = new List<CPUSocket>() { LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200 }, Height = 54, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Alpine_12_LP);
            CPUCooler Alpine_12_Passive = new CPUCooler() { Id = 3, Name = "Alpine 12 Passive", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 37, SellPrice = 12, LevelUnlock = 14, LevelPercent = 70, Lighting = null, WaterCooler = false, Passive = true, AirFlow = 28, CPUSockets = new List<CPUSocket>() { LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200 }, Height = 69, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Alpine_12_Passive);
            CPUCooler Alpine_23 = new CPUCooler() { Id = 4, Name = "Alpine 23", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 30, SellPrice = 10, LevelUnlock = 30, LevelPercent = 1, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 35, CPUSockets = new List<CPUSocket>() { AM4 }, Height = 65, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Alpine_23);
            CPUCooler Alpine_23_CO = new CPUCooler() { Id = 5, Name = "Alpine 23 CO", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 40, SellPrice = 13, LevelUnlock = 30, LevelPercent = 1, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 45, CPUSockets = new List<CPUSocket>() { AM4 }, Height = 65, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Alpine_23_CO);
            CPUCooler Alpine_AM4_Passive = new CPUCooler() { Id = 6, Name = "Alpine AM4 Passive", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 37, SellPrice = 12, LevelUnlock = 14, LevelPercent = 70, Lighting = null, WaterCooler = false, Passive = true, AirFlow = 28, CPUSockets = new List<CPUSocket>() { AM3_, AM4 }, Height = 70, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Alpine_AM4_Passive);
            CPUCooler Freezer_11_LP = new CPUCooler() { Id = 7, Name = "Freezer 11 LP", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 25, SellPrice = 31, LevelUnlock = 1, LevelPercent = 60, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 40, CPUSockets = new List<CPUSocket>() { LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200 }, Height = 59, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Freezer_11_LP);
            CPUCooler Freezer_12 = new CPUCooler() { Id = 8, Name = "Freezer 12", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 25, SellPrice = 8, LevelUnlock = 13, LevelPercent = 50, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 50, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 130, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Freezer_12);
            CPUCooler Freezer_12_CO = new CPUCooler() { Id = 9, Name = "Freezer 12 CO", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 75, SellPrice = 25, LevelUnlock = 13, LevelPercent = 60, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 40, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 130, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Freezer_12_CO);
            CPUCooler Freezer_33 = new CPUCooler() { Id = 10, Name = "Freezer 33", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 25, SellPrice = 8, LevelUnlock = 13, LevelPercent = 30, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 53, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 150, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Freezer_33);
            CPUCooler Freezer_33_eSports_Edition__Green_ = new CPUCooler() { Id = 11, Name = "Freezer 33 eSports Edition (Green)", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 50, SellPrice = 17, LevelUnlock = 6, LevelPercent = 60, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 100, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 150, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 3.25 }; cpuCoolers.Add(Freezer_33_eSports_Edition__Green_);
            CPUCooler Freezer_33_eSports_Edition__Red_ = new CPUCooler() { Id = 12, Name = "Freezer 33 eSports Edition (Red)", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 50, SellPrice = 17, LevelUnlock = 6, LevelPercent = 1, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 100, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 150, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 3.25 }; cpuCoolers.Add(Freezer_33_eSports_Edition__Red_);
            CPUCooler Freezer_33_eSports_Edition__White_ = new CPUCooler() { Id = 13, Name = "Freezer 33 eSports Edition (White)", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 50, SellPrice = 17, LevelUnlock = 6, LevelPercent = 40, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 100, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 150, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 3.25 }; cpuCoolers.Add(Freezer_33_eSports_Edition__White_);
            CPUCooler Freezer_33_eSports_Edition__Yellow_ = new CPUCooler() { Id = 14, Name = "Freezer 33 eSports Edition (Yellow)", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 50, SellPrice = 17, LevelUnlock = 6, LevelPercent = 20, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 100, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 150, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 3.25 }; cpuCoolers.Add(Freezer_33_eSports_Edition__Yellow_);
            CPUCooler Freezer_33_eSports_ONE__Green_ = new CPUCooler() { Id = 15, Name = "Freezer 33 eSports ONE (Green)", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 33, SellPrice = 11, LevelUnlock = 5, LevelPercent = 60, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 80, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 150, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 3 }; cpuCoolers.Add(Freezer_33_eSports_ONE__Green_);
            CPUCooler Freezer_33_eSports_ONE__Red_ = new CPUCooler() { Id = 16, Name = "Freezer 33 eSports ONE (Red)", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 33, SellPrice = 11, LevelUnlock = 5, LevelPercent = 1, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 80, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 150, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 3 }; cpuCoolers.Add(Freezer_33_eSports_ONE__Red_);
            CPUCooler Freezer_33_eSports_ONE__White_ = new CPUCooler() { Id = 17, Name = "Freezer 33 eSports ONE (White)", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 33, SellPrice = 11, LevelUnlock = 5, LevelPercent = 40, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 80, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 150, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 3 }; cpuCoolers.Add(Freezer_33_eSports_ONE__White_);
            CPUCooler Freezer_33_eSports_ONE__Yellow_ = new CPUCooler() { Id = 18, Name = "Freezer 33 eSports ONE (Yellow)", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 33, SellPrice = 11, LevelUnlock = 5, LevelPercent = 20, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 80, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 150, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 3 }; cpuCoolers.Add(Freezer_33_eSports_ONE__Yellow_);
            CPUCooler Freezer_33_PENTA = new CPUCooler() { Id = 19, Name = "Freezer 33 PENTA", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 30, SellPrice = 10, LevelUnlock = 13, LevelPercent = 50, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 53, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 150, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Freezer_33_PENTA);
            CPUCooler Freezer_33_Plus = new CPUCooler() { Id = 20, Name = "Freezer 33 Plus", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 35, SellPrice = 12, LevelUnlock = 13, LevelPercent = 30, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 53, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 150, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Freezer_33_Plus);
            CPUCooler Freezer_33_TR__Red_ = new CPUCooler() { Id = 21, Name = "Freezer 33 TR (Red)", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 58, SellPrice = 19, LevelUnlock = 18, LevelPercent = 1, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 80, CPUSockets = new List<CPUSocket>() { AM4, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 155, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 3 }; cpuCoolers.Add(Freezer_33_TR__Red_);
            CPUCooler Freezer_33_TR__White_ = new CPUCooler() { Id = 22, Name = "Freezer 33 TR (White)", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 58, SellPrice = 19, LevelUnlock = 18, LevelPercent = 1, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 80, CPUSockets = new List<CPUSocket>() { AM4, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 155, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 3 }; cpuCoolers.Add(Freezer_33_TR__White_);
            CPUCooler Freezer_34 = new CPUCooler() { Id = 23, Name = "Freezer 34", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 30, SellPrice = 10, LevelUnlock = 7, LevelPercent = 30, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 53, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 157, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 2 }; cpuCoolers.Add(Freezer_34);
            CPUCooler Freezer_34_CO = new CPUCooler() { Id = 24, Name = "Freezer 34 CO", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 30, SellPrice = 10, LevelUnlock = 7, LevelPercent = 30, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 53, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 157, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 2 }; cpuCoolers.Add(Freezer_34_CO);
            CPUCooler Freezer_34_eSports__Full_White_ = new CPUCooler() { Id = 25, Name = "Freezer 34 eSports (Full White)", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 35, SellPrice = 12, LevelUnlock = 7, LevelPercent = 40, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 100, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 157, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 2.1 }; cpuCoolers.Add(Freezer_34_eSports__Full_White_);
            CPUCooler Freezer_34_eSports__Green_ = new CPUCooler() { Id = 26, Name = "Freezer 34 eSports (Green)", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 35, SellPrice = 12, LevelUnlock = 7, LevelPercent = 40, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 100, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 157, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 2.1 }; cpuCoolers.Add(Freezer_34_eSports__Green_);
            CPUCooler Freezer_34_eSports__Grey_ = new CPUCooler() { Id = 27, Name = "Freezer 34 eSports (Grey)", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 35, SellPrice = 12, LevelUnlock = 7, LevelPercent = 40, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 100, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 157, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 2.1 }; cpuCoolers.Add(Freezer_34_eSports__Grey_);
            CPUCooler Freezer_34_eSports__Red_ = new CPUCooler() { Id = 28, Name = "Freezer 34 eSports (Red)", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 35, SellPrice = 12, LevelUnlock = 7, LevelPercent = 40, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 100, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 157, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 2.1 }; cpuCoolers.Add(Freezer_34_eSports__Red_);
            CPUCooler Freezer_34_eSports__White_ = new CPUCooler() { Id = 29, Name = "Freezer 34 eSports (White)", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 35, SellPrice = 12, LevelUnlock = 7, LevelPercent = 40, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 100, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 157, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 2.1 }; cpuCoolers.Add(Freezer_34_eSports__White_);
            CPUCooler Freezer_34_eSports__Yellow_ = new CPUCooler() { Id = 30, Name = "Freezer 34 eSports (Yellow)", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 35, SellPrice = 12, LevelUnlock = 7, LevelPercent = 40, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 100, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 157, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 2.1 }; cpuCoolers.Add(Freezer_34_eSports__Yellow_);
            CPUCooler Freezer_34_eSports_DUO__All_white_ = new CPUCooler() { Id = 31, Name = "Freezer 34 eSports DUO (All white)", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 50, SellPrice = 17, LevelUnlock = 30, LevelPercent = 1, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 80, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 157, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 2.1 }; cpuCoolers.Add(Freezer_34_eSports_DUO__All_white_);
            CPUCooler Freezer_34_eSports_DUO__Green_ = new CPUCooler() { Id = 32, Name = "Freezer 34 eSports DUO (Green)", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 50, SellPrice = 17, LevelUnlock = 30, LevelPercent = 1, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 80, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 157, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 2.1 }; cpuCoolers.Add(Freezer_34_eSports_DUO__Green_);
            CPUCooler Freezer_34_eSports_DUO__Grey_ = new CPUCooler() { Id = 33, Name = "Freezer 34 eSports DUO (Grey)", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 50, SellPrice = 17, LevelUnlock = 30, LevelPercent = 1, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 80, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 157, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 2.1 }; cpuCoolers.Add(Freezer_34_eSports_DUO__Grey_);
            CPUCooler Freezer_34_eSports_DUO__Red_ = new CPUCooler() { Id = 34, Name = "Freezer 34 eSports DUO (Red)", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 50, SellPrice = 17, LevelUnlock = 30, LevelPercent = 1, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 80, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 157, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 2.1 }; cpuCoolers.Add(Freezer_34_eSports_DUO__Red_);
            CPUCooler Freezer_34_eSports_DUO__White_ = new CPUCooler() { Id = 35, Name = "Freezer 34 eSports DUO (White)", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 50, SellPrice = 17, LevelUnlock = 30, LevelPercent = 1, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 80, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 157, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 2.1 }; cpuCoolers.Add(Freezer_34_eSports_DUO__White_);
            CPUCooler Freezer_34_eSports_DUO__Yellow_ = new CPUCooler() { Id = 36, Name = "Freezer 34 eSports DUO (Yellow)", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 50, SellPrice = 17, LevelUnlock = 30, LevelPercent = 1, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 80, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 157, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 2.1 }; cpuCoolers.Add(Freezer_34_eSports_DUO__Yellow_);
            CPUCooler Freezer_50 = new CPUCooler() { Id = 37, Name = "Freezer 50", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 85, SellPrice = 28, LevelUnlock = 28, LevelPercent = 60, Lighting = Color.RGB, WaterCooler = false, Passive = false, AirFlow = 100, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 165, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 3.25 }; cpuCoolers.Add(Freezer_50);
            CPUCooler Freezer_50_TR = new CPUCooler() { Id = 38, Name = "Freezer 50 TR", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 70, SellPrice = 23, LevelUnlock = 22, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = false, Passive = false, AirFlow = 100, CPUSockets = new List<CPUSocket>() { TR4, sTRX4 }, Height = 165, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 3 }; cpuCoolers.Add(Freezer_50_TR);
            CPUCooler Freezer_A13_X = new CPUCooler() { Id = 39, Name = "Freezer A13 X", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 40, SellPrice = 31, LevelUnlock = 1, LevelPercent = 60, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 40, CPUSockets = new List<CPUSocket>() { AM4 }, Height = 137, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Freezer_A13_X);
            CPUCooler Freezer_A13_X_CO = new CPUCooler() { Id = 40, Name = "Freezer A13 X CO", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 45, SellPrice = 31, LevelUnlock = 1, LevelPercent = 60, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 45, CPUSockets = new List<CPUSocket>() { AM4 }, Height = 137, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Freezer_A13_X_CO);
            CPUCooler Freezer_Xtreme = new CPUCooler() { Id = 41, Name = "Freezer Xtreme", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 170, SellPrice = 57, LevelUnlock = 30, LevelPercent = 1, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 100, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 140, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 2.1 }; cpuCoolers.Add(Freezer_Xtreme);
            CPUCooler Dark_Rock_4 = new CPUCooler() { Id = 42, Name = "Dark Rock 4", PartType = PartType.CPUCooler, Manufacturer = be_quiet_, Price = 75, SellPrice = 25, LevelUnlock = 28, LevelPercent = 60, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 105, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 160, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Dark_Rock_4);
            CPUCooler Dark_Rock_Pro_4 = new CPUCooler() { Id = 43, Name = "Dark Rock Pro 4", PartType = PartType.CPUCooler, Manufacturer = be_quiet_, Price = 90, SellPrice = 30, LevelUnlock = 28, LevelPercent = 60, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 110, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 163, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Dark_Rock_Pro_4);
            CPUCooler Dark_Rock_Pro_TR4 = new CPUCooler() { Id = 44, Name = "Dark Rock Pro TR4", PartType = PartType.CPUCooler, Manufacturer = be_quiet_, Price = 90, SellPrice = 30, LevelUnlock = 28, LevelPercent = 60, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 110, CPUSockets = new List<CPUSocket>() { TR4, sTRX4 }, Height = 163, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Dark_Rock_Pro_TR4);
            CPUCooler Dark_Rock_Slim = new CPUCooler() { Id = 45, Name = "Dark Rock Slim", PartType = PartType.CPUCooler, Manufacturer = be_quiet_, Price = 60, SellPrice = 20, LevelUnlock = 21, LevelPercent = 70, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 90, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 159, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Dark_Rock_Slim);
            CPUCooler Dark_Rock_TF = new CPUCooler() { Id = 46, Name = "Dark Rock TF", PartType = PartType.CPUCooler, Manufacturer = be_quiet_, Price = 85, SellPrice = 28, LevelUnlock = 28, LevelPercent = 60, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 105, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 131, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Dark_Rock_TF);
            CPUCooler Dark_Rock_TF_2 = new CPUCooler() { Id = 47, Name = "Dark Rock TF 2", PartType = PartType.CPUCooler, Manufacturer = be_quiet_, Price = 160, SellPrice = 53, LevelUnlock = 22, LevelPercent = 1, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 90, CPUSockets = new List<CPUSocket>() { AM3_, AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 134, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Dark_Rock_TF_2);
            CPUCooler Pure_Rock = new CPUCooler() { Id = 48, Name = "Pure Rock", PartType = PartType.CPUCooler, Manufacturer = be_quiet_, Price = 30, SellPrice = 10, LevelUnlock = 27, LevelPercent = 40, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 105, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 155, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Pure_Rock);
            CPUCooler Pure_Rock_2__Black_ = new CPUCooler() { Id = 49, Name = "Pure Rock 2 (Black)", PartType = PartType.CPUCooler, Manufacturer = be_quiet_, Price = 45, SellPrice = 15, LevelUnlock = 21, LevelPercent = 70, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 105, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 155, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Pure_Rock_2__Black_);
            CPUCooler Pure_Rock_2__Silver_ = new CPUCooler() { Id = 50, Name = "Pure Rock 2 (Silver)", PartType = PartType.CPUCooler, Manufacturer = be_quiet_, Price = 45, SellPrice = 15, LevelUnlock = 21, LevelPercent = 70, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 105, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 155, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Pure_Rock_2__Silver_);
            CPUCooler Pure_Rock_Slim = new CPUCooler() { Id = 51, Name = "Pure Rock Slim", PartType = PartType.CPUCooler, Manufacturer = be_quiet_, Price = 25, SellPrice = 8, LevelUnlock = 27, LevelPercent = 40, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 100, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 125, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Pure_Rock_Slim);
            CPUCooler Shadow_Rock_2 = new CPUCooler() { Id = 52, Name = "Shadow Rock 2", PartType = PartType.CPUCooler, Manufacturer = be_quiet_, Price = 50, SellPrice = 17, LevelUnlock = 23, LevelPercent = 30, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 105, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 160, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Shadow_Rock_2);
            CPUCooler Shadow_Rock_3 = new CPUCooler() { Id = 53, Name = "Shadow Rock 3", PartType = PartType.CPUCooler, Manufacturer = be_quiet_, Price = 45, SellPrice = 15, LevelUnlock = 21, LevelPercent = 70, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 110, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 163, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Shadow_Rock_3);
            CPUCooler Shadow_Rock_LP = new CPUCooler() { Id = 54, Name = "Shadow Rock LP", PartType = PartType.CPUCooler, Manufacturer = be_quiet_, Price = 45, SellPrice = 15, LevelUnlock = 23, LevelPercent = 30, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 45, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 76, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Shadow_Rock_LP);
            CPUCooler Shadow_Rock_Slim = new CPUCooler() { Id = 55, Name = "Shadow Rock Slim", PartType = PartType.CPUCooler, Manufacturer = be_quiet_, Price = 50, SellPrice = 17, LevelUnlock = 23, LevelPercent = 30, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 70, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 161, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Shadow_Rock_Slim);
            CPUCooler Shadow_Rock_TF_2 = new CPUCooler() { Id = 56, Name = "Shadow Rock TF 2", PartType = PartType.CPUCooler, Manufacturer = be_quiet_, Price = 45, SellPrice = 15, LevelUnlock = 23, LevelPercent = 30, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 50, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 112, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Shadow_Rock_TF_2);
            CPUCooler Hyper_212_Black = new CPUCooler() { Id = 57, Name = "Hyper 212 Black", PartType = PartType.CPUCooler, Manufacturer = Cooler_Master, Price = 45, SellPrice = 15, LevelUnlock = 33, LevelPercent = 1, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 42, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 158, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 2.9 }; cpuCoolers.Add(Hyper_212_Black);
            CPUCooler Hyper_212_Black_Dual_Fan_Edition = new CPUCooler() { Id = 58, Name = "Hyper 212 Black Dual Fan Edition", PartType = PartType.CPUCooler, Manufacturer = Cooler_Master, Price = 55, SellPrice = 18, LevelUnlock = 33, LevelPercent = 1, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 57, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 158, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 2.9 }; cpuCoolers.Add(Hyper_212_Black_Dual_Fan_Edition);
            CPUCooler Hyper_212_EVO_V2 = new CPUCooler() { Id = 59, Name = "Hyper 212 EVO V2", PartType = PartType.CPUCooler, Manufacturer = Cooler_Master, Price = 50, SellPrice = 17, LevelUnlock = 33, LevelPercent = 1, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 50, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 155, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 2.52 }; cpuCoolers.Add(Hyper_212_EVO_V2);
            CPUCooler Hyper_212_LED_Turbo = new CPUCooler() { Id = 60, Name = "Hyper 212 LED Turbo", PartType = PartType.CPUCooler, Manufacturer = Cooler_Master, Price = 45, SellPrice = 15, LevelUnlock = 8, LevelPercent = 33, Lighting = Color.Red, WaterCooler = false, Passive = false, AirFlow = 66.3, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 163, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 1.7 }; cpuCoolers.Add(Hyper_212_LED_Turbo);
            CPUCooler Hyper_212_LED_Turbo__White_Edition_ = new CPUCooler() { Id = 61, Name = "Hyper 212 LED Turbo (White Edition)", PartType = PartType.CPUCooler, Manufacturer = Cooler_Master, Price = 45, SellPrice = 15, LevelUnlock = 8, LevelPercent = 33, Lighting = Color.White, WaterCooler = false, Passive = false, AirFlow = 66.3, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 163, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 1.7 }; cpuCoolers.Add(Hyper_212_LED_Turbo__White_Edition_);
            CPUCooler Hyper_212_RGB_Black_Dual_Fan_Edition = new CPUCooler() { Id = 62, Name = "Hyper 212 RGB Black Dual Fan Edition", PartType = PartType.CPUCooler, Manufacturer = Cooler_Master, Price = 60, SellPrice = 20, LevelUnlock = 33, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = false, Passive = false, AirFlow = 57, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 159, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 2 }; cpuCoolers.Add(Hyper_212_RGB_Black_Dual_Fan_Edition);
            CPUCooler Hyper_212_RGB_Black_Edition = new CPUCooler() { Id = 63, Name = "Hyper 212 RGB Black Edition", PartType = PartType.CPUCooler, Manufacturer = Cooler_Master, Price = 50, SellPrice = 17, LevelUnlock = 33, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = false, Passive = false, AirFlow = 42, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 159, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 2 }; cpuCoolers.Add(Hyper_212_RGB_Black_Edition);
            CPUCooler MasterAir_MA610P = new CPUCooler() { Id = 64, Name = "MasterAir MA610P", PartType = PartType.CPUCooler, Manufacturer = Cooler_Master, Price = 70, SellPrice = 23, LevelUnlock = 8, LevelPercent = 66, Lighting = Color.RGB, WaterCooler = false, Passive = false, AirFlow = 53.38, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 166, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 1.65 }; cpuCoolers.Add(MasterAir_MA610P);
            CPUCooler MasterAir_Pro_4 = new CPUCooler() { Id = 65, Name = "MasterAir Pro 4", PartType = PartType.CPUCooler, Manufacturer = Cooler_Master, Price = 50, SellPrice = 17, LevelUnlock = 7, LevelPercent = 26, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 66.7, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 159, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 2.34 }; cpuCoolers.Add(MasterAir_Pro_4);
            CPUCooler A500_Dual_Fan = new CPUCooler() { Id = 66, Name = "A500 Dual Fan", PartType = PartType.CPUCooler, Manufacturer = CORSAIR, Price = 100, SellPrice = 33, LevelUnlock = 21, LevelPercent = 1, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 100, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 169, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 1.25 }; cpuCoolers.Add(A500_Dual_Fan);
            CPUCooler C1 = new CPUCooler() { Id = 67, Name = "C1", PartType = PartType.CPUCooler, Manufacturer = Cryorig, Price = 65, SellPrice = 22, LevelUnlock = 13, LevelPercent = 25, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 65, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3 }, Height = 74, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 1.49 }; cpuCoolers.Add(C1);
            CPUCooler C7 = new CPUCooler() { Id = 68, Name = "C7", PartType = PartType.CPUCooler, Manufacturer = Cryorig, Price = 30, SellPrice = 10, LevelUnlock = 4, LevelPercent = 50, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 40.5, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200 }, Height = 47, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 2.8 }; cpuCoolers.Add(C7);
            CPUCooler C7_RGB = new CPUCooler() { Id = 69, Name = "C7 RGB", PartType = PartType.CPUCooler, Manufacturer = Cryorig, Price = 70, SellPrice = 23, LevelUnlock = 4, LevelPercent = 50, Lighting = Color.RGB, WaterCooler = false, Passive = false, AirFlow = 40.5, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200 }, Height = 47, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 2.8 }; cpuCoolers.Add(C7_RGB);
            CPUCooler H5_Ultimate = new CPUCooler() { Id = 70, Name = "H5 Ultimate", PartType = PartType.CPUCooler, Manufacturer = Cryorig, Price = 45, SellPrice = 15, LevelUnlock = 7, LevelPercent = 80, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 76, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3 }, Height = 160, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 1.44 }; cpuCoolers.Add(H5_Ultimate);
            CPUCooler H5_Universal = new CPUCooler() { Id = 71, Name = "H5 Universal", PartType = PartType.CPUCooler, Manufacturer = Cryorig, Price = 45, SellPrice = 15, LevelUnlock = 7, LevelPercent = 10, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 65, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3 }, Height = 160, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 1.49 }; cpuCoolers.Add(H5_Universal);
            CPUCooler H7 = new CPUCooler() { Id = 72, Name = "H7", PartType = PartType.CPUCooler, Manufacturer = Cryorig, Price = 35, SellPrice = 12, LevelUnlock = 4, LevelPercent = 78, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 49, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200 }, Height = 145, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 1.65 }; cpuCoolers.Add(H7);
            CPUCooler H7_Quad_Lumi = new CPUCooler() { Id = 73, Name = "H7 Quad Lumi", PartType = PartType.CPUCooler, Manufacturer = Cryorig, Price = 60, SellPrice = 20, LevelUnlock = 4, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = false, Passive = false, AirFlow = 49, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3 }, Height = 145, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 1.65 }; cpuCoolers.Add(H7_Quad_Lumi);
            CPUCooler M9a = new CPUCooler() { Id = 74, Name = "M9a", PartType = PartType.CPUCooler, Manufacturer = Cryorig, Price = 20, SellPrice = 7, LevelUnlock = 1, LevelPercent = 1, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 48.4, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_ }, Height = 125, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 3.1 }; cpuCoolers.Add(M9a);
            CPUCooler M9i = new CPUCooler() { Id = 75, Name = "M9i", PartType = PartType.CPUCooler, Manufacturer = Cryorig, Price = 20, SellPrice = 7, LevelUnlock = 1, LevelPercent = 1, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 48.4, CPUSockets = new List<CPUSocket>() { LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200 }, Height = 125, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 3.1 }; cpuCoolers.Add(M9i);
            CPUCooler R1_Ultimate = new CPUCooler() { Id = 76, Name = "R1 Ultimate", PartType = PartType.CPUCooler, Manufacturer = Cryorig, Price = 90, SellPrice = 30, LevelUnlock = 11, LevelPercent = 50, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 76, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3 }, Height = 169, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 1.44 }; cpuCoolers.Add(R1_Ultimate);
            CPUCooler R1_Universal = new CPUCooler() { Id = 77, Name = "R1 Universal", PartType = PartType.CPUCooler, Manufacturer = Cryorig, Price = 90, SellPrice = 30, LevelUnlock = 11, LevelPercent = 1, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 65, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3 }, Height = 169, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 1.49 }; cpuCoolers.Add(R1_Universal);
            CPUCooler GAMMAXX_400__Blue_ = new CPUCooler() { Id = 78, Name = "GAMMAXX 400 (Blue)", PartType = PartType.CPUCooler, Manufacturer = Deepcool, Price = 25, SellPrice = 8, LevelUnlock = 22, LevelPercent = 40, Lighting = Color.Blue, WaterCooler = false, Passive = false, AirFlow = 53, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 155, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(GAMMAXX_400__Blue_);
            CPUCooler GAMMAXX_C40 = new CPUCooler() { Id = 79, Name = "GAMMAXX C40", PartType = PartType.CPUCooler, Manufacturer = Deepcool, Price = 30, SellPrice = 10, LevelUnlock = 22, LevelPercent = 20, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 80, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 137, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 2.31 }; cpuCoolers.Add(GAMMAXX_C40);
            CPUCooler GAMMAXX_GT = new CPUCooler() { Id = 80, Name = "GAMMAXX GT", PartType = PartType.CPUCooler, Manufacturer = Deepcool, Price = 45, SellPrice = 15, LevelUnlock = 22, LevelPercent = 60, Lighting = Color.RGB, WaterCooler = false, Passive = false, AirFlow = 60, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 156, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(GAMMAXX_GT);
            CPUCooler ACX_mITX = new CPUCooler() { Id = 81, Name = "ACX mITX", PartType = PartType.CPUCooler, Manufacturer = EVGA, Price = 40, SellPrice = 13, LevelUnlock = 10, LevelPercent = 1, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 30, CPUSockets = new List<CPUSocket>() { LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200 }, Height = 140, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 1 }; cpuCoolers.Add(ACX_mITX);
            CPUCooler ASSASSIN_III = new CPUCooler() { Id = 82, Name = "ASSASSIN III", PartType = PartType.CPUCooler, Manufacturer = GamerStorm, Price = 130, SellPrice = 43, LevelUnlock = 29, LevelPercent = 80, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 100, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 165, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(ASSASSIN_III);
            CPUCooler Fryzen = new CPUCooler() { Id = 83, Name = "Fryzen", PartType = PartType.CPUCooler, Manufacturer = GamerStorm, Price = 130, SellPrice = 43, LevelUnlock = 29, LevelPercent = 20, Lighting = Color.RGB, WaterCooler = false, Passive = false, AirFlow = 100, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, TR4, sTRX4 }, Height = 165, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Fryzen);
            CPUCooler ATC700 = new CPUCooler() { Id = 84, Name = "ATC700", PartType = PartType.CPUCooler, Manufacturer = GIGABYTE, Price = 80, SellPrice = 27, LevelUnlock = 11, LevelPercent = 80, Lighting = Color.RGB, WaterCooler = false, Passive = false, AirFlow = 100, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 169, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(ATC700);
            CPUCooler Thermal_100 = new CPUCooler() { Id = 85, Name = "Thermal 100", PartType = PartType.CPUCooler, Manufacturer = Mortoni, Price = 10, SellPrice = 3, LevelUnlock = 1, LevelPercent = 1, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 30, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 40, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 1 }; cpuCoolers.Add(Thermal_100);
            CPUCooler DELOS_RBW = new CPUCooler() { Id = 86, Name = "DELOS RBW", PartType = PartType.CPUCooler, Manufacturer = Raijintek, Price = 83, SellPrice = 28, LevelUnlock = 10, LevelPercent = 80, Lighting = Color.RGB, WaterCooler = false, Passive = false, AirFlow = 100, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 136, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(DELOS_RBW);
            CPUCooler ELEOS_RBW = new CPUCooler() { Id = 87, Name = "ELEOS RBW", PartType = PartType.CPUCooler, Manufacturer = Raijintek, Price = 20, SellPrice = 7, LevelUnlock = 30, LevelPercent = 70, Lighting = Color.RGB, WaterCooler = false, Passive = false, AirFlow = 52, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 140, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 1.9 }; cpuCoolers.Add(ELEOS_RBW);
            CPUCooler Ereboss = new CPUCooler() { Id = 88, Name = "Ereboss", PartType = PartType.CPUCooler, Manufacturer = Raijintek, Price = 55, SellPrice = 18, LevelUnlock = 12, LevelPercent = 65, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 56.55, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3 }, Height = 160, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 1.24 }; cpuCoolers.Add(Ereboss);
            CPUCooler JUNO_PRO_RBW = new CPUCooler() { Id = 89, Name = "JUNO PRO RBW", PartType = PartType.CPUCooler, Manufacturer = Raijintek, Price = 24, SellPrice = 8, LevelUnlock = 10, LevelPercent = 50, Lighting = Color.RGB, WaterCooler = false, Passive = false, AirFlow = 40, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200 }, Height = 66, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 1.16 }; cpuCoolers.Add(JUNO_PRO_RBW);
            CPUCooler LETO_PRO_RGB = new CPUCooler() { Id = 90, Name = "LETO PRO RGB", PartType = PartType.CPUCooler, Manufacturer = Raijintek, Price = 70, SellPrice = 23, LevelUnlock = 11, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = false, Passive = false, AirFlow = 100, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 155, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(LETO_PRO_RGB);
            CPUCooler MYA_RBW = new CPUCooler() { Id = 91, Name = "MYA RBW", PartType = PartType.CPUCooler, Manufacturer = Raijintek, Price = 90, SellPrice = 30, LevelUnlock = 10, LevelPercent = 70, Lighting = Color.RGB, WaterCooler = false, Passive = false, AirFlow = 70, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 163, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 0.67 }; cpuCoolers.Add(MYA_RBW);
            CPUCooler PALLAS_120 = new CPUCooler() { Id = 92, Name = "PALLAS 120", PartType = PartType.CPUCooler, Manufacturer = Raijintek, Price = 70, SellPrice = 23, LevelUnlock = 10, LevelPercent = 60, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 45, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 68, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 0.67 }; cpuCoolers.Add(PALLAS_120);
            CPUCooler Themis_Evo = new CPUCooler() { Id = 93, Name = "Themis Evo", PartType = PartType.CPUCooler, Manufacturer = Raijintek, Price = 35, SellPrice = 12, LevelUnlock = 2, LevelPercent = 30, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 65.58, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3 }, Height = 165, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 2.24 }; cpuCoolers.Add(Themis_Evo);
            CPUCooler Tisis = new CPUCooler() { Id = 94, Name = "Tisis", PartType = PartType.CPUCooler, Manufacturer = Raijintek, Price = 70, SellPrice = 23, LevelUnlock = 18, LevelPercent = 16, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 70.2, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3 }, Height = 167, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 0.9 }; cpuCoolers.Add(Tisis);
            CPUCooler AR07 = new CPUCooler() { Id = 95, Name = "AR07", PartType = PartType.CPUCooler, Manufacturer = SilverStone, Price = 95, SellPrice = 32, LevelUnlock = 14, LevelPercent = 50, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 93, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 163, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(AR07);
            CPUCooler AR08 = new CPUCooler() { Id = 96, Name = "AR08", PartType = PartType.CPUCooler, Manufacturer = SilverStone, Price = 40, SellPrice = 13, LevelUnlock = 4, LevelPercent = 1, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 49.5, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 134, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(AR08);
            CPUCooler HE01 = new CPUCooler() { Id = 97, Name = "HE01", PartType = PartType.CPUCooler, Manufacturer = SilverStone, Price = 80, SellPrice = 27, LevelUnlock = 16, LevelPercent = 53, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 171, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 161, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(HE01);
            CPUCooler HE02 = new CPUCooler() { Id = 98, Name = "HE02", PartType = PartType.CPUCooler, Manufacturer = SilverStone, Price = 75, SellPrice = 25, LevelUnlock = 16, LevelPercent = 31, Lighting = null, WaterCooler = false, Passive = true, AirFlow = 70, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 160, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(HE02);
            CPUCooler NT06_PRO = new CPUCooler() { Id = 99, Name = "NT06-PRO", PartType = PartType.CPUCooler, Manufacturer = SilverStone, Price = 60, SellPrice = 20, LevelUnlock = 12, LevelPercent = 70, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 73.969, CPUSockets = new List<CPUSocket>() { AM3_, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 102, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(NT06_PRO);
            CPUCooler Engine_27_1U_Low_Profile = new CPUCooler() { Id = 100, Name = "Engine 27 1U Low-Profile", PartType = PartType.CPUCooler, Manufacturer = Thermaltake, Price = 85, SellPrice = 28, LevelUnlock = 8, LevelPercent = 50, Lighting = null, WaterCooler = false, Passive = false, AirFlow = 40, CPUSockets = new List<CPUSocket>() { LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200 }, Height = 27, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = null }; cpuCoolers.Add(Engine_27_1U_Low_Profile);
            CPUCooler Riing_Silent_12_RGB_Sync_Edition = new CPUCooler() { Id = 101, Name = "Riing Silent 12 RGB Sync Edition", PartType = PartType.CPUCooler, Manufacturer = Thermaltake, Price = 50, SellPrice = 17, LevelUnlock = 19, LevelPercent = 30, Lighting = Color.RGB, WaterCooler = false, Passive = false, AirFlow = 53, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 159, RadiatorSize = null, RadiatorSlots = null, RadiatorThickness = null, AirPressure = 1.23 }; cpuCoolers.Add(Riing_Silent_12_RGB_Sync_Edition);
            CPUCooler XPG_LEVANTE_240 = new CPUCooler() { Id = 102, Name = "XPG LEVANTE 240", PartType = PartType.CPUCooler, Manufacturer = ADATA, Price = 150, SellPrice = 50, LevelUnlock = 27, LevelPercent = 50, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 105, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 36, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.265, AirPressure = null }; cpuCoolers.Add(XPG_LEVANTE_240);
            CPUCooler XPG_LEVANTE_360 = new CPUCooler() { Id = 103, Name = "XPG LEVANTE 360", PartType = PartType.CPUCooler, Manufacturer = ADATA, Price = 200, SellPrice = 67, LevelUnlock = 27, LevelPercent = 50, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 130, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 36, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.265, AirPressure = null }; cpuCoolers.Add(XPG_LEVANTE_360);
            CPUCooler Eisbaer_420_CPU = new CPUCooler() { Id = 104, Name = "Eisbaer 420 CPU", PartType = PartType.CPUCooler, Manufacturer = Alphacool, Price = 205, SellPrice = 68, LevelUnlock = 33, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 160, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 30, RadiatorSize = 420, RadiatorSlots = 3, RadiatorThickness = 0.265, AirPressure = 1.66 }; cpuCoolers.Add(Eisbaer_420_CPU);
            CPUCooler Eisbaer_Aurora_240_CPU = new CPUCooler() { Id = 105, Name = "Eisbaer Aurora 240 CPU", PartType = PartType.CPUCooler, Manufacturer = Alphacool, Price = 120, SellPrice = 40, LevelUnlock = 33, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 115, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 69, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.265, AirPressure = 2 }; cpuCoolers.Add(Eisbaer_Aurora_240_CPU);
            CPUCooler Eisbaer_Aurora_280_CPU = new CPUCooler() { Id = 106, Name = "Eisbaer Aurora 280 CPU", PartType = PartType.CPUCooler, Manufacturer = Alphacool, Price = 130, SellPrice = 43, LevelUnlock = 33, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 130, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 69, RadiatorSize = 280, RadiatorSlots = 2, RadiatorThickness = 0.265, AirPressure = 1.6 }; cpuCoolers.Add(Eisbaer_Aurora_280_CPU);
            CPUCooler Eisbaer_Aurora_360_CPU = new CPUCooler() { Id = 107, Name = "Eisbaer Aurora 360 CPU", PartType = PartType.CPUCooler, Manufacturer = Alphacool, Price = 140, SellPrice = 47, LevelUnlock = 33, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 150, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 69, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.265, AirPressure = 2 }; cpuCoolers.Add(Eisbaer_Aurora_360_CPU);
            CPUCooler Eisbaer_Aurora_420_CPU = new CPUCooler() { Id = 108, Name = "Eisbaer Aurora 420 CPU", PartType = PartType.CPUCooler, Manufacturer = Alphacool, Price = 160, SellPrice = 53, LevelUnlock = 33, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 160, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 69, RadiatorSize = 420, RadiatorSlots = 3, RadiatorThickness = 0.265, AirPressure = 1.6 }; cpuCoolers.Add(Eisbaer_Aurora_420_CPU);
            CPUCooler K120 = new CPUCooler() { Id = 109, Name = "K120", PartType = PartType.CPUCooler, Manufacturer = Antec, Price = 60, SellPrice = 20, LevelUnlock = 17, LevelPercent = 1, Lighting = Color.Blue, WaterCooler = true, Passive = false, AirFlow = 70, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 50, RadiatorSize = 120, RadiatorSlots = 1, RadiatorThickness = 0.248, AirPressure = null }; cpuCoolers.Add(K120);
            CPUCooler K240 = new CPUCooler() { Id = 110, Name = "K240", PartType = PartType.CPUCooler, Manufacturer = Antec, Price = 80, SellPrice = 27, LevelUnlock = 17, LevelPercent = 1, Lighting = Color.Blue, WaterCooler = true, Passive = false, AirFlow = 105, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 50, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.248, AirPressure = null }; cpuCoolers.Add(K240);
            CPUCooler Mercury120_RGB = new CPUCooler() { Id = 111, Name = "Mercury120 RGB", PartType = PartType.CPUCooler, Manufacturer = Antec, Price = 87, SellPrice = 29, LevelUnlock = 20, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 70, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 60, RadiatorSize = 120, RadiatorSlots = 1, RadiatorThickness = 0.249, AirPressure = null }; cpuCoolers.Add(Mercury120_RGB);
            CPUCooler Mercury240_RGB = new CPUCooler() { Id = 112, Name = "Mercury240 RGB", PartType = PartType.CPUCooler, Manufacturer = Antec, Price = 120, SellPrice = 40, LevelUnlock = 20, LevelPercent = 20, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 105, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 60, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.249, AirPressure = null }; cpuCoolers.Add(Mercury240_RGB);
            CPUCooler Mercury360_RGB = new CPUCooler() { Id = 113, Name = "Mercury360 RGB", PartType = PartType.CPUCooler, Manufacturer = Antec, Price = 147, SellPrice = 49, LevelUnlock = 20, LevelPercent = 40, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 145, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 60, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.252, AirPressure = null }; cpuCoolers.Add(Mercury360_RGB);
            CPUCooler Neptune_120 = new CPUCooler() { Id = 114, Name = "Neptune 120", PartType = PartType.CPUCooler, Manufacturer = Antec, Price = 85, SellPrice = 28, LevelUnlock = 20, LevelPercent = 60, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 70, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 47, RadiatorSize = 120, RadiatorSlots = 1, RadiatorThickness = 0.272, AirPressure = null }; cpuCoolers.Add(Neptune_120);
            CPUCooler Neptune_240 = new CPUCooler() { Id = 115, Name = "Neptune 240", PartType = PartType.CPUCooler, Manufacturer = Antec, Price = 140, SellPrice = 47, LevelUnlock = 20, LevelPercent = 60, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 105, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 47, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.272, AirPressure = null }; cpuCoolers.Add(Neptune_240);
            CPUCooler Liquid_Freezer_2_series_120mm = new CPUCooler() { Id = 116, Name = "Liquid Freezer 2 series 120mm", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 80, SellPrice = 27, LevelUnlock = 28, LevelPercent = 50, Lighting = null, WaterCooler = true, Passive = false, AirFlow = 70, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 98, RadiatorSize = 120, RadiatorSlots = 1, RadiatorThickness = 0.38, AirPressure = null }; cpuCoolers.Add(Liquid_Freezer_2_series_120mm);
            CPUCooler Liquid_Freezer_2_series_240mm = new CPUCooler() { Id = 117, Name = "Liquid Freezer 2 series 240mm", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 110, SellPrice = 37, LevelUnlock = 28, LevelPercent = 50, Lighting = null, WaterCooler = true, Passive = false, AirFlow = 105, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 98, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.38, AirPressure = null }; cpuCoolers.Add(Liquid_Freezer_2_series_240mm);
            CPUCooler Liquid_Freezer_2_series_280mm = new CPUCooler() { Id = 118, Name = "Liquid Freezer 2 series 280mm", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 120, SellPrice = 40, LevelUnlock = 28, LevelPercent = 50, Lighting = null, WaterCooler = true, Passive = false, AirFlow = 110, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 98, RadiatorSize = 280, RadiatorSlots = 2, RadiatorThickness = 0.38, AirPressure = null }; cpuCoolers.Add(Liquid_Freezer_2_series_280mm);
            CPUCooler Liquid_Freezer_2_series_360mm = new CPUCooler() { Id = 119, Name = "Liquid Freezer 2 series 360mm", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 160, SellPrice = 53, LevelUnlock = 28, LevelPercent = 50, Lighting = null, WaterCooler = true, Passive = false, AirFlow = 145, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 98, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.38, AirPressure = null }; cpuCoolers.Add(Liquid_Freezer_2_series_360mm);
            CPUCooler Liquid_Freezer_2_series_420mm = new CPUCooler() { Id = 120, Name = "Liquid Freezer 2 series 420mm", PartType = PartType.CPUCooler, Manufacturer = ARCTIC, Price = 180, SellPrice = 60, LevelUnlock = 28, LevelPercent = 50, Lighting = null, WaterCooler = true, Passive = false, AirFlow = 150, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 98, RadiatorSize = 420, RadiatorSlots = 3, RadiatorThickness = 0.38, AirPressure = null }; cpuCoolers.Add(Liquid_Freezer_2_series_420mm);
            CPUCooler Silent_Loop_120mm = new CPUCooler() { Id = 121, Name = "Silent Loop 120mm", PartType = PartType.CPUCooler, Manufacturer = be_quiet_, Price = 100, SellPrice = 33, LevelUnlock = 30, LevelPercent = 1, Lighting = null, WaterCooler = true, Passive = false, AirFlow = 90, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 45, RadiatorSize = 120, RadiatorSlots = 1, RadiatorThickness = 0.481, AirPressure = null }; cpuCoolers.Add(Silent_Loop_120mm);
            CPUCooler Silent_Loop_240mm = new CPUCooler() { Id = 122, Name = "Silent Loop 240mm", PartType = PartType.CPUCooler, Manufacturer = be_quiet_, Price = 125, SellPrice = 42, LevelUnlock = 30, LevelPercent = 15, Lighting = null, WaterCooler = true, Passive = false, AirFlow = 75, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 45, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.272, AirPressure = null }; cpuCoolers.Add(Silent_Loop_240mm);
            CPUCooler Silent_Loop_280mm = new CPUCooler() { Id = 123, Name = "Silent Loop 280mm", PartType = PartType.CPUCooler, Manufacturer = be_quiet_, Price = 150, SellPrice = 50, LevelUnlock = 30, LevelPercent = 30, Lighting = null, WaterCooler = true, Passive = false, AirFlow = 110, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 45, RadiatorSize = 280, RadiatorSlots = 2, RadiatorThickness = 0.272, AirPressure = null }; cpuCoolers.Add(Silent_Loop_280mm);
            CPUCooler Silent_Loop_360mm = new CPUCooler() { Id = 124, Name = "Silent Loop 360mm", PartType = PartType.CPUCooler, Manufacturer = be_quiet_, Price = 175, SellPrice = 58, LevelUnlock = 30, LevelPercent = 45, Lighting = null, WaterCooler = true, Passive = false, AirFlow = 130, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 45, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.272, AirPressure = null }; cpuCoolers.Add(Silent_Loop_360mm);
            CPUCooler MasterLiquid_120 = new CPUCooler() { Id = 125, Name = "MasterLiquid 120", PartType = PartType.CPUCooler, Manufacturer = Cooler_Master, Price = 70, SellPrice = 23, LevelUnlock = 8, LevelPercent = 1, Lighting = Color.White, WaterCooler = true, Passive = false, AirFlow = 67, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 49, RadiatorSize = 120, RadiatorSlots = 1, RadiatorThickness = 0.383, AirPressure = 2.34 }; cpuCoolers.Add(MasterLiquid_120);
            CPUCooler MasterLiquid_240 = new CPUCooler() { Id = 126, Name = "MasterLiquid 240", PartType = PartType.CPUCooler, Manufacturer = Cooler_Master, Price = 90, SellPrice = 30, LevelUnlock = 8, LevelPercent = 50, Lighting = Color.White, WaterCooler = true, Passive = false, AirFlow = 100, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 49, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.259, AirPressure = 2.34 }; cpuCoolers.Add(MasterLiquid_240);
            CPUCooler MasterLiquid_ML120L_V2_RGB = new CPUCooler() { Id = 127, Name = "MasterLiquid ML120L V2 RGB", PartType = PartType.CPUCooler, Manufacturer = Cooler_Master, Price = 65, SellPrice = 22, LevelUnlock = 18, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 67, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 47, RadiatorSize = 120, RadiatorSlots = 1, RadiatorThickness = 0.272, AirPressure = null }; cpuCoolers.Add(MasterLiquid_ML120L_V2_RGB);
            CPUCooler MasterLiquid_ML240_ILLUSION = new CPUCooler() { Id = 128, Name = "MasterLiquid ML240 ILLUSION", PartType = PartType.CPUCooler, Manufacturer = Cooler_Master, Price = 140, SellPrice = 47, LevelUnlock = 33, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 90, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 58, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.272, AirPressure = 1.6 }; cpuCoolers.Add(MasterLiquid_ML240_ILLUSION);
            CPUCooler MasterLiquid_ML240_ILLUSION__White_ = new CPUCooler() { Id = 129, Name = "MasterLiquid ML240 ILLUSION (White)", PartType = PartType.CPUCooler, Manufacturer = Cooler_Master, Price = 140, SellPrice = 47, LevelUnlock = 33, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 90, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 58, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.272, AirPressure = 1.6 }; cpuCoolers.Add(MasterLiquid_ML240_ILLUSION__White_);
            CPUCooler MasterLiquid_ML240_MIRROR = new CPUCooler() { Id = 130, Name = "MasterLiquid ML240 MIRROR", PartType = PartType.CPUCooler, Manufacturer = Cooler_Master, Price = 120, SellPrice = 40, LevelUnlock = 33, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 90, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 58, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.272, AirPressure = 2.5 }; cpuCoolers.Add(MasterLiquid_ML240_MIRROR);
            CPUCooler MasterLiquid_ML240L_V2_RGB = new CPUCooler() { Id = 131, Name = "MasterLiquid ML240L V2 RGB", PartType = PartType.CPUCooler, Manufacturer = Cooler_Master, Price = 80, SellPrice = 27, LevelUnlock = 18, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 100, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 47, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.272, AirPressure = null }; cpuCoolers.Add(MasterLiquid_ML240L_V2_RGB);
            CPUCooler MasterLiquid_ML240R_RGB_PHANTOM_GAMING_EDITION = new CPUCooler() { Id = 132, Name = "MasterLiquid ML240R RGB PHANTOM GAMING EDITION", PartType = PartType.CPUCooler, Manufacturer = Cooler_Master, Price = 160, SellPrice = 53, LevelUnlock = 33, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 90, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 52, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.272, AirPressure = 2.34 }; cpuCoolers.Add(MasterLiquid_ML240R_RGB_PHANTOM_GAMING_EDITION);
            CPUCooler MasterLiquid_ML360_ILLUSION = new CPUCooler() { Id = 133, Name = "MasterLiquid ML360 ILLUSION", PartType = PartType.CPUCooler, Manufacturer = Cooler_Master, Price = 160, SellPrice = 53, LevelUnlock = 33, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 120, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 58, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.272, AirPressure = 1.6 }; cpuCoolers.Add(MasterLiquid_ML360_ILLUSION);
            CPUCooler MasterLiquid_ML360_MIRROR_TR4_EDITION = new CPUCooler() { Id = 134, Name = "MasterLiquid ML360 MIRROR TR4 EDITION", PartType = PartType.CPUCooler, Manufacturer = Cooler_Master, Price = 180, SellPrice = 60, LevelUnlock = 33, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 120, CPUSockets = new List<CPUSocket>() { TR4, sTRX4 }, Height = 58, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.272, AirPressure = 2.5 }; cpuCoolers.Add(MasterLiquid_ML360_MIRROR_TR4_EDITION);
            CPUCooler H115i_PRO_RGB_280mm = new CPUCooler() { Id = 135, Name = "H115i PRO RGB 280mm", PartType = PartType.CPUCooler, Manufacturer = CORSAIR, Price = 160, SellPrice = 53, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 130, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 53, RadiatorSize = 280, RadiatorSlots = 2, RadiatorThickness = 0.233, AirPressure = null }; cpuCoolers.Add(H115i_PRO_RGB_280mm);
            CPUCooler H150i_PRO_RGB_360mm = new CPUCooler() { Id = 136, Name = "H150i PRO RGB 360mm", PartType = PartType.CPUCooler, Manufacturer = CORSAIR, Price = 200, SellPrice = 67, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 150, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 53, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.192, AirPressure = null }; cpuCoolers.Add(H150i_PRO_RGB_360mm);
            CPUCooler H80i_v2 = new CPUCooler() { Id = 137, Name = "H80i v2", PartType = PartType.CPUCooler, Manufacturer = CORSAIR, Price = 140, SellPrice = 47, LevelUnlock = 29, LevelPercent = 30, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 100, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 53, RadiatorSize = 120, RadiatorSlots = 1, RadiatorThickness = 0.454, AirPressure = null }; cpuCoolers.Add(H80i_v2);
            CPUCooler iCUE_H100i_RGB_PRO_XT = new CPUCooler() { Id = 138, Name = "iCUE H100i RGB PRO XT", PartType = PartType.CPUCooler, Manufacturer = CORSAIR, Price = 120, SellPrice = 40, LevelUnlock = 30, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 75, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, sTRX4 }, Height = 52, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.272, AirPressure = null }; cpuCoolers.Add(iCUE_H100i_RGB_PRO_XT);
            CPUCooler iCUE_H115i_RGB_PRO_XT = new CPUCooler() { Id = 139, Name = "iCUE H115i RGB PRO XT", PartType = PartType.CPUCooler, Manufacturer = CORSAIR, Price = 140, SellPrice = 47, LevelUnlock = 30, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 110, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, sTRX4 }, Height = 52, RadiatorSize = 280, RadiatorSlots = 2, RadiatorThickness = 0.272, AirPressure = null }; cpuCoolers.Add(iCUE_H115i_RGB_PRO_XT);
            CPUCooler iCUE_H150i_RGB_PRO_XT = new CPUCooler() { Id = 140, Name = "iCUE H150i RGB PRO XT", PartType = PartType.CPUCooler, Manufacturer = CORSAIR, Price = 160, SellPrice = 53, LevelUnlock = 30, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 130, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, sTRX4 }, Height = 52, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.272, AirPressure = null }; cpuCoolers.Add(iCUE_H150i_RGB_PRO_XT);
            CPUCooler A40 = new CPUCooler() { Id = 141, Name = "A40", PartType = PartType.CPUCooler, Manufacturer = Cryorig, Price = 90, SellPrice = 30, LevelUnlock = 26, LevelPercent = 1, Lighting = null, WaterCooler = true, Passive = false, AirFlow = 105, CPUSockets = new List<CPUSocket>() { AM3_, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, TR4, sTRX4 }, Height = 117, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.265, AirPressure = null }; cpuCoolers.Add(A40);
            CPUCooler A40_Ultimate = new CPUCooler() { Id = 142, Name = "A40 Ultimate", PartType = PartType.CPUCooler, Manufacturer = Cryorig, Price = 120, SellPrice = 40, LevelUnlock = 26, LevelPercent = 10, Lighting = null, WaterCooler = true, Passive = false, AirFlow = 115, CPUSockets = new List<CPUSocket>() { AM3_, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, TR4, sTRX4 }, Height = 117, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.33, AirPressure = null }; cpuCoolers.Add(A40_Ultimate);
            CPUCooler A80 = new CPUCooler() { Id = 143, Name = "A80", PartType = PartType.CPUCooler, Manufacturer = Cryorig, Price = 130, SellPrice = 43, LevelUnlock = 26, LevelPercent = 20, Lighting = null, WaterCooler = true, Passive = false, AirFlow = 130, CPUSockets = new List<CPUSocket>() { AM3_, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, TR4, sTRX4 }, Height = 117, RadiatorSize = 280, RadiatorSlots = 2, RadiatorThickness = 0.269, AirPressure = null }; cpuCoolers.Add(A80);
            CPUCooler CLC_120 = new CPUCooler() { Id = 144, Name = "CLC 120", PartType = PartType.CPUCooler, Manufacturer = EVGA, Price = 60, SellPrice = 20, LevelUnlock = 15, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 70, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 40, RadiatorSize = 120, RadiatorSlots = 1, RadiatorThickness = 0.279, AirPressure = null }; cpuCoolers.Add(CLC_120);
            CPUCooler CLC_240 = new CPUCooler() { Id = 145, Name = "CLC 240", PartType = PartType.CPUCooler, Manufacturer = EVGA, Price = 120, SellPrice = 40, LevelUnlock = 15, LevelPercent = 15, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 110, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 40, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.299, AirPressure = null }; cpuCoolers.Add(CLC_240);
            CPUCooler CLC_280 = new CPUCooler() { Id = 146, Name = "CLC 280", PartType = PartType.CPUCooler, Manufacturer = EVGA, Price = 140, SellPrice = 47, LevelUnlock = 15, LevelPercent = 35, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 130, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 40, RadiatorSize = 280, RadiatorSlots = 2, RadiatorThickness = 0.353, AirPressure = null }; cpuCoolers.Add(CLC_280);
            CPUCooler CLC_360 = new CPUCooler() { Id = 147, Name = "CLC 360", PartType = PartType.CPUCooler, Manufacturer = EVGA, Price = 160, SellPrice = 53, LevelUnlock = 15, LevelPercent = 35, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 140, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4 }, Height = 40, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.353, AirPressure = 4.04 }; cpuCoolers.Add(CLC_360);
            CPUCooler Celsius_S24 = new CPUCooler() { Id = 148, Name = "Celsius S24", PartType = PartType.CPUCooler, Manufacturer = Fractal_Design, Price = 145, SellPrice = 48, LevelUnlock = 27, LevelPercent = 1, Lighting = null, WaterCooler = true, Passive = false, AirFlow = 110, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 38, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.275, AirPressure = null }; cpuCoolers.Add(Celsius_S24);
            CPUCooler Celsius_S36 = new CPUCooler() { Id = 149, Name = "Celsius S36", PartType = PartType.CPUCooler, Manufacturer = Fractal_Design, Price = 190, SellPrice = 63, LevelUnlock = 27, LevelPercent = 1, Lighting = null, WaterCooler = true, Passive = false, AirFlow = 150, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 38, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.269, AirPressure = null }; cpuCoolers.Add(Celsius_S36);
            CPUCooler Celsius__S24_Dynamic = new CPUCooler() { Id = 150, Name = "Celsius+ S24 Dynamic", PartType = PartType.CPUCooler, Manufacturer = Fractal_Design, Price = 130, SellPrice = 43, LevelUnlock = 27, LevelPercent = 20, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 110, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 45, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.3, AirPressure = 2.3 }; cpuCoolers.Add(Celsius__S24_Dynamic);
            CPUCooler Celsius__S24_Prisma = new CPUCooler() { Id = 151, Name = "Celsius+ S24 Prisma", PartType = PartType.CPUCooler, Manufacturer = Fractal_Design, Price = 165, SellPrice = 55, LevelUnlock = 27, LevelPercent = 40, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 110, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 45, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.3, AirPressure = 2.78 }; cpuCoolers.Add(Celsius__S24_Prisma);
            CPUCooler Celsius__S28_Dynamic = new CPUCooler() { Id = 152, Name = "Celsius+ S28 Dynamic", PartType = PartType.CPUCooler, Manufacturer = Fractal_Design, Price = 160, SellPrice = 53, LevelUnlock = 27, LevelPercent = 20, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 120, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 45, RadiatorSize = 280, RadiatorSlots = 2, RadiatorThickness = 0.3, AirPressure = 1.95 }; cpuCoolers.Add(Celsius__S28_Dynamic);
            CPUCooler Celsius__S28_Prisma = new CPUCooler() { Id = 153, Name = "Celsius+ S28 Prisma", PartType = PartType.CPUCooler, Manufacturer = Fractal_Design, Price = 190, SellPrice = 63, LevelUnlock = 27, LevelPercent = 40, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 120, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 45, RadiatorSize = 280, RadiatorSlots = 2, RadiatorThickness = 0.3, AirPressure = 2.38 }; cpuCoolers.Add(Celsius__S28_Prisma);
            CPUCooler Celsius__S36_Dynamic = new CPUCooler() { Id = 154, Name = "Celsius+ S36 Dynamic", PartType = PartType.CPUCooler, Manufacturer = Fractal_Design, Price = 170, SellPrice = 57, LevelUnlock = 27, LevelPercent = 20, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 130, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 45, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.3, AirPressure = 2.3 }; cpuCoolers.Add(Celsius__S36_Dynamic);
            CPUCooler Celsius__S36_Prisma = new CPUCooler() { Id = 155, Name = "Celsius+ S36 Prisma", PartType = PartType.CPUCooler, Manufacturer = Fractal_Design, Price = 215, SellPrice = 72, LevelUnlock = 27, LevelPercent = 40, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 130, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 45, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.3, AirPressure = 2.78 }; cpuCoolers.Add(Celsius__S36_Prisma);
            CPUCooler ENKI_240_AIO = new CPUCooler() { Id = 156, Name = "ENKI 240 AIO", PartType = PartType.CPUCooler, Manufacturer = G_SKILL, Price = 160, SellPrice = 53, LevelUnlock = 34, LevelPercent = 50, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 105, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 39, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.269, AirPressure = 1.86 }; cpuCoolers.Add(ENKI_240_AIO);
            CPUCooler ENKI_280_AIO = new CPUCooler() { Id = 157, Name = "ENKI 280 AIO", PartType = PartType.CPUCooler, Manufacturer = G_SKILL, Price = 180, SellPrice = 60, LevelUnlock = 34, LevelPercent = 50, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 130, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 39, RadiatorSize = 280, RadiatorSlots = 2, RadiatorThickness = 0.269, AirPressure = 3.5 }; cpuCoolers.Add(ENKI_280_AIO);
            CPUCooler ENKI_360_AIO = new CPUCooler() { Id = 158, Name = "ENKI 360 AIO", PartType = PartType.CPUCooler, Manufacturer = G_SKILL, Price = 200, SellPrice = 67, LevelUnlock = 34, LevelPercent = 50, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 145, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 39, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.269, AirPressure = 1.86 }; cpuCoolers.Add(ENKI_360_AIO);
            CPUCooler Captain_120_EX_RGB = new CPUCooler() { Id = 159, Name = "Captain 120 EX RGB", PartType = PartType.CPUCooler, Manufacturer = GamerStorm, Price = 120, SellPrice = 40, LevelUnlock = 24, LevelPercent = 30, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 70, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 85, RadiatorSize = 120, RadiatorSlots = 1, RadiatorThickness = 0.263, AirPressure = null }; cpuCoolers.Add(Captain_120_EX_RGB);
            CPUCooler Captain_240_EX_WHITE_RGB = new CPUCooler() { Id = 160, Name = "Captain 240 EX WHITE RGB", PartType = PartType.CPUCooler, Manufacturer = GamerStorm, Price = 140, SellPrice = 47, LevelUnlock = 24, LevelPercent = 40, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 105, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 85, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.259, AirPressure = null }; cpuCoolers.Add(Captain_240_EX_WHITE_RGB);
            CPUCooler Captain_360_EX_WHITE_RGB = new CPUCooler() { Id = 161, Name = "Captain 360 EX WHITE RGB", PartType = PartType.CPUCooler, Manufacturer = GamerStorm, Price = 160, SellPrice = 53, LevelUnlock = 24, LevelPercent = 50, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 145, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 85, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.269, AirPressure = null }; cpuCoolers.Add(Captain_360_EX_WHITE_RGB);
            CPUCooler Castle_240_RGB = new CPUCooler() { Id = 162, Name = "Castle 240 RGB", PartType = PartType.CPUCooler, Manufacturer = GamerStorm, Price = 160, SellPrice = 53, LevelUnlock = 24, LevelPercent = 10, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 110, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 71, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.275, AirPressure = null }; cpuCoolers.Add(Castle_240_RGB);
            CPUCooler Castle_280_RGB = new CPUCooler() { Id = 163, Name = "Castle 280 RGB", PartType = PartType.CPUCooler, Manufacturer = GamerStorm, Price = 170, SellPrice = 57, LevelUnlock = 24, LevelPercent = 20, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 130, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 71, RadiatorSize = 280, RadiatorSlots = 2, RadiatorThickness = 0.265, AirPressure = null }; cpuCoolers.Add(Castle_280_RGB);
            CPUCooler BR36 = new CPUCooler() { Id = 164, Name = "BR36", PartType = PartType.CPUCooler, Manufacturer = InWin, Price = 190, SellPrice = 63, LevelUnlock = 30, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 140, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 65, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.27, AirPressure = 2.3 }; cpuCoolers.Add(BR36);
            CPUCooler SR24_PRO = new CPUCooler() { Id = 165, Name = "SR24 PRO", PartType = PartType.CPUCooler, Manufacturer = InWin, Price = 130, SellPrice = 43, LevelUnlock = 30, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 115, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 100, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.27, AirPressure = null }; cpuCoolers.Add(SR24_PRO);
            CPUCooler SR36_PRO = new CPUCooler() { Id = 166, Name = "SR36 PRO", PartType = PartType.CPUCooler, Manufacturer = InWin, Price = 160, SellPrice = 53, LevelUnlock = 30, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 150, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 100, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.27, AirPressure = null }; cpuCoolers.Add(SR36_PRO);
            CPUCooler MAG_Coreliquid_240R = new CPUCooler() { Id = 167, Name = "MAG Coreliquid 240R", PartType = PartType.CPUCooler, Manufacturer = MSI, Price = 110, SellPrice = 37, LevelUnlock = 24, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 110, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 48, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.269, AirPressure = null }; cpuCoolers.Add(MAG_Coreliquid_240R);
            CPUCooler MAG_Coreliquid_360R = new CPUCooler() { Id = 168, Name = "MAG Coreliquid 360R", PartType = PartType.CPUCooler, Manufacturer = MSI, Price = 140, SellPrice = 47, LevelUnlock = 24, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 150, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 48, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.269, AirPressure = null }; cpuCoolers.Add(MAG_Coreliquid_360R);
            CPUCooler Kraken_M22 = new CPUCooler() { Id = 169, Name = "Kraken M22", PartType = PartType.CPUCooler, Manufacturer = NZXT, Price = 100, SellPrice = 33, LevelUnlock = 9, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 75, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 48, RadiatorSize = 120, RadiatorSlots = 1, RadiatorThickness = 0.287, AirPressure = null }; cpuCoolers.Add(Kraken_M22);
            CPUCooler Kraken_X42 = new CPUCooler() { Id = 170, Name = "Kraken X42", PartType = PartType.CPUCooler, Manufacturer = NZXT, Price = 130, SellPrice = 43, LevelUnlock = 9, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 90, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 53, RadiatorSize = 140, RadiatorSlots = 1, RadiatorThickness = 0.273, AirPressure = 2.71 }; cpuCoolers.Add(Kraken_X42);
            CPUCooler Kraken_X52 = new CPUCooler() { Id = 171, Name = "Kraken X52", PartType = PartType.CPUCooler, Manufacturer = NZXT, Price = 150, SellPrice = 50, LevelUnlock = 9, LevelPercent = 25, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 110, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 53, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.273, AirPressure = 2.93 }; cpuCoolers.Add(Kraken_X52);
            CPUCooler Kraken_X53 = new CPUCooler() { Id = 172, Name = "Kraken X53", PartType = PartType.CPUCooler, Manufacturer = NZXT, Price = 150, SellPrice = 50, LevelUnlock = 12, LevelPercent = 70, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 110, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 52, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.294, AirPressure = null }; cpuCoolers.Add(Kraken_X53);
            CPUCooler Kraken_X62 = new CPUCooler() { Id = 173, Name = "Kraken X62", PartType = PartType.CPUCooler, Manufacturer = NZXT, Price = 160, SellPrice = 53, LevelUnlock = 10, LevelPercent = 30, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 130, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 53, RadiatorSize = 280, RadiatorSlots = 2, RadiatorThickness = 0.268, AirPressure = 2.71 }; cpuCoolers.Add(Kraken_X62);
            CPUCooler Kraken_X63 = new CPUCooler() { Id = 174, Name = "Kraken X63", PartType = PartType.CPUCooler, Manufacturer = NZXT, Price = 170, SellPrice = 57, LevelUnlock = 12, LevelPercent = 70, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 130, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 52, RadiatorSize = 280, RadiatorSlots = 2, RadiatorThickness = 0.296, AirPressure = null }; cpuCoolers.Add(Kraken_X63);
            CPUCooler Kraken_X72 = new CPUCooler() { Id = 175, Name = "Kraken X72", PartType = PartType.CPUCooler, Manufacturer = NZXT, Price = 200, SellPrice = 67, LevelUnlock = 10, LevelPercent = 50, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 150, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 53, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.263, AirPressure = null }; cpuCoolers.Add(Kraken_X72);
            CPUCooler Kraken_X73 = new CPUCooler() { Id = 176, Name = "Kraken X73", PartType = PartType.CPUCooler, Manufacturer = NZXT, Price = 210, SellPrice = 70, LevelUnlock = 12, LevelPercent = 70, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 150, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 52, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.294, AirPressure = null }; cpuCoolers.Add(Kraken_X73);
            CPUCooler Kraken_Z63 = new CPUCooler() { Id = 177, Name = "Kraken Z63", PartType = PartType.CPUCooler, Manufacturer = NZXT, Price = 250, SellPrice = 83, LevelUnlock = 12, LevelPercent = 40, Lighting = Color.PurpleBlue, WaterCooler = true, Passive = false, AirFlow = 130, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 52, RadiatorSize = 280, RadiatorSlots = 2, RadiatorThickness = 0.29, AirPressure = null }; cpuCoolers.Add(Kraken_Z63);
            CPUCooler Kraken_Z73 = new CPUCooler() { Id = 178, Name = "Kraken Z73", PartType = PartType.CPUCooler, Manufacturer = NZXT, Price = 310, SellPrice = 103, LevelUnlock = 12, LevelPercent = 40, Lighting = Color.PurpleBlue, WaterCooler = true, Passive = false, AirFlow = 150, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066, TR4, sTRX4 }, Height = 52, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.255, AirPressure = null }; cpuCoolers.Add(Kraken_Z73);
            CPUCooler EOS_240 = new CPUCooler() { Id = 179, Name = "EOS 240", PartType = PartType.CPUCooler, Manufacturer = Raijintek, Price = 100, SellPrice = 33, LevelUnlock = 27, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 95, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 120, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.296, AirPressure = null }; cpuCoolers.Add(EOS_240);
            CPUCooler EOS_240_RBW = new CPUCooler() { Id = 180, Name = "EOS 240 RBW", PartType = PartType.CPUCooler, Manufacturer = Raijintek, Price = 110, SellPrice = 37, LevelUnlock = 27, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 95, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 120, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.296, AirPressure = null }; cpuCoolers.Add(EOS_240_RBW);
            CPUCooler EOS_360 = new CPUCooler() { Id = 181, Name = "EOS 360", PartType = PartType.CPUCooler, Manufacturer = Raijintek, Price = 140, SellPrice = 47, LevelUnlock = 27, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 130, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 120, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.296, AirPressure = null }; cpuCoolers.Add(EOS_360);
            CPUCooler EOS_360_RBW = new CPUCooler() { Id = 182, Name = "EOS 360 RBW", PartType = PartType.CPUCooler, Manufacturer = Raijintek, Price = 150, SellPrice = 50, LevelUnlock = 27, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 130, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 120, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.296, AirPressure = null }; cpuCoolers.Add(EOS_360_RBW);
            CPUCooler ORCUS_120_RBW = new CPUCooler() { Id = 183, Name = "ORCUS 120 RBW", PartType = PartType.CPUCooler, Manufacturer = Raijintek, Price = 140, SellPrice = 47, LevelUnlock = 29, LevelPercent = 60, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 90, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 120, RadiatorSize = 120, RadiatorSlots = 1, RadiatorThickness = 0.467, AirPressure = null }; cpuCoolers.Add(ORCUS_120_RBW);
            CPUCooler ORCUS_140_RBW = new CPUCooler() { Id = 184, Name = "ORCUS 140 RBW", PartType = PartType.CPUCooler, Manufacturer = Raijintek, Price = 150, SellPrice = 50, LevelUnlock = 29, LevelPercent = 60, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 75, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 138, RadiatorSize = 140, RadiatorSlots = 1, RadiatorThickness = 0.481, AirPressure = null }; cpuCoolers.Add(ORCUS_140_RBW);
            CPUCooler ORCUS_240 = new CPUCooler() { Id = 185, Name = "ORCUS 240", PartType = PartType.CPUCooler, Manufacturer = Raijintek, Price = 104, SellPrice = 35, LevelUnlock = 24, LevelPercent = 50, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 110, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 33, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.468, AirPressure = null }; cpuCoolers.Add(ORCUS_240);
            CPUCooler ORCUS_280_RBW = new CPUCooler() { Id = 186, Name = "ORCUS 280 RBW", PartType = PartType.CPUCooler, Manufacturer = Raijintek, Price = 170, SellPrice = 57, LevelUnlock = 29, LevelPercent = 60, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 110, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 138, RadiatorSize = 280, RadiatorSlots = 2, RadiatorThickness = 0.487, AirPressure = null }; cpuCoolers.Add(ORCUS_280_RBW);
            CPUCooler ORCUS_360_RBW = new CPUCooler() { Id = 187, Name = "ORCUS 360 RBW", PartType = PartType.CPUCooler, Manufacturer = Raijintek, Price = 200, SellPrice = 67, LevelUnlock = 29, LevelPercent = 60, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 130, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 120, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.466, AirPressure = null }; cpuCoolers.Add(ORCUS_360_RBW);
            CPUCooler PF120_ARGB = new CPUCooler() { Id = 188, Name = "PF120-ARGB", PartType = PartType.CPUCooler, Manufacturer = SilverStone, Price = 120, SellPrice = 40, LevelUnlock = 25, LevelPercent = 30, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 70, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 40, RadiatorSize = 120, RadiatorSlots = 1, RadiatorThickness = 0.269, AirPressure = null }; cpuCoolers.Add(PF120_ARGB);
            CPUCooler PF240_ARGB = new CPUCooler() { Id = 189, Name = "PF240-ARGB", PartType = PartType.CPUCooler, Manufacturer = SilverStone, Price = 150, SellPrice = 50, LevelUnlock = 25, LevelPercent = 30, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 105, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 40, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.269, AirPressure = null }; cpuCoolers.Add(PF240_ARGB);
            CPUCooler PF240W_ARGB = new CPUCooler() { Id = 190, Name = "PF240W-ARGB", PartType = PartType.CPUCooler, Manufacturer = SilverStone, Price = 100, SellPrice = 33, LevelUnlock = 25, LevelPercent = 30, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 105, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 40, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.269, AirPressure = null }; cpuCoolers.Add(PF240W_ARGB);
            CPUCooler PF360_ARGB = new CPUCooler() { Id = 191, Name = "PF360-ARGB", PartType = PartType.CPUCooler, Manufacturer = SilverStone, Price = 180, SellPrice = 60, LevelUnlock = 25, LevelPercent = 30, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 145, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 40, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.269, AirPressure = null }; cpuCoolers.Add(PF360_ARGB);
            CPUCooler PF360W_ARGB = new CPUCooler() { Id = 192, Name = "PF360W-ARGB", PartType = PartType.CPUCooler, Manufacturer = SilverStone, Price = 130, SellPrice = 43, LevelUnlock = 25, LevelPercent = 30, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 145, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 40, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.269, AirPressure = null }; cpuCoolers.Add(PF360W_ARGB);
            CPUCooler TD02_LITE = new CPUCooler() { Id = 193, Name = "TD02-LITE", PartType = PartType.CPUCooler, Manufacturer = SilverStone, Price = 85, SellPrice = 28, LevelUnlock = 25, LevelPercent = 10, Lighting = null, WaterCooler = true, Passive = false, AirFlow = 110, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 38, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.289, AirPressure = null }; cpuCoolers.Add(TD02_LITE);
            CPUCooler TD02_SLIM = new CPUCooler() { Id = 194, Name = "TD02-SLIM", PartType = PartType.CPUCooler, Manufacturer = SilverStone, Price = 75, SellPrice = 25, LevelUnlock = 25, LevelPercent = 1, Lighting = null, WaterCooler = true, Passive = false, AirFlow = 105, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 40, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.191, AirPressure = null }; cpuCoolers.Add(TD02_SLIM);
            CPUCooler TD03_LITE = new CPUCooler() { Id = 195, Name = "TD03-LITE", PartType = PartType.CPUCooler, Manufacturer = SilverStone, Price = 70, SellPrice = 23, LevelUnlock = 25, LevelPercent = 30, Lighting = null, WaterCooler = true, Passive = false, AirFlow = 70, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 38, RadiatorSize = 120, RadiatorSlots = 1, RadiatorThickness = 0.288, AirPressure = null }; cpuCoolers.Add(TD03_LITE);
            CPUCooler TD03_SLIM = new CPUCooler() { Id = 196, Name = "TD03-SLIM", PartType = PartType.CPUCooler, Manufacturer = SilverStone, Price = 70, SellPrice = 23, LevelUnlock = 25, LevelPercent = 20, Lighting = null, WaterCooler = true, Passive = false, AirFlow = 67, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 40, RadiatorSize = 120, RadiatorSlots = 1, RadiatorThickness = 0.191, AirPressure = null }; cpuCoolers.Add(TD03_SLIM);
            CPUCooler TH240_ARGB_Sync = new CPUCooler() { Id = 197, Name = "TH240 ARGB Sync", PartType = PartType.CPUCooler, Manufacturer = Thermaltake, Price = 100, SellPrice = 33, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 105, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 40, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.269, AirPressure = 1.31 }; cpuCoolers.Add(TH240_ARGB_Sync);
            CPUCooler TH240_ARGB_Sync_Snow_Edition = new CPUCooler() { Id = 198, Name = "TH240 ARGB Sync Snow Edition", PartType = PartType.CPUCooler, Manufacturer = Thermaltake, Price = 100, SellPrice = 33, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 105, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 40, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.269, AirPressure = 1.31 }; cpuCoolers.Add(TH240_ARGB_Sync_Snow_Edition);
            CPUCooler TH360_ARGB_Sync_Snow_Edition = new CPUCooler() { Id = 199, Name = "TH360 ARGB Sync Snow Edition", PartType = PartType.CPUCooler, Manufacturer = Thermaltake, Price = 130, SellPrice = 43, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, WaterCooler = true, Passive = false, AirFlow = 145, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 }, Height = 40, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.269, AirPressure = 1.31 }; cpuCoolers.Add(TH360_ARGB_Sync_Snow_Edition);
            #endregion
            _context.CPUCooler.AddRange(cpuCoolers);
            #region GPU
            List<GPU> gpus = new List<GPU>();
            GPU GPU_GeForce_GTX_750_Ti_GAMER = new GPU() { Id = 1, Name = "GeForce GTX 750 Ti GAMER", PartType = PartType.GPU, Manufacturer = Shean, Price = 90, SellPrice = 30, LevelUnlock = 1, LevelPercent = 1, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_750_Ti, IsWaterCooled = false, RankingScore = 756, VRAM = 2, MinCoreFrequency = 770, BaseCoreFrequency = 1085, OverclockedCoreFrequency = 1290, MaxCoreFrequency = 1400, MinMemFrequency = 1000, BaseMemFrequency = 1350, OverclockedMemFrequency = 1525, MaxMemFrequency = 1700, Length = 147, Wattage = 60, MultiGPU = null, SlotSize = 1.5, PowerConnectors = null, ScoreToValueRatio = 12.9, SingleGPUScore = 1163, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 1340, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_750_Ti_GAMER);
            GPU GPU_GeForce_GTX_950_GAMING_2G = new GPU() { Id = 2, Name = "GeForce GTX 950 GAMING 2G", PartType = PartType.GPU, Manufacturer = MSI, Price = 140, SellPrice = 47, LevelUnlock = 1, LevelPercent = 1, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_950, IsWaterCooled = false, RankingScore = 1217, VRAM = 2, MinCoreFrequency = 1132, BaseCoreFrequency = 1316, OverclockedCoreFrequency = 1400, MaxCoreFrequency = 1500, MinMemFrequency = 1326, BaseMemFrequency = 1663, OverclockedMemFrequency = 1850, MaxMemFrequency = 2000, Length = 270, Wattage = 90, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 13.2, SingleGPUScore = 1846, DualGPUScore = 3717, DualGPUPerformanceIncrease = 2.01354279523294, OverclockedSingleGPUScore = 1998, OverclockedDualGPUScore = 4206 }; gpus.Add(GPU_GeForce_GTX_950_GAMING_2G);
            GPU GPU_GeForce_GTX_960_GAMING_100ME = new GPU() { Id = 3, Name = "GeForce GTX 960 GAMING 100ME", PartType = PartType.GPU, Manufacturer = MSI, Price = 180, SellPrice = 60, LevelUnlock = 1, LevelPercent = 1, Lighting = Color.Green, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_960, IsWaterCooled = false, RankingScore = 1451, VRAM = 2, MinCoreFrequency = 908, BaseCoreFrequency = 1304, OverclockedCoreFrequency = 1525, MaxCoreFrequency = 1700, MinMemFrequency = 1306, BaseMemFrequency = 1753, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 267, Wattage = 120, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 12.4, SingleGPUScore = 2225, DualGPUScore = 4386, DualGPUPerformanceIncrease = 1.97123595505618, OverclockedSingleGPUScore = 2598, OverclockedDualGPUScore = 5144 }; gpus.Add(GPU_GeForce_GTX_960_GAMING_100ME);
            GPU GPU_GeForce_GTX_960_GAMING_2G = new GPU() { Id = 4, Name = "GeForce GTX 960 GAMING 2G", PartType = PartType.GPU, Manufacturer = MSI, Price = 180, SellPrice = 60, LevelUnlock = 1, LevelPercent = 1, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_960, IsWaterCooled = false, RankingScore = 1451, VRAM = 2, MinCoreFrequency = 908, BaseCoreFrequency = 1304, OverclockedCoreFrequency = 1525, MaxCoreFrequency = 1700, MinMemFrequency = 1306, BaseMemFrequency = 1753, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 267, Wattage = 120, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 12.4, SingleGPUScore = 2225, DualGPUScore = 4386, DualGPUPerformanceIncrease = 1.97123595505618, OverclockedSingleGPUScore = 2598, OverclockedDualGPUScore = 5144 }; gpus.Add(GPU_GeForce_GTX_960_GAMING_2G);
            GPU GPU_GeForce_GTX_960_GAMING_2G_LE = new GPU() { Id = 5, Name = "GeForce GTX 960 GAMING 2G LE", PartType = PartType.GPU, Manufacturer = MSI, Price = 170, SellPrice = 57, LevelUnlock = 1, LevelPercent = 1, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_960, IsWaterCooled = false, RankingScore = 1388, VRAM = 2, MinCoreFrequency = 732, BaseCoreFrequency = 1216, OverclockedCoreFrequency = 1525, MaxCoreFrequency = 1700, MinMemFrequency = 1306, BaseMemFrequency = 1753, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 267, Wattage = 120, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 12.5, SingleGPUScore = 2123, DualGPUScore = 4197, DualGPUPerformanceIncrease = 1.97691945360339, OverclockedSingleGPUScore = 2598, OverclockedDualGPUScore = 5144 }; gpus.Add(GPU_GeForce_GTX_960_GAMING_2G_LE);
            GPU GPU_GeForce_GTX_960_GAMING_4G = new GPU() { Id = 6, Name = "GeForce GTX 960 GAMING 4G", PartType = PartType.GPU, Manufacturer = MSI, Price = 180, SellPrice = 60, LevelUnlock = 1, LevelPercent = 1, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_960, IsWaterCooled = false, RankingScore = 1451, VRAM = 4, MinCoreFrequency = 908, BaseCoreFrequency = 1304, OverclockedCoreFrequency = 1525, MaxCoreFrequency = 1700, MinMemFrequency = 1306, BaseMemFrequency = 1753, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 267, Wattage = 120, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 12.4, SingleGPUScore = 2225, DualGPUScore = 4386, DualGPUPerformanceIncrease = 1.97123595505618, OverclockedSingleGPUScore = 2598, OverclockedDualGPUScore = 5144 }; gpus.Add(GPU_GeForce_GTX_960_GAMING_4G);
            GPU GPU_GeForce_GTX_960_GAMING_4G_LE = new GPU() { Id = 7, Name = "GeForce GTX 960 GAMING 4G LE", PartType = PartType.GPU, Manufacturer = MSI, Price = 170, SellPrice = 57, LevelUnlock = 1, LevelPercent = 1, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_960, IsWaterCooled = false, RankingScore = 1388, VRAM = 4, MinCoreFrequency = 732, BaseCoreFrequency = 1216, OverclockedCoreFrequency = 1525, MaxCoreFrequency = 1700, MinMemFrequency = 1306, BaseMemFrequency = 1753, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 267, Wattage = 120, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 12.5, SingleGPUScore = 2123, DualGPUScore = 4197, DualGPUPerformanceIncrease = 1.97691945360339, OverclockedSingleGPUScore = 2598, OverclockedDualGPUScore = 5144 }; gpus.Add(GPU_GeForce_GTX_960_GAMING_4G_LE);
            GPU GPU_GeForce_GTX_960_GAMING_LE_100ME = new GPU() { Id = 8, Name = "GeForce GTX 960 GAMING LE 100ME", PartType = PartType.GPU, Manufacturer = MSI, Price = 170, SellPrice = 57, LevelUnlock = 1, LevelPercent = 1, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_960, IsWaterCooled = false, RankingScore = 1388, VRAM = 2, MinCoreFrequency = 732, BaseCoreFrequency = 1216, OverclockedCoreFrequency = 1525, MaxCoreFrequency = 1700, MinMemFrequency = 1306, BaseMemFrequency = 1753, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 267, Wattage = 120, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 12.5, SingleGPUScore = 2123, DualGPUScore = 4197, DualGPUPerformanceIncrease = 1.97691945360339, OverclockedSingleGPUScore = 2598, OverclockedDualGPUScore = 5144 }; gpus.Add(GPU_GeForce_GTX_960_GAMING_LE_100ME);
            GPU GPU_GeForce_GTX_970_GAMING_100ME = new GPU() { Id = 9, Name = "GeForce GTX 970 GAMING 100ME", PartType = PartType.GPU, Manufacturer = MSI, Price = 280, SellPrice = 93, LevelUnlock = 3, LevelPercent = 70, Lighting = Color.Green, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_970, IsWaterCooled = false, RankingScore = 2215, VRAM = 4, MinCoreFrequency = 806, BaseCoreFrequency = 1253, OverclockedCoreFrequency = 1525, MaxCoreFrequency = 1700, MinMemFrequency = 1306, BaseMemFrequency = 1753, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 277, Wattage = 148, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 12.1, SingleGPUScore = 3377, DualGPUScore = 6546, DualGPUPerformanceIncrease = 1.93840687000296, OverclockedSingleGPUScore = 4123, OverclockedDualGPUScore = 7957 }; gpus.Add(GPU_GeForce_GTX_970_GAMING_100ME);
            GPU GPU_GeForce_GTX_970_GAMING_4G = new GPU() { Id = 10, Name = "GeForce GTX 970 GAMING 4G", PartType = PartType.GPU, Manufacturer = MSI, Price = 265, SellPrice = 88, LevelUnlock = 3, LevelPercent = 35, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_970, IsWaterCooled = false, RankingScore = 2100, VRAM = 4, MinCoreFrequency = 656, BaseCoreFrequency = 1178, OverclockedCoreFrequency = 1525, MaxCoreFrequency = 1700, MinMemFrequency = 1306, BaseMemFrequency = 1753, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 277, Wattage = 148, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 12, SingleGPUScore = 3193, DualGPUScore = 6157, DualGPUPerformanceIncrease = 1.92828061384278, OverclockedSingleGPUScore = 4123, OverclockedDualGPUScore = 7957 }; gpus.Add(GPU_GeForce_GTX_970_GAMING_4G);
            GPU GPU_GeForce_GTX_970_GAMING_4G_Golden_Edition = new GPU() { Id = 11, Name = "GeForce GTX 970 GAMING 4G Golden Edition", PartType = PartType.GPU, Manufacturer = MSI, Price = 285, SellPrice = 95, LevelUnlock = 3, LevelPercent = 85, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_970, IsWaterCooled = false, RankingScore = 2255, VRAM = 4, MinCoreFrequency = 858, BaseCoreFrequency = 1279, OverclockedCoreFrequency = 1525, MaxCoreFrequency = 1700, MinMemFrequency = 1306, BaseMemFrequency = 1753, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 277, Wattage = 148, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 12.1, SingleGPUScore = 3441, DualGPUScore = 6681, DualGPUPerformanceIncrease = 1.94158674803836, OverclockedSingleGPUScore = 4123, OverclockedDualGPUScore = 7957 }; gpus.Add(GPU_GeForce_GTX_970_GAMING_4G_Golden_Edition);
            GPU GPU_GeForce_GTX_970_GAMING_LE_100ME = new GPU() { Id = 12, Name = "GeForce GTX 970 GAMING LE 100ME", PartType = PartType.GPU, Manufacturer = MSI, Price = 275, SellPrice = 92, LevelUnlock = 3, LevelPercent = 1, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_970, IsWaterCooled = false, RankingScore = 2158, VRAM = 4, MinCoreFrequency = 732, BaseCoreFrequency = 1216, OverclockedCoreFrequency = 1525, MaxCoreFrequency = 1700, MinMemFrequency = 1306, BaseMemFrequency = 1753, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 277, Wattage = 148, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 11.9, SingleGPUScore = 3286, DualGPUScore = 6354, DualGPUPerformanceIncrease = 1.93365794278758, OverclockedSingleGPUScore = 4123, OverclockedDualGPUScore = 7957 }; gpus.Add(GPU_GeForce_GTX_970_GAMING_LE_100ME);
            GPU GPU_GeForce_GTX_970_GAMER = new GPU() { Id = 13, Name = "GeForce GTX 970 GAMER", PartType = PartType.GPU, Manufacturer = Shean, Price = 265, SellPrice = 88, LevelUnlock = 1, LevelPercent = 1, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_970, IsWaterCooled = false, RankingScore = 2100, VRAM = 4, MinCoreFrequency = 656, BaseCoreFrequency = 1178, OverclockedCoreFrequency = 1525, MaxCoreFrequency = 1700, MinMemFrequency = 1306, BaseMemFrequency = 1753, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 147, Wattage = 148, MultiGPU = SLI, SlotSize = 1.5, PowerConnectors = null, ScoreToValueRatio = 12, SingleGPUScore = 3193, DualGPUScore = 6157, DualGPUPerformanceIncrease = 1.92828061384278, OverclockedSingleGPUScore = 4123, OverclockedDualGPUScore = 7957 }; gpus.Add(GPU_GeForce_GTX_970_GAMER);
            GPU GPU_GeForce_GTX_970_GAMER_XL = new GPU() { Id = 14, Name = "GeForce GTX 970 GAMER XL", PartType = PartType.GPU, Manufacturer = Shean, Price = 280, SellPrice = 93, LevelUnlock = 1, LevelPercent = 1, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_970, IsWaterCooled = false, RankingScore = 2197, VRAM = 4, MinCoreFrequency = 782, BaseCoreFrequency = 1241, OverclockedCoreFrequency = 1525, MaxCoreFrequency = 1700, MinMemFrequency = 1306, BaseMemFrequency = 1753, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 147, Wattage = 148, MultiGPU = SLI, SlotSize = 1.5, PowerConnectors = null, ScoreToValueRatio = 12, SingleGPUScore = 3348, DualGPUScore = 6484, DualGPUPerformanceIncrease = 1.93667861409797, OverclockedSingleGPUScore = 4123, OverclockedDualGPUScore = 7957 }; gpus.Add(GPU_GeForce_GTX_970_GAMER_XL);
            GPU GPU_GeForce_GTX_980_GAMING_4G_LE = new GPU() { Id = 15, Name = "GeForce GTX 980 GAMING 4G LE", PartType = PartType.GPU, Manufacturer = MSI, Price = 350, SellPrice = 117, LevelUnlock = 3, LevelPercent = 1, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_980, IsWaterCooled = false, RankingScore = 2654, VRAM = 4, MinCoreFrequency = 806, BaseCoreFrequency = 1253, OverclockedCoreFrequency = 1525, MaxCoreFrequency = 1700, MinMemFrequency = 1306, BaseMemFrequency = 1753, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 279, Wattage = 165, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 11.6, SingleGPUScore = 4051, DualGPUScore = 7915, DualGPUPerformanceIncrease = 1.95383855838065, OverclockedSingleGPUScore = 4903, OverclockedDualGPUScore = 9633 }; gpus.Add(GPU_GeForce_GTX_980_GAMING_4G_LE);
            GPU GPU_GeForce_GTX_980_GAMER = new GPU() { Id = 16, Name = "GeForce GTX 980 GAMER", PartType = PartType.GPU, Manufacturer = Shean, Price = 340, SellPrice = 113, LevelUnlock = 3, LevelPercent = 50, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_980, IsWaterCooled = false, RankingScore = 2584, VRAM = 4, MinCoreFrequency = 732, BaseCoreFrequency = 1216, OverclockedCoreFrequency = 1525, MaxCoreFrequency = 1700, MinMemFrequency = 1306, BaseMemFrequency = 1753, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 147, Wattage = 165, MultiGPU = SLI, SlotSize = 1.5, PowerConnectors = null, ScoreToValueRatio = 11.6, SingleGPUScore = 3938, DualGPUScore = 7712, DualGPUPerformanceIncrease = 1.95835449466734, OverclockedSingleGPUScore = 4903, OverclockedDualGPUScore = 9633 }; gpus.Add(GPU_GeForce_GTX_980_GAMER);
            GPU GPU_GeForce_GTX_980_GAMER_XL = new GPU() { Id = 17, Name = "GeForce GTX 980 GAMER XL", PartType = PartType.GPU, Manufacturer = Shean, Price = 375, SellPrice = 125, LevelUnlock = 3, LevelPercent = 66, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_980, IsWaterCooled = false, RankingScore = 2704, VRAM = 4, MinCoreFrequency = 858, BaseCoreFrequency = 1279, OverclockedCoreFrequency = 1525, MaxCoreFrequency = 1700, MinMemFrequency = 1306, BaseMemFrequency = 1753, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 147, Wattage = 165, MultiGPU = SLI, SlotSize = 1.5, PowerConnectors = null, ScoreToValueRatio = 11, SingleGPUScore = 4130, DualGPUScore = 8058, DualGPUPerformanceIncrease = 1.95108958837772, OverclockedSingleGPUScore = 4903, OverclockedDualGPUScore = 9633 }; gpus.Add(GPU_GeForce_GTX_980_GAMER_XL);
            GPU GPU_GeForce_GTX_980_Ti_GAMING_6G = new GPU() { Id = 18, Name = "GeForce GTX 980 Ti GAMING 6G", PartType = PartType.GPU, Manufacturer = MSI, Price = 490, SellPrice = 163, LevelUnlock = 4, LevelPercent = 60, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_980_Ti, IsWaterCooled = false, RankingScore = 3537, VRAM = 6, MinCoreFrequency = 958, BaseCoreFrequency = 1279, OverclockedCoreFrequency = 1450, MaxCoreFrequency = 1600, MinMemFrequency = 1348, BaseMemFrequency = 1774, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 277, Wattage = 250, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 5408, DualGPUScore = 10617, DualGPUPerformanceIncrease = 1.96320266272189, OverclockedSingleGPUScore = 6207, OverclockedDualGPUScore = 12268 }; gpus.Add(GPU_GeForce_GTX_980_Ti_GAMING_6G);
            GPU GPU_GeForce_GTX_980_Ti_GAMING_6G_GOLDEN_EDITION = new GPU() { Id = 19, Name = "GeForce GTX 980 Ti GAMING 6G GOLDEN EDITION", PartType = PartType.GPU, Manufacturer = MSI, Price = 495, SellPrice = 165, LevelUnlock = 4, LevelPercent = 30, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_980_Ti, IsWaterCooled = false, RankingScore = 3566, VRAM = 6, MinCoreFrequency = 982, BaseCoreFrequency = 1291, OverclockedCoreFrequency = 1450, MaxCoreFrequency = 1600, MinMemFrequency = 1348, BaseMemFrequency = 1774, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 277, Wattage = 250, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 5454, DualGPUScore = 10696, DualGPUPerformanceIncrease = 1.96112944627796, OverclockedSingleGPUScore = 6207, OverclockedDualGPUScore = 12268 }; gpus.Add(GPU_GeForce_GTX_980_Ti_GAMING_6G_GOLDEN_EDITION);
            GPU GPU_GeForce_GTX_980_Ti_GAMING_6G_LE = new GPU() { Id = 20, Name = "GeForce GTX 980 Ti GAMING 6G LE", PartType = PartType.GPU, Manufacturer = MSI, Price = 435, SellPrice = 145, LevelUnlock = 4, LevelPercent = 1, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_980_Ti, IsWaterCooled = false, RankingScore = 3129, VRAM = 6, MinCoreFrequency = 528, BaseCoreFrequency = 1114, OverclockedCoreFrequency = 1450, MaxCoreFrequency = 1700, MinMemFrequency = 1306, BaseMemFrequency = 1753, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 277, Wattage = 250, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 4764, DualGPUScore = 9475, DualGPUPerformanceIncrease = 1.98887489504618, OverclockedSingleGPUScore = 6207, OverclockedDualGPUScore = 12268 }; gpus.Add(GPU_GeForce_GTX_980_Ti_GAMING_6G_LE);
            GPU GPU_GeForce_GT_1030_SC = new GPU() { Id = 21, Name = "GeForce GT 1030 SC", PartType = PartType.GPU, Manufacturer = EVGA, Price = 75, SellPrice = 25, LevelUnlock = 5, LevelPercent = 1, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GT_1030, IsWaterCooled = false, RankingScore = 661, VRAM = 2, MinCoreFrequency = 1288, BaseCoreFrequency = 1544, OverclockedCoreFrequency = 1680, MaxCoreFrequency = 1800, MinMemFrequency = 1004, BaseMemFrequency = 1502, OverclockedMemFrequency = 1800, MaxMemFrequency = 2000, Length = 169, Wattage = 30, MultiGPU = null, SlotSize = 1.5, PowerConnectors = null, ScoreToValueRatio = 13.3, SingleGPUScore = 1000, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 1124, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GT_1030_SC);
            GPU GPU_GeForce_GT_1030_OC_2G = new GPU() { Id = 22, Name = "GeForce GT 1030 OC 2G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 75, SellPrice = 25, LevelUnlock = 5, LevelPercent = 50, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GT_1030, IsWaterCooled = false, RankingScore = 661, VRAM = 2, MinCoreFrequency = 1288, BaseCoreFrequency = 1544, OverclockedCoreFrequency = 1680, MaxCoreFrequency = 1800, MinMemFrequency = 1004, BaseMemFrequency = 1502, OverclockedMemFrequency = 1800, MaxMemFrequency = 2000, Length = 168, Wattage = 30, MultiGPU = null, SlotSize = 1, PowerConnectors = null, ScoreToValueRatio = 13.3, SingleGPUScore = 1000, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 1124, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GT_1030_OC_2G);
            GPU GPU_GeForce_GTX_1050_Windforce_OC_2G = new GPU() { Id = 23, Name = "GeForce GTX 1050 Windforce OC 2G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 120, SellPrice = 40, LevelUnlock = 1, LevelPercent = 1, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1050, IsWaterCooled = false, RankingScore = 1019, VRAM = 2, MinCoreFrequency = 962, BaseCoreFrequency = 1531, OverclockedCoreFrequency = 1850, MaxCoreFrequency = 2100, MinMemFrequency = 1404, BaseMemFrequency = 1752, OverclockedMemFrequency = 1950, MaxMemFrequency = 2100, Length = 229, Wattage = 75, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Six_Pin }, ScoreToValueRatio = 13, SingleGPUScore = 1556, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 1944, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1050_Windforce_OC_2G);
            GPU GPU_GeForce_GTX_1050_GAMING_2G = new GPU() { Id = 24, Name = "GeForce GTX 1050 GAMING 2G", PartType = PartType.GPU, Manufacturer = MSI, Price = 120, SellPrice = 40, LevelUnlock = 1, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1050, IsWaterCooled = false, RankingScore = 969, VRAM = 2, MinCoreFrequency = 836, BaseCoreFrequency = 1468, OverclockedCoreFrequency = 1850, MaxCoreFrequency = 2100, MinMemFrequency = 1404, BaseMemFrequency = 1752, OverclockedMemFrequency = 1950, MaxMemFrequency = 2100, Length = 229, Wattage = 75, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Six_Pin }, ScoreToValueRatio = 12.3, SingleGPUScore = 1481, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 1944, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1050_GAMING_2G);
            GPU GPU_GeForce_GTX_1050_GAMING_X_2G = new GPU() { Id = 25, Name = "GeForce GTX 1050 GAMING X 2G", PartType = PartType.GPU, Manufacturer = MSI, Price = 125, SellPrice = 42, LevelUnlock = 1, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1050, IsWaterCooled = false, RankingScore = 1019, VRAM = 2, MinCoreFrequency = 962, BaseCoreFrequency = 1531, OverclockedCoreFrequency = 1850, MaxCoreFrequency = 2100, MinMemFrequency = 1404, BaseMemFrequency = 1752, OverclockedMemFrequency = 1950, MaxMemFrequency = 2100, Length = 229, Wattage = 75, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Six_Pin }, ScoreToValueRatio = 12.4, SingleGPUScore = 1556, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 1944, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1050_GAMING_X_2G);
            GPU GPU_GeForce_GTX_1050_Ti_FTW_GAMING = new GPU() { Id = 26, Name = "GeForce GTX 1050 Ti FTW GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 165, SellPrice = 55, LevelUnlock = 1, LevelPercent = 1, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1050_Ti, IsWaterCooled = false, RankingScore = 1384, VRAM = 4, MinCoreFrequency = 886, BaseCoreFrequency = 1493, OverclockedCoreFrequency = 1850, MaxCoreFrequency = 2100, MinMemFrequency = 1304, BaseMemFrequency = 1752, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 257, Wattage = 75, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Six_Pin }, ScoreToValueRatio = 12.6, SingleGPUScore = 2073, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 2486, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1050_Ti_FTW_GAMING);
            GPU GPU_GeForce_GTX_1050_Ti_GAMING = new GPU() { Id = 27, Name = "GeForce GTX 1050 Ti GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 155, SellPrice = 52, LevelUnlock = 1, LevelPercent = 1, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1050_Ti, IsWaterCooled = false, RankingScore = 1318, VRAM = 4, MinCoreFrequency = 684, BaseCoreFrequency = 1392, OverclockedCoreFrequency = 1850, MaxCoreFrequency = 2100, MinMemFrequency = 1304, BaseMemFrequency = 1752, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 145, Wattage = 75, MultiGPU = null, SlotSize = 2, PowerConnectors = null, ScoreToValueRatio = 12.7, SingleGPUScore = 1966, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 2486, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1050_Ti_GAMING);
            GPU GPU_GeForce_GTX_1050_Ti_Windforce_OC_4G = new GPU() { Id = 28, Name = "GeForce GTX 1050 Ti Windforce OC 4G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 165, SellPrice = 55, LevelUnlock = 1, LevelPercent = 1, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1050_Ti, IsWaterCooled = false, RankingScore = 1368, VRAM = 4, MinCoreFrequency = 836, BaseCoreFrequency = 1468, OverclockedCoreFrequency = 1850, MaxCoreFrequency = 2100, MinMemFrequency = 1304, BaseMemFrequency = 1752, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 229, Wattage = 75, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Six_Pin }, ScoreToValueRatio = 12.4, SingleGPUScore = 2046, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 2486, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1050_Ti_Windforce_OC_4G);
            GPU GPU_GeForce_GTX_1050_Ti_GAMING_4G = new GPU() { Id = 29, Name = "GeForce GTX 1050 Ti GAMING 4G", PartType = PartType.GPU, Manufacturer = MSI, Price = 160, SellPrice = 53, LevelUnlock = 1, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1050_Ti, IsWaterCooled = false, RankingScore = 1335, VRAM = 4, MinCoreFrequency = 734, BaseCoreFrequency = 1417, OverclockedCoreFrequency = 1850, MaxCoreFrequency = 2100, MinMemFrequency = 1304, BaseMemFrequency = 1752, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 229, Wattage = 75, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Six_Pin }, ScoreToValueRatio = 12.5, SingleGPUScore = 1992, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 2486, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1050_Ti_GAMING_4G);
            GPU GPU_GeForce_GTX_1050_Ti_GAMING_X_4G = new GPU() { Id = 30, Name = "GeForce GTX 1050 Ti GAMING X 4G", PartType = PartType.GPU, Manufacturer = MSI, Price = 165, SellPrice = 55, LevelUnlock = 1, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1050_Ti, IsWaterCooled = false, RankingScore = 1368, VRAM = 4, MinCoreFrequency = 836, BaseCoreFrequency = 1468, OverclockedCoreFrequency = 1850, MaxCoreFrequency = 2100, MinMemFrequency = 1304, BaseMemFrequency = 1752, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 229, Wattage = 75, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Six_Pin }, ScoreToValueRatio = 12.4, SingleGPUScore = 2046, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 2486, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1050_Ti_GAMING_X_4G);
            GPU GPU_GeForce_GTX_1050_Ti_OC_Edition = new GPU() { Id = 31, Name = "GeForce GTX 1050 Ti OC Edition", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 165, SellPrice = 55, LevelUnlock = 1, LevelPercent = 40, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1050_Ti, IsWaterCooled = false, RankingScore = 1393, VRAM = 4, MinCoreFrequency = 912, BaseCoreFrequency = 1506, OverclockedCoreFrequency = 1850, MaxCoreFrequency = 2100, MinMemFrequency = 1304, BaseMemFrequency = 1752, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 174, Wattage = 75, MultiGPU = null, SlotSize = 1.5, PowerConnectors = null, ScoreToValueRatio = 12.6, SingleGPUScore = 2087, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 2486, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1050_Ti_OC_Edition);
            GPU GPU_ROG_Strix_GeForce_GTX_1060_OC_Edition = new GPU() { Id = 32, Name = "ROG Strix GeForce GTX 1060 OC Edition", PartType = PartType.GPU, Manufacturer = ASUS, Price = 350, SellPrice = 117, LevelUnlock = 6, LevelPercent = 90, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1060, IsWaterCooled = false, RankingScore = 2625, VRAM = 6, MinCoreFrequency = 1394, BaseCoreFrequency = 1847, OverclockedCoreFrequency = 2130, MaxCoreFrequency = 2300, MinMemFrequency = 1604, BaseMemFrequency = 2052, OverclockedMemFrequency = 2300, MaxMemFrequency = 2500, Length = 298, Wattage = 120, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 4018, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 4701, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_ROG_Strix_GeForce_GTX_1060_OC_Edition);
            GPU GPU_GeForce_GTX_1060_FTW2_GAMING = new GPU() { Id = 33, Name = "GeForce GTX 1060 FTW2 GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 350, SellPrice = 117, LevelUnlock = 9, LevelPercent = 20, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1060, IsWaterCooled = false, RankingScore = 2625, VRAM = 6, MinCoreFrequency = 1420, BaseCoreFrequency = 1860, OverclockedCoreFrequency = 2130, MaxCoreFrequency = 2300, MinMemFrequency = 1504, BaseMemFrequency = 2002, OverclockedMemFrequency = 2300, MaxMemFrequency = 2500, Length = 267, Wattage = 120, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 4021, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 4701, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1060_FTW2_GAMING);
            GPU GPU_GeForce_GTX_1060_GAMING_3GB = new GPU() { Id = 34, Name = "GeForce GTX 1060 GAMING 3GB", PartType = PartType.GPU, Manufacturer = EVGA, Price = 295, SellPrice = 98, LevelUnlock = 6, LevelPercent = 60, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1060, IsWaterCooled = false, RankingScore = 2314, VRAM = 3, MinCoreFrequency = 1016, BaseCoreFrequency = 1708, OverclockedCoreFrequency = 2130, MaxCoreFrequency = 2400, MinMemFrequency = 1504, BaseMemFrequency = 2002, OverclockedMemFrequency = 2300, MaxMemFrequency = 2500, Length = 173, Wattage = 120, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Six_Pin }, ScoreToValueRatio = 12, SingleGPUScore = 3531, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 4342, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1060_GAMING_3GB);
            GPU GPU_AORUS_GeForce_GTX_1060_6G = new GPU() { Id = 35, Name = "AORUS GeForce GTX 1060 6G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 350, SellPrice = 117, LevelUnlock = 9, LevelPercent = 30, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1060, IsWaterCooled = false, RankingScore = 2625, VRAM = 6, MinCoreFrequency = 1420, BaseCoreFrequency = 1860, OverclockedCoreFrequency = 2130, MaxCoreFrequency = 2300, MinMemFrequency = 1504, BaseMemFrequency = 2002, OverclockedMemFrequency = 2300, MaxMemFrequency = 2500, Length = 280, Wattage = 120, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 4021, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 4701, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_AORUS_GeForce_GTX_1060_6G);
            GPU GPU_AORUS_GeForce_GTX_1060_Xtreme_Edition_6G = new GPU() { Id = 36, Name = "AORUS GeForce GTX 1060 Xtreme Edition 6G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 355, SellPrice = 118, LevelUnlock = 9, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1060, IsWaterCooled = false, RankingScore = 2666, VRAM = 6, MinCoreFrequency = 1446, BaseCoreFrequency = 1873, OverclockedCoreFrequency = 2130, MaxCoreFrequency = 2300, MinMemFrequency = 1658, BaseMemFrequency = 2079, OverclockedMemFrequency = 2300, MaxMemFrequency = 2500, Length = 281, Wattage = 120, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 4083, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 4701, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_AORUS_GeForce_GTX_1060_Xtreme_Edition_6G);
            GPU GPU_GeForce_GTX_1060_GAMING_3G = new GPU() { Id = 37, Name = "GeForce GTX 1060 GAMING 3G", PartType = PartType.GPU, Manufacturer = MSI, Price = 300, SellPrice = 100, LevelUnlock = 6, LevelPercent = 80, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1060, IsWaterCooled = false, RankingScore = 2339, VRAM = 3, MinCoreFrequency = 1066, BaseCoreFrequency = 1733, OverclockedCoreFrequency = 2130, MaxCoreFrequency = 2400, MinMemFrequency = 1504, BaseMemFrequency = 2002, OverclockedMemFrequency = 2300, MaxMemFrequency = 2500, Length = 277, Wattage = 120, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.9, SingleGPUScore = 3570, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 4342, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1060_GAMING_3G);
            GPU GPU_GeForce_GTX_1060_GAMING_6G = new GPU() { Id = 38, Name = "GeForce GTX 1060 GAMING 6G", PartType = PartType.GPU, Manufacturer = MSI, Price = 330, SellPrice = 110, LevelUnlock = 9, LevelPercent = 80, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1060, IsWaterCooled = false, RankingScore = 2467, VRAM = 6, MinCoreFrequency = 1066, BaseCoreFrequency = 1733, OverclockedCoreFrequency = 2130, MaxCoreFrequency = 2400, MinMemFrequency = 1504, BaseMemFrequency = 2002, OverclockedMemFrequency = 2300, MaxMemFrequency = 2500, Length = 277, Wattage = 120, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.4, SingleGPUScore = 3767, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 4701, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1060_GAMING_6G);
            GPU GPU_GeForce_GTX_1060_GAMING_VR_3G = new GPU() { Id = 39, Name = "GeForce GTX 1060 GAMING VR 3G", PartType = PartType.GPU, Manufacturer = MSI, Price = 300, SellPrice = 100, LevelUnlock = 6, LevelPercent = 20, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1060, IsWaterCooled = false, RankingScore = 2352, VRAM = 3, MinCoreFrequency = 1092, BaseCoreFrequency = 1746, OverclockedCoreFrequency = 2130, MaxCoreFrequency = 2400, MinMemFrequency = 1504, BaseMemFrequency = 2002, OverclockedMemFrequency = 2300, MaxMemFrequency = 2500, Length = 277, Wattage = 120, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 12, SingleGPUScore = 3590, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 4342, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1060_GAMING_VR_3G);
            GPU GPU_GeForce_GTX_1060_GAMING_VR_6G = new GPU() { Id = 40, Name = "GeForce GTX 1060 GAMING VR 6G", PartType = PartType.GPU, Manufacturer = MSI, Price = 330, SellPrice = 110, LevelUnlock = 9, LevelPercent = 70, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1060, IsWaterCooled = false, RankingScore = 2483, VRAM = 6, MinCoreFrequency = 1092, BaseCoreFrequency = 1746, OverclockedCoreFrequency = 2130, MaxCoreFrequency = 2400, MinMemFrequency = 1504, BaseMemFrequency = 2002, OverclockedMemFrequency = 2300, MaxMemFrequency = 2500, Length = 277, Wattage = 120, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 3793, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 4701, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1060_GAMING_VR_6G);
            GPU GPU_GeForce_GTX_1060_GAMING_VR_X_3G = new GPU() { Id = 41, Name = "GeForce GTX 1060 GAMING VR X 3G", PartType = PartType.GPU, Manufacturer = MSI, Price = 310, SellPrice = 103, LevelUnlock = 6, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1060, IsWaterCooled = false, RankingScore = 2424, VRAM = 3, MinCoreFrequency = 1318, BaseCoreFrequency = 1809, OverclockedCoreFrequency = 2130, MaxCoreFrequency = 2300, MinMemFrequency = 1554, BaseMemFrequency = 2027, OverclockedMemFrequency = 2300, MaxMemFrequency = 2500, Length = 277, Wattage = 120, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.9, SingleGPUScore = 3701, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 4342, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1060_GAMING_VR_X_3G);
            GPU GPU_GeForce_GTX_1060_GAMING_VR_X_6G = new GPU() { Id = 42, Name = "GeForce GTX 1060 GAMING VR X 6G", PartType = PartType.GPU, Manufacturer = MSI, Price = 340, SellPrice = 113, LevelUnlock = 9, LevelPercent = 50, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1060, IsWaterCooled = false, RankingScore = 2570, VRAM = 6, MinCoreFrequency = 1318, BaseCoreFrequency = 1809, OverclockedCoreFrequency = 2130, MaxCoreFrequency = 2300, MinMemFrequency = 1554, BaseMemFrequency = 2027, OverclockedMemFrequency = 2300, MaxMemFrequency = 2500, Length = 277, Wattage = 120, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.6, SingleGPUScore = 3931, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 4701, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1060_GAMING_VR_X_6G);
            GPU GPU_GeForce_GTX_1060_GAMING_X_3G = new GPU() { Id = 43, Name = "GeForce GTX 1060 GAMING X 3G", PartType = PartType.GPU, Manufacturer = MSI, Price = 305, SellPrice = 102, LevelUnlock = 6, LevelPercent = 40, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1060, IsWaterCooled = false, RankingScore = 2391, VRAM = 3, MinCoreFrequency = 1168, BaseCoreFrequency = 1784, OverclockedCoreFrequency = 2130, MaxCoreFrequency = 2400, MinMemFrequency = 1504, BaseMemFrequency = 2002, OverclockedMemFrequency = 2300, MaxMemFrequency = 2500, Length = 277, Wattage = 120, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 12, SingleGPUScore = 3650, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 4342, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1060_GAMING_X_3G);
            GPU GPU_GeForce_GTX_1060_GAMING_X_6G = new GPU() { Id = 44, Name = "GeForce GTX 1060 GAMING X 6G", PartType = PartType.GPU, Manufacturer = MSI, Price = 340, SellPrice = 113, LevelUnlock = 9, LevelPercent = 40, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1060, IsWaterCooled = false, RankingScore = 2570, VRAM = 6, MinCoreFrequency = 1318, BaseCoreFrequency = 1809, OverclockedCoreFrequency = 2130, MaxCoreFrequency = 2300, MinMemFrequency = 1554, BaseMemFrequency = 2027, OverclockedMemFrequency = 2300, MaxMemFrequency = 2500, Length = 277, Wattage = 120, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.6, SingleGPUScore = 3931, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 4701, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1060_GAMING_X_6G);
            GPU GPU_GeForce_GTX_1060_GAMING_X__6G = new GPU() { Id = 45, Name = "GeForce GTX 1060 GAMING X+ 6G", PartType = PartType.GPU, Manufacturer = MSI, Price = 350, SellPrice = 117, LevelUnlock = 6, LevelPercent = 10, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1060, IsWaterCooled = false, RankingScore = 2653, VRAM = 6, MinCoreFrequency = 1318, BaseCoreFrequency = 1809, OverclockedCoreFrequency = 2130, MaxCoreFrequency = 2300, MinMemFrequency = 2162, BaseMemFrequency = 2281, OverclockedMemFrequency = 2300, MaxMemFrequency = 2400, Length = 277, Wattage = 120, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.6, SingleGPUScore = 4049, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 4701, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1060_GAMING_X__6G);
            GPU GPU_GeForce_GTX_1060_GAMING__6G = new GPU() { Id = 46, Name = "GeForce GTX 1060 GAMING+ 6G", PartType = PartType.GPU, Manufacturer = MSI, Price = 340, SellPrice = 113, LevelUnlock = 9, LevelPercent = 60, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1060, IsWaterCooled = false, RankingScore = 2567, VRAM = 6, MinCoreFrequency = 1092, BaseCoreFrequency = 1746, OverclockedCoreFrequency = 2130, MaxCoreFrequency = 2400, MinMemFrequency = 2112, BaseMemFrequency = 2256, OverclockedMemFrequency = 2300, MaxMemFrequency = 2400, Length = 277, Wattage = 120, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 3912, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 4701, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1060_GAMING__6G);
            GPU GPU_GeForce_GTX_1060_Founders_Edition = new GPU() { Id = 47, Name = "GeForce GTX 1060 Founders Edition", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 340, SellPrice = 113, LevelUnlock = 6, LevelPercent = 1, Lighting = Color.Green, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1060, IsWaterCooled = false, RankingScore = 2437, VRAM = 6, MinCoreFrequency = 1018, BaseCoreFrequency = 1709, OverclockedCoreFrequency = 2130, MaxCoreFrequency = 2400, MinMemFrequency = 1504, BaseMemFrequency = 2002, OverclockedMemFrequency = 2300, MaxMemFrequency = 2500, Length = 250, Wattage = 120, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Six_Pin }, ScoreToValueRatio = 10.9, SingleGPUScore = 3719, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 4701, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1060_Founders_Edition);
            GPU GPU_GeForce_GTX_1060_AMP__Edition = new GPU() { Id = 48, Name = "GeForce GTX 1060 AMP! Edition", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 330, SellPrice = 110, LevelUnlock = 6, LevelPercent = 60, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1060, IsWaterCooled = false, RankingScore = 2514, VRAM = 6, MinCoreFrequency = 1142, BaseCoreFrequency = 1771, OverclockedCoreFrequency = 2130, MaxCoreFrequency = 2400, MinMemFrequency = 1504, BaseMemFrequency = 2002, OverclockedMemFrequency = 2300, MaxMemFrequency = 2500, Length = 210, Wattage = 120, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Six_Pin }, ScoreToValueRatio = 11.6, SingleGPUScore = 3843, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 4701, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1060_AMP__Edition);
            GPU GPU_GeForce_GTX_1060_Mini = new GPU() { Id = 49, Name = "GeForce GTX 1060 Mini", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 320, SellPrice = 107, LevelUnlock = 6, LevelPercent = 1, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1060, IsWaterCooled = false, RankingScore = 2437, VRAM = 6, MinCoreFrequency = 1018, BaseCoreFrequency = 1709, OverclockedCoreFrequency = 2130, MaxCoreFrequency = 2400, MinMemFrequency = 1504, BaseMemFrequency = 2002, OverclockedMemFrequency = 2300, MaxMemFrequency = 2500, Length = 174, Wattage = 120, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Six_Pin }, ScoreToValueRatio = 11.6, SingleGPUScore = 3719, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 4701, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1060_Mini);
            GPU GPU_ROG_Strix_GeForce_GTX_1070_OC_Edition = new GPU() { Id = 50, Name = "ROG Strix GeForce GTX 1070 OC Edition", PartType = PartType.GPU, Manufacturer = ASUS, Price = 550, SellPrice = 183, LevelUnlock = 11, LevelPercent = 25, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1070, IsWaterCooled = false, RankingScore = 3742, VRAM = 8, MinCoreFrequency = 1470, BaseCoreFrequency = 1835, OverclockedCoreFrequency = 2050, MaxCoreFrequency = 2200, MinMemFrequency = 1704, BaseMemFrequency = 2002, OverclockedMemFrequency = 2200, MaxMemFrequency = 2300, Length = 298, Wattage = 150, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 5749, DualGPUScore = 11261, DualGPUPerformanceIncrease = 1.95877543920682, OverclockedSingleGPUScore = 6468, OverclockedDualGPUScore = 12802 }; gpus.Add(GPU_ROG_Strix_GeForce_GTX_1070_OC_Edition);
            GPU GPU_GeForce_GTX_1070_FTW2_GAMING = new GPU() { Id = 51, Name = "GeForce GTX 1070 FTW2 GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 530, SellPrice = 177, LevelUnlock = 11, LevelPercent = 35, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1070, IsWaterCooled = false, RankingScore = 3685, VRAM = 8, MinCoreFrequency = 1394, BaseCoreFrequency = 1797, OverclockedCoreFrequency = 2050, MaxCoreFrequency = 2200, MinMemFrequency = 1704, BaseMemFrequency = 2002, OverclockedMemFrequency = 2200, MaxMemFrequency = 2300, Length = 267, Wattage = 150, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.7, SingleGPUScore = 5653, DualGPUScore = 11067, DualGPUPerformanceIncrease = 1.95772156377145, OverclockedSingleGPUScore = 6468, OverclockedDualGPUScore = 12802 }; gpus.Add(GPU_GeForce_GTX_1070_FTW2_GAMING);
            GPU GPU_GeForce_GTX_1070_GAMING = new GPU() { Id = 52, Name = "GeForce GTX 1070 GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 510, SellPrice = 170, LevelUnlock = 11, LevelPercent = 60, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1070, IsWaterCooled = false, RankingScore = 3511, VRAM = 8, MinCoreFrequency = 1066, BaseCoreFrequency = 1683, OverclockedCoreFrequency = 2050, MaxCoreFrequency = 2300, MinMemFrequency = 1704, BaseMemFrequency = 2002, OverclockedMemFrequency = 2200, MaxMemFrequency = 2300, Length = 267, Wattage = 150, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 5366, DualGPUScore = 10484, DualGPUPerformanceIncrease = 1.95378307864331, OverclockedSingleGPUScore = 6468, OverclockedDualGPUScore = 12802 }; gpus.Add(GPU_GeForce_GTX_1070_GAMING);
            GPU GPU_AORUS_GeForce_GTX_1070_8G = new GPU() { Id = 53, Name = "AORUS GeForce GTX 1070 8G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 550, SellPrice = 183, LevelUnlock = 11, LevelPercent = 40, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1070, IsWaterCooled = false, RankingScore = 3742, VRAM = 8, MinCoreFrequency = 1470, BaseCoreFrequency = 1835, OverclockedCoreFrequency = 2050, MaxCoreFrequency = 2200, MinMemFrequency = 1704, BaseMemFrequency = 2002, OverclockedMemFrequency = 2200, MaxMemFrequency = 2300, Length = 287, Wattage = 150, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 5749, DualGPUScore = 11261, DualGPUPerformanceIncrease = 1.95877543920682, OverclockedSingleGPUScore = 6468, OverclockedDualGPUScore = 12802 }; gpus.Add(GPU_AORUS_GeForce_GTX_1070_8G);
            GPU GPU_GeForce_GTX_1070_GAMING_8G = new GPU() { Id = 54, Name = "GeForce GTX 1070 GAMING 8G", PartType = PartType.GPU, Manufacturer = MSI, Price = 520, SellPrice = 173, LevelUnlock = 11, LevelPercent = 80, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1070, IsWaterCooled = false, RankingScore = 3569, VRAM = 8, MinCoreFrequency = 1142, BaseCoreFrequency = 1721, OverclockedCoreFrequency = 2050, MaxCoreFrequency = 2300, MinMemFrequency = 1704, BaseMemFrequency = 2002, OverclockedMemFrequency = 2200, MaxMemFrequency = 2300, Length = 279, Wattage = 150, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 5462, DualGPUScore = 10678, DualGPUPerformanceIncrease = 1.95496155254486, OverclockedSingleGPUScore = 6468, OverclockedDualGPUScore = 12802 }; gpus.Add(GPU_GeForce_GTX_1070_GAMING_8G);
            GPU GPU_GeForce_GTX_1070_GAMING_X_8G = new GPU() { Id = 55, Name = "GeForce GTX 1070 GAMING X 8G", PartType = PartType.GPU, Manufacturer = MSI, Price = 540, SellPrice = 180, LevelUnlock = 11, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1070, IsWaterCooled = false, RankingScore = 3701, VRAM = 8, MinCoreFrequency = 1394, BaseCoreFrequency = 1797, OverclockedCoreFrequency = 2050, MaxCoreFrequency = 2200, MinMemFrequency = 1754, BaseMemFrequency = 2027, OverclockedMemFrequency = 2200, MaxMemFrequency = 2300, Length = 279, Wattage = 150, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 5676, DualGPUScore = 11123, DualGPUPerformanceIncrease = 1.95965468639887, OverclockedSingleGPUScore = 6468, OverclockedDualGPUScore = 12802 }; gpus.Add(GPU_GeForce_GTX_1070_GAMING_X_8G);
            GPU GPU_GeForce_GTX_1070_GAMING_Z_8G = new GPU() { Id = 56, Name = "GeForce GTX 1070 GAMING Z 8G", PartType = PartType.GPU, Manufacturer = MSI, Price = 555, SellPrice = 185, LevelUnlock = 11, LevelPercent = 20, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1070, IsWaterCooled = false, RankingScore = 3797, VRAM = 8, MinCoreFrequency = 1520, BaseCoreFrequency = 1860, OverclockedCoreFrequency = 2050, MaxCoreFrequency = 2200, MinMemFrequency = 1754, BaseMemFrequency = 2027, OverclockedMemFrequency = 2200, MaxMemFrequency = 2300, Length = 279, Wattage = 150, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 5834, DualGPUScore = 11444, DualGPUPerformanceIncrease = 1.96160438806993, OverclockedSingleGPUScore = 6468, OverclockedDualGPUScore = 12802 }; gpus.Add(GPU_GeForce_GTX_1070_GAMING_Z_8G);
            GPU GPU_GeForce_GTX_1070_Founders_Edition = new GPU() { Id = 57, Name = "GeForce GTX 1070 Founders Edition", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 530, SellPrice = 177, LevelUnlock = 11, LevelPercent = 1, Lighting = Color.Green, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1070, IsWaterCooled = false, RankingScore = 3511, VRAM = 8, MinCoreFrequency = 1066, BaseCoreFrequency = 1683, OverclockedCoreFrequency = 2050, MaxCoreFrequency = 2300, MinMemFrequency = 1704, BaseMemFrequency = 2002, OverclockedMemFrequency = 2200, MaxMemFrequency = 2300, Length = 267, Wattage = 150, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 10.1, SingleGPUScore = 5366, DualGPUScore = 10484, DualGPUPerformanceIncrease = 1.95378307864331, OverclockedSingleGPUScore = 6468, OverclockedDualGPUScore = 12802 }; gpus.Add(GPU_GeForce_GTX_1070_Founders_Edition);
            GPU GPU_GeForce_GTX_1070_AMP_Extreme = new GPU() { Id = 58, Name = "GeForce GTX 1070 AMP Extreme", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 550, SellPrice = 183, LevelUnlock = 11, LevelPercent = 80, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1070, IsWaterCooled = false, RankingScore = 3775, VRAM = 8, MinCoreFrequency = 1470, BaseCoreFrequency = 1835, OverclockedCoreFrequency = 2050, MaxCoreFrequency = 2200, MinMemFrequency = 1804, BaseMemFrequency = 2052, OverclockedMemFrequency = 2200, MaxMemFrequency = 2300, Length = 325, Wattage = 150, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 5794, DualGPUScore = 11373, DualGPUPerformanceIncrease = 1.96289264756645, OverclockedSingleGPUScore = 6468, OverclockedDualGPUScore = 12802 }; gpus.Add(GPU_GeForce_GTX_1070_AMP_Extreme);
            GPU GPU_GeForce_GTX_1070_Mini = new GPU() { Id = 59, Name = "GeForce GTX 1070 Mini", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 515, SellPrice = 172, LevelUnlock = 11, LevelPercent = 5, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1070, IsWaterCooled = false, RankingScore = 3549, VRAM = 8, MinCoreFrequency = 1116, BaseCoreFrequency = 1708, OverclockedCoreFrequency = 2050, MaxCoreFrequency = 2300, MinMemFrequency = 1704, BaseMemFrequency = 2002, OverclockedMemFrequency = 2200, MaxMemFrequency = 2300, Length = 210, Wattage = 150, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 5429, DualGPUScore = 10612, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 6468, OverclockedDualGPUScore = 12802 }; gpus.Add(GPU_GeForce_GTX_1070_Mini);
            GPU GPU_GeForce_GTX_1070___EKWB_EK_FC_Acetal = new GPU() { Id = 60, Name = "GeForce GTX 1070 | EKWB EK-FC Acetal", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 650, SellPrice = 217, LevelUnlock = 16, LevelPercent = 1, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1070, IsWaterCooled = true, RankingScore = 3511, VRAM = 8, MinCoreFrequency = 966, BaseCoreFrequency = 1683, OverclockedCoreFrequency = 2142, MaxCoreFrequency = 2400, MinMemFrequency = 1504, BaseMemFrequency = 2002, OverclockedMemFrequency = 2299, MaxMemFrequency = 2500, Length = 258, Wattage = 150, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 8.3, SingleGPUScore = 5366, DualGPUScore = 10484, DualGPUPerformanceIncrease = 1.95378307864331, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1070___EKWB_EK_FC_Acetal);
            GPU GPU_GeForce_GTX_1070___EKWB_EK_FC_Plexi = new GPU() { Id = 61, Name = "GeForce GTX 1070 | EKWB EK-FC Plexi", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 650, SellPrice = 217, LevelUnlock = 16, LevelPercent = 1, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1070, IsWaterCooled = true, RankingScore = 3511, VRAM = 8, MinCoreFrequency = 966, BaseCoreFrequency = 1683, OverclockedCoreFrequency = 2142, MaxCoreFrequency = 2400, MinMemFrequency = 1504, BaseMemFrequency = 2002, OverclockedMemFrequency = 2299, MaxMemFrequency = 2500, Length = 258, Wattage = 150, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 8.3, SingleGPUScore = 5366, DualGPUScore = 10484, DualGPUPerformanceIncrease = 1.95378307864331, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1070___EKWB_EK_FC_Plexi);
            GPU GPU_GeForce_GTX_1070___EKWB_EK_FC_Plexi_RGB = new GPU() { Id = 62, Name = "GeForce GTX 1070 | EKWB EK-FC Plexi RGB", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 700, SellPrice = 233, LevelUnlock = 23, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1070, IsWaterCooled = true, RankingScore = 3511, VRAM = 8, MinCoreFrequency = 966, BaseCoreFrequency = 1683, OverclockedCoreFrequency = 2142, MaxCoreFrequency = 2400, MinMemFrequency = 1504, BaseMemFrequency = 2002, OverclockedMemFrequency = 2299, MaxMemFrequency = 2500, Length = 258, Wattage = 150, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 7.7, SingleGPUScore = 5366, DualGPUScore = 10484, DualGPUPerformanceIncrease = 1.95378307864331, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1070___EKWB_EK_FC_Plexi_RGB);
            GPU GPU_ROG_Strix_GeForce_GTX_1070_Ti_Advanced_Edition = new GPU() { Id = 63, Name = "ROG Strix GeForce GTX 1070 Ti Advanced Edition", PartType = PartType.GPU, Manufacturer = ASUS, Price = 610, SellPrice = 203, LevelUnlock = 19, LevelPercent = 60, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1070_Ti, IsWaterCooled = false, RankingScore = 4138, VRAM = 8, MinCoreFrequency = 1066, BaseCoreFrequency = 1683, OverclockedCoreFrequency = 2050, MaxCoreFrequency = 2300, MinMemFrequency = 1704, BaseMemFrequency = 2002, OverclockedMemFrequency = 2200, MaxMemFrequency = 2300, Length = 298, Wattage = 180, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 6380, DualGPUScore = 12011, DualGPUPerformanceIncrease = 1.88260188087774, OverclockedSingleGPUScore = 7395, OverclockedDualGPUScore = 14160 }; gpus.Add(GPU_ROG_Strix_GeForce_GTX_1070_Ti_Advanced_Edition);
            GPU GPU_GeForce_GTX_1070_Ti_GAMING_8G = new GPU() { Id = 64, Name = "GeForce GTX 1070 Ti GAMING 8G", PartType = PartType.GPU, Manufacturer = MSI, Price = 610, SellPrice = 203, LevelUnlock = 19, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1070_Ti, IsWaterCooled = false, RankingScore = 4138, VRAM = 8, MinCoreFrequency = 1066, BaseCoreFrequency = 1683, OverclockedCoreFrequency = 2050, MaxCoreFrequency = 2300, MinMemFrequency = 1704, BaseMemFrequency = 2002, OverclockedMemFrequency = 2200, MaxMemFrequency = 2300, Length = 279, Wattage = 180, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 6380, DualGPUScore = 12011, DualGPUPerformanceIncrease = 1.88260188087774, OverclockedSingleGPUScore = 7395, OverclockedDualGPUScore = 14160 }; gpus.Add(GPU_GeForce_GTX_1070_Ti_GAMING_8G);
            GPU GPU_GeForce_GTX_1070_Ti_Titanium_8G = new GPU() { Id = 65, Name = "GeForce GTX 1070 Ti Titanium 8G", PartType = PartType.GPU, Manufacturer = MSI, Price = 610, SellPrice = 203, LevelUnlock = 19, LevelPercent = 25, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1070_Ti, IsWaterCooled = false, RankingScore = 4138, VRAM = 8, MinCoreFrequency = 1066, BaseCoreFrequency = 1683, OverclockedCoreFrequency = 2050, MaxCoreFrequency = 2300, MinMemFrequency = 1704, BaseMemFrequency = 2002, OverclockedMemFrequency = 2200, MaxMemFrequency = 2300, Length = 279, Wattage = 180, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 6380, DualGPUScore = 12011, DualGPUPerformanceIncrease = 1.88260188087774, OverclockedSingleGPUScore = 7395, OverclockedDualGPUScore = 14160 }; gpus.Add(GPU_GeForce_GTX_1070_Ti_Titanium_8G);
            GPU GPU_GeForce_GTX_1070_Ti_Founders_Edition = new GPU() { Id = 66, Name = "GeForce GTX 1070 Ti Founders Edition", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 640, SellPrice = 213, LevelUnlock = 19, LevelPercent = 1, Lighting = Color.Green, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1070_Ti, IsWaterCooled = false, RankingScore = 4138, VRAM = 8, MinCoreFrequency = 1066, BaseCoreFrequency = 1683, OverclockedCoreFrequency = 2050, MaxCoreFrequency = 2300, MinMemFrequency = 1704, BaseMemFrequency = 2002, OverclockedMemFrequency = 2200, MaxMemFrequency = 2300, Length = 267, Wattage = 180, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 10, SingleGPUScore = 6380, DualGPUScore = 12011, DualGPUPerformanceIncrease = 1.88260188087774, OverclockedSingleGPUScore = 7395, OverclockedDualGPUScore = 14160 }; gpus.Add(GPU_GeForce_GTX_1070_Ti_Founders_Edition);
            GPU GPU_GeForce_GTX_1070_Ti___EKWB_EK_FC_Acetal = new GPU() { Id = 67, Name = "GeForce GTX 1070 Ti | EKWB EK-FC Acetal", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 760, SellPrice = 253, LevelUnlock = 19, LevelPercent = 90, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1070_Ti, IsWaterCooled = true, RankingScore = 4138, VRAM = 8, MinCoreFrequency = 966, BaseCoreFrequency = 1683, OverclockedCoreFrequency = 2157, MaxCoreFrequency = 2400, MinMemFrequency = 1504, BaseMemFrequency = 2002, OverclockedMemFrequency = 2314, MaxMemFrequency = 2500, Length = 258, Wattage = 180, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 8.4, SingleGPUScore = 6380, DualGPUScore = 12011, DualGPUPerformanceIncrease = 1.88260188087774, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1070_Ti___EKWB_EK_FC_Acetal);
            GPU GPU_GeForce_GTX_1070_Ti___EKWB_EK_FC_Plexi = new GPU() { Id = 68, Name = "GeForce GTX 1070 Ti | EKWB EK-FC Plexi", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 760, SellPrice = 253, LevelUnlock = 19, LevelPercent = 90, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1070_Ti, IsWaterCooled = true, RankingScore = 4138, VRAM = 8, MinCoreFrequency = 966, BaseCoreFrequency = 1683, OverclockedCoreFrequency = 2157, MaxCoreFrequency = 2400, MinMemFrequency = 1504, BaseMemFrequency = 2002, OverclockedMemFrequency = 2314, MaxMemFrequency = 2500, Length = 258, Wattage = 180, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 8.4, SingleGPUScore = 6380, DualGPUScore = 12011, DualGPUPerformanceIncrease = 1.88260188087774, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1070_Ti___EKWB_EK_FC_Plexi);
            GPU GPU_GeForce_GTX_1070_Ti___EKWB_EK_FC_Plexi_RGB = new GPU() { Id = 69, Name = "GeForce GTX 1070 Ti | EKWB EK-FC Plexi RGB", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 810, SellPrice = 270, LevelUnlock = 23, LevelPercent = 60, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1070_Ti, IsWaterCooled = true, RankingScore = 4138, VRAM = 8, MinCoreFrequency = 966, BaseCoreFrequency = 1683, OverclockedCoreFrequency = 2157, MaxCoreFrequency = 2400, MinMemFrequency = 1504, BaseMemFrequency = 2002, OverclockedMemFrequency = 2314, MaxMemFrequency = 2500, Length = 258, Wattage = 180, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 7.9, SingleGPUScore = 6380, DualGPUScore = 12011, DualGPUPerformanceIncrease = 1.88260188087774, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1070_Ti___EKWB_EK_FC_Plexi_RGB);
            GPU GPU_ROG_Strix_GeForce_GTX_1080_OC_Edition = new GPU() { Id = 70, Name = "ROG Strix GeForce GTX 1080 OC Edition", PartType = PartType.GPU, Manufacturer = ASUS, Price = 700, SellPrice = 233, LevelUnlock = 13, LevelPercent = 20, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080, IsWaterCooled = false, RankingScore = 4741, VRAM = 8, MinCoreFrequency = 1696, BaseCoreFrequency = 1898, OverclockedCoreFrequency = 2030, MaxCoreFrequency = 2100, MinMemFrequency = -198, BaseMemFrequency = 1251, OverclockedMemFrequency = 2200, MaxMemFrequency = 2700, Length = 298, Wattage = 180, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 7337, DualGPUScore = 14129, DualGPUPerformanceIncrease = 1.92571895870247, OverclockedSingleGPUScore = 9525, OverclockedDualGPUScore = 16261 }; gpus.Add(GPU_ROG_Strix_GeForce_GTX_1080_OC_Edition);
            GPU GPU_GeForce_GTX_1080_GAMING = new GPU() { Id = 71, Name = "GeForce GTX 1080 GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 655, SellPrice = 218, LevelUnlock = 13, LevelPercent = 60, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080, IsWaterCooled = false, RankingScore = 4474, VRAM = 8, MinCoreFrequency = 1266, BaseCoreFrequency = 1733, OverclockedCoreFrequency = 2030, MaxCoreFrequency = 2200, MinMemFrequency = -198, BaseMemFrequency = 1251, OverclockedMemFrequency = 2200, MaxMemFrequency = 2700, Length = 267, Wattage = 180, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 10.25, SingleGPUScore = 6896, DualGPUScore = 12837, DualGPUPerformanceIncrease = 1.86151392111369, OverclockedSingleGPUScore = 9525, OverclockedDualGPUScore = 16261 }; gpus.Add(GPU_GeForce_GTX_1080_GAMING);
            GPU GPU_AORUS_GeForce_GTX_1080_8G = new GPU() { Id = 72, Name = "AORUS GeForce GTX 1080 8G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 690, SellPrice = 230, LevelUnlock = 13, LevelPercent = 80, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080, IsWaterCooled = false, RankingScore = 4701, VRAM = 8, MinCoreFrequency = 1546, BaseCoreFrequency = 1873, OverclockedCoreFrequency = 2030, MaxCoreFrequency = 2200, MinMemFrequency = -198, BaseMemFrequency = 1251, OverclockedMemFrequency = 2200, MaxMemFrequency = 2700, Length = 287, Wattage = 180, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.25, SingleGPUScore = 7270, DualGPUScore = 13934, DualGPUPerformanceIncrease = 1.91664374140303, OverclockedSingleGPUScore = 9525, OverclockedDualGPUScore = 16261 }; gpus.Add(GPU_AORUS_GeForce_GTX_1080_8G);
            GPU GPU_AORUS_GeForce_GTX_1080_Xtreme_Edition_8G = new GPU() { Id = 73, Name = "AORUS GeForce GTX 1080 Xtreme Edition 8G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 730, SellPrice = 243, LevelUnlock = 13, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080, IsWaterCooled = false, RankingScore = 4965, VRAM = 8, MinCoreFrequency = 1772, BaseCoreFrequency = 1936, OverclockedCoreFrequency = 2030, MaxCoreFrequency = 2100, MinMemFrequency = 52, BaseMemFrequency = 1376, OverclockedMemFrequency = 2200, MaxMemFrequency = 2700, Length = 293, Wattage = 180, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 10.25, SingleGPUScore = 7680, DualGPUScore = 14574, DualGPUPerformanceIncrease = 1.89765625, OverclockedSingleGPUScore = 9525, OverclockedDualGPUScore = 16261 }; gpus.Add(GPU_AORUS_GeForce_GTX_1080_Xtreme_Edition_8G);
            GPU GPU_GeForce_GTX_1080_GAMING_8G = new GPU() { Id = 74, Name = "GeForce GTX 1080 GAMING 8G", PartType = PartType.GPU, Manufacturer = MSI, Price = 665, SellPrice = 222, LevelUnlock = 13, LevelPercent = 70, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080, IsWaterCooled = false, RankingScore = 4536, VRAM = 8, MinCoreFrequency = 1342, BaseCoreFrequency = 1771, OverclockedCoreFrequency = 2030, MaxCoreFrequency = 2200, MinMemFrequency = -198, BaseMemFrequency = 1251, OverclockedMemFrequency = 2200, MaxMemFrequency = 2700, Length = 279, Wattage = 180, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 10.25, SingleGPUScore = 6998, DualGPUScore = 13135, DualGPUPerformanceIncrease = 1.87696484709917, OverclockedSingleGPUScore = 9525, OverclockedDualGPUScore = 16261 }; gpus.Add(GPU_GeForce_GTX_1080_GAMING_8G);
            GPU GPU_GeForce_GTX_1080_GAMING_X_8G = new GPU() { Id = 75, Name = "GeForce GTX 1080 GAMING X 8G", PartType = PartType.GPU, Manufacturer = MSI, Price = 690, SellPrice = 230, LevelUnlock = 13, LevelPercent = 50, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080, IsWaterCooled = false, RankingScore = 4674, VRAM = 8, MinCoreFrequency = 1494, BaseCoreFrequency = 1847, OverclockedCoreFrequency = 2030, MaxCoreFrequency = 2200, MinMemFrequency = -174, BaseMemFrequency = 1263, OverclockedMemFrequency = 2200, MaxMemFrequency = 2700, Length = 279, Wattage = 180, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 10.25, SingleGPUScore = 7224, DualGPUScore = 13744, DualGPUPerformanceIncrease = 1.90254706533776, OverclockedSingleGPUScore = 9525, OverclockedDualGPUScore = 16261 }; gpus.Add(GPU_GeForce_GTX_1080_GAMING_X_8G);
            GPU GPU_GeForce_GTX_1080_GAMING_X__8G = new GPU() { Id = 76, Name = "GeForce GTX 1080 GAMING X+ 8G", PartType = PartType.GPU, Manufacturer = MSI, Price = 710, SellPrice = 237, LevelUnlock = 13, LevelPercent = 10, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080, IsWaterCooled = false, RankingScore = 4837, VRAM = 8, MinCoreFrequency = 1494, BaseCoreFrequency = 1847, OverclockedCoreFrequency = 2030, MaxCoreFrequency = 2200, MinMemFrequency = 76, BaseMemFrequency = 1388, OverclockedMemFrequency = 2200, MaxMemFrequency = 2700, Length = 277, Wattage = 180, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 10.25, SingleGPUScore = 7466, DualGPUScore = 13890, DualGPUPerformanceIncrease = 1.86043396731851, OverclockedSingleGPUScore = 9525, OverclockedDualGPUScore = 16261 }; gpus.Add(GPU_GeForce_GTX_1080_GAMING_X__8G);
            GPU GPU_GeForce_GTX_1080_GAMING_Z_8G = new GPU() { Id = 77, Name = "GeForce GTX 1080 GAMING Z 8G", PartType = PartType.GPU, Manufacturer = MSI, Price = 705, SellPrice = 235, LevelUnlock = 13, LevelPercent = 40, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080, IsWaterCooled = false, RankingScore = 4778, VRAM = 8, MinCoreFrequency = 1722, BaseCoreFrequency = 1911, OverclockedCoreFrequency = 2030, MaxCoreFrequency = 2100, MinMemFrequency = -174, BaseMemFrequency = 1263, OverclockedMemFrequency = 2200, MaxMemFrequency = 2700, Length = 279, Wattage = 180, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 10.25, SingleGPUScore = 7395, DualGPUScore = 14245, DualGPUPerformanceIncrease = 1.9263015551048, OverclockedSingleGPUScore = 9525, OverclockedDualGPUScore = 16261 }; gpus.Add(GPU_GeForce_GTX_1080_GAMING_Z_8G);
            GPU GPU_GeForce_GTX_1080_GAMING__8G = new GPU() { Id = 78, Name = "GeForce GTX 1080 GAMING+ 8G", PartType = PartType.GPU, Manufacturer = MSI, Price = 690, SellPrice = 230, LevelUnlock = 13, LevelPercent = 25, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080, IsWaterCooled = false, RankingScore = 4698, VRAM = 8, MinCoreFrequency = 1342, BaseCoreFrequency = 1771, OverclockedCoreFrequency = 2030, MaxCoreFrequency = 2200, MinMemFrequency = 52, BaseMemFrequency = 1376, OverclockedMemFrequency = 2200, MaxMemFrequency = 2700, Length = 277, Wattage = 180, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 10.25, SingleGPUScore = 7239, DualGPUScore = 13281, DualGPUPerformanceIncrease = 1.83464566929134, OverclockedSingleGPUScore = 9525, OverclockedDualGPUScore = 16261 }; gpus.Add(GPU_GeForce_GTX_1080_GAMING__8G);
            GPU GPU_GeForce_GTX_1080_Founders_Edition = new GPU() { Id = 79, Name = "GeForce GTX 1080 Founders Edition", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 690, SellPrice = 230, LevelUnlock = 13, LevelPercent = 1, Lighting = Color.Green, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080, IsWaterCooled = false, RankingScore = 4474, VRAM = 8, MinCoreFrequency = 1266, BaseCoreFrequency = 1733, OverclockedCoreFrequency = 2030, MaxCoreFrequency = 2200, MinMemFrequency = -198, BaseMemFrequency = 1251, OverclockedMemFrequency = 2200, MaxMemFrequency = 2700, Length = 267, Wattage = 180, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 10, SingleGPUScore = 6896, DualGPUScore = 12837, DualGPUPerformanceIncrease = 1.86151392111369, OverclockedSingleGPUScore = 9525, OverclockedDualGPUScore = 16261 }; gpus.Add(GPU_GeForce_GTX_1080_Founders_Edition);
            GPU GPU_GeForce_GTX_1080_AMP_Extreme = new GPU() { Id = 80, Name = "GeForce GTX 1080 AMP Extreme", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 720, SellPrice = 240, LevelUnlock = 13, LevelPercent = 45, Lighting = Color.Red, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080, IsWaterCooled = false, RankingScore = 4891, VRAM = 8, MinCoreFrequency = 1722, BaseCoreFrequency = 1911, OverclockedCoreFrequency = 2030, MaxCoreFrequency = 2100, MinMemFrequency = 0, BaseMemFrequency = 1350, OverclockedMemFrequency = 2200, MaxMemFrequency = 2700, Length = 325, Wattage = 180, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 7563, DualGPUScore = 14347, DualGPUPerformanceIncrease = 1.89699854555071, OverclockedSingleGPUScore = 9525, OverclockedDualGPUScore = 16261 }; gpus.Add(GPU_GeForce_GTX_1080_AMP_Extreme);
            GPU GPU_GeForce_GTX_1080_Mini = new GPU() { Id = 81, Name = "GeForce GTX 1080 Mini", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 665, SellPrice = 222, LevelUnlock = 13, LevelPercent = 60, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080, IsWaterCooled = false, RankingScore = 4516, VRAM = 8, MinCoreFrequency = 1318, BaseCoreFrequency = 1759, OverclockedCoreFrequency = 2030, MaxCoreFrequency = 2200, MinMemFrequency = -198, BaseMemFrequency = 1251, OverclockedMemFrequency = 2200, MaxMemFrequency = 2700, Length = 211, Wattage = 180, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 6966, DualGPUScore = 13041, DualGPUPerformanceIncrease = 1.87209302325581, OverclockedSingleGPUScore = 9525, OverclockedDualGPUScore = 16261 }; gpus.Add(GPU_GeForce_GTX_1080_Mini);
            GPU GPU_GeForce_GTX_1080___Alphacool_NexXxoS_GPX_M10 = new GPU() { Id = 82, Name = "GeForce GTX 1080 | Alphacool NexXxoS GPX M10", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 805, SellPrice = 268, LevelUnlock = 23, LevelPercent = 15, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080, IsWaterCooled = true, RankingScore = 4474, VRAM = 8, MinCoreFrequency = 1066, BaseCoreFrequency = 1733, OverclockedCoreFrequency = 2129, MaxCoreFrequency = 2400, MinMemFrequency = -398, BaseMemFrequency = 1251, OverclockedMemFrequency = 2308, MaxMemFrequency = 2900, Length = 258, Wattage = 180, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 8.6, SingleGPUScore = 6896, DualGPUScore = 12837, DualGPUPerformanceIncrease = 1.86151392111369, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1080___Alphacool_NexXxoS_GPX_M10);
            GPU GPU_GeForce_GTX_1080___EKWB_EK_FC_Acetal = new GPU() { Id = 83, Name = "GeForce GTX 1080 | EKWB EK-FC Acetal", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 805, SellPrice = 268, LevelUnlock = 16, LevelPercent = 90, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080, IsWaterCooled = true, RankingScore = 4474, VRAM = 8, MinCoreFrequency = 1066, BaseCoreFrequency = 1733, OverclockedCoreFrequency = 2129, MaxCoreFrequency = 2400, MinMemFrequency = -398, BaseMemFrequency = 1251, OverclockedMemFrequency = 2308, MaxMemFrequency = 2900, Length = 258, Wattage = 180, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 8.6, SingleGPUScore = 6896, DualGPUScore = 12837, DualGPUPerformanceIncrease = 1.86151392111369, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1080___EKWB_EK_FC_Acetal);
            GPU GPU_GeForce_GTX_1080___EKWB_EK_FC_Plexi = new GPU() { Id = 84, Name = "GeForce GTX 1080 | EKWB EK-FC Plexi", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 805, SellPrice = 268, LevelUnlock = 16, LevelPercent = 90, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080, IsWaterCooled = true, RankingScore = 4474, VRAM = 8, MinCoreFrequency = 1066, BaseCoreFrequency = 1733, OverclockedCoreFrequency = 2129, MaxCoreFrequency = 2400, MinMemFrequency = -398, BaseMemFrequency = 1251, OverclockedMemFrequency = 2308, MaxMemFrequency = 2900, Length = 258, Wattage = 180, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 8.6, SingleGPUScore = 6896, DualGPUScore = 12837, DualGPUPerformanceIncrease = 1.86151392111369, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1080___EKWB_EK_FC_Plexi);
            GPU GPU_GeForce_GTX_1080___EKWB_EK_FC_Plexi_RGB = new GPU() { Id = 85, Name = "GeForce GTX 1080 | EKWB EK-FC Plexi RGB", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 855, SellPrice = 285, LevelUnlock = 23, LevelPercent = 15, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080, IsWaterCooled = true, RankingScore = 4474, VRAM = 8, MinCoreFrequency = 1066, BaseCoreFrequency = 1733, OverclockedCoreFrequency = 2129, MaxCoreFrequency = 2400, MinMemFrequency = -398, BaseMemFrequency = 1251, OverclockedMemFrequency = 2308, MaxMemFrequency = 2900, Length = 258, Wattage = 180, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 8.1, SingleGPUScore = 6896, DualGPUScore = 12837, DualGPUPerformanceIncrease = 1.86151392111369, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1080___EKWB_EK_FC_Plexi_RGB);
            GPU GPU_ROG_Strix_GeForce_GTX_1080_Ti_OC_Edition = new GPU() { Id = 86, Name = "ROG Strix GeForce GTX 1080 Ti OC Edition", PartType = PartType.GPU, Manufacturer = ASUS, Price = 870, SellPrice = 290, LevelUnlock = 21, LevelPercent = 40, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080_Ti, IsWaterCooled = false, RankingScore = 5651, VRAM = 11, MinCoreFrequency = 1166, BaseCoreFrequency = 1683, OverclockedCoreFrequency = 2012, MaxCoreFrequency = 2200, MinMemFrequency = -48, BaseMemFrequency = 1376, OverclockedMemFrequency = 2300, MaxMemFrequency = 2800, Length = 298, Wattage = 250, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10, SingleGPUScore = 8696, DualGPUScore = 16945, DualGPUPerformanceIncrease = 1.94859705611776, OverclockedSingleGPUScore = 12546, OverclockedDualGPUScore = 25563 }; gpus.Add(GPU_ROG_Strix_GeForce_GTX_1080_Ti_OC_Edition);
            GPU GPU_GeForce_GTX_1080_Ti_GAMING = new GPU() { Id = 87, Name = "GeForce GTX 1080 Ti GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 825, SellPrice = 275, LevelUnlock = 21, LevelPercent = 1, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080_Ti, IsWaterCooled = false, RankingScore = 5394, VRAM = 11, MinCoreFrequency = 864, BaseCoreFrequency = 1582, OverclockedCoreFrequency = 2012, MaxCoreFrequency = 2300, MinMemFrequency = -48, BaseMemFrequency = 1376, OverclockedMemFrequency = 2300, MaxMemFrequency = 2800, Length = 270, Wattage = 250, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 10, SingleGPUScore = 8266, DualGPUScore = 16213, DualGPUPerformanceIncrease = 1.96140817807888, OverclockedSingleGPUScore = 12546, OverclockedDualGPUScore = 25563 }; gpus.Add(GPU_GeForce_GTX_1080_Ti_GAMING);
            GPU GPU_GeForce_GTX_1080_Ti_K_NGP_N_GAMING = new GPU() { Id = 88, Name = "GeForce GTX 1080 Ti K|NGP|N GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 875, SellPrice = 292, LevelUnlock = 21, LevelPercent = 90, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080_Ti, IsWaterCooled = false, RankingScore = 5682, VRAM = 11, MinCoreFrequency = 1190, BaseCoreFrequency = 1695, OverclockedCoreFrequency = 2012, MaxCoreFrequency = 2200, MinMemFrequency = -48, BaseMemFrequency = 1376, OverclockedMemFrequency = 2300, MaxMemFrequency = 2800, Length = 300, Wattage = 250, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10, SingleGPUScore = 8747, DualGPUScore = 17032, DualGPUPerformanceIncrease = 1.94718189093403, OverclockedSingleGPUScore = 12546, OverclockedDualGPUScore = 25563 }; gpus.Add(GPU_GeForce_GTX_1080_Ti_K_NGP_N_GAMING);
            GPU GPU_AORUS_GeForce_GTX_1080_Ti_11G = new GPU() { Id = 89, Name = "AORUS GeForce GTX 1080 Ti 11G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 880, SellPrice = 293, LevelUnlock = 21, LevelPercent = 15, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080_Ti, IsWaterCooled = false, RankingScore = 5715, VRAM = 11, MinCoreFrequency = 1216, BaseCoreFrequency = 1708, OverclockedCoreFrequency = 2012, MaxCoreFrequency = 2200, MinMemFrequency = -48, BaseMemFrequency = 1376, OverclockedMemFrequency = 2300, MaxMemFrequency = 2800, Length = 293, Wattage = 250, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10, SingleGPUScore = 8803, DualGPUScore = 17127, DualGPUPerformanceIncrease = 1.94558673179598, OverclockedSingleGPUScore = 12546, OverclockedDualGPUScore = 25563 }; gpus.Add(GPU_AORUS_GeForce_GTX_1080_Ti_11G);
            GPU GPU_AORUS_GeForce_GTX_1080_Ti_Xtreme_Edition_11G = new GPU() { Id = 90, Name = "AORUS GeForce GTX 1080 Ti Xtreme Edition 11G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 910, SellPrice = 303, LevelUnlock = 21, LevelPercent = 80, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080_Ti, IsWaterCooled = false, RankingScore = 5904, VRAM = 11, MinCoreFrequency = 1292, BaseCoreFrequency = 1746, OverclockedCoreFrequency = 2012, MaxCoreFrequency = 2200, MinMemFrequency = 62, BaseMemFrequency = 1431, OverclockedMemFrequency = 2300, MaxMemFrequency = 2800, Length = 293, Wattage = 250, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10, SingleGPUScore = 9110, DualGPUScore = 17777, DualGPUPerformanceIncrease = 1.95137211855104, OverclockedSingleGPUScore = 12546, OverclockedDualGPUScore = 25563 }; gpus.Add(GPU_AORUS_GeForce_GTX_1080_Ti_Xtreme_Edition_11G);
            GPU GPU_GeForce_GTX_1080_Ti_GAMING_11G = new GPU() { Id = 91, Name = "GeForce GTX 1080 Ti GAMING 11G", PartType = PartType.GPU, Manufacturer = MSI, Price = 805, SellPrice = 268, LevelUnlock = 21, LevelPercent = 30, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080_Ti, IsWaterCooled = false, RankingScore = 5492, VRAM = 11, MinCoreFrequency = 940, BaseCoreFrequency = 1620, OverclockedCoreFrequency = 2012, MaxCoreFrequency = 2300, MinMemFrequency = -46, BaseMemFrequency = 1377, OverclockedMemFrequency = 2300, MaxMemFrequency = 2800, Length = 290, Wattage = 250, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10, SingleGPUScore = 8431, DualGPUScore = 16495, DualGPUPerformanceIncrease = 1.95647016961215, OverclockedSingleGPUScore = 12546, OverclockedDualGPUScore = 25563 }; gpus.Add(GPU_GeForce_GTX_1080_Ti_GAMING_11G);
            GPU GPU_GeForce_GTX_1080_Ti_GAMING_X_11G = new GPU() { Id = 92, Name = "GeForce GTX 1080 Ti GAMING X 11G", PartType = PartType.GPU, Manufacturer = MSI, Price = 830, SellPrice = 277, LevelUnlock = 21, LevelPercent = 60, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080_Ti, IsWaterCooled = false, RankingScore = 5675, VRAM = 11, MinCoreFrequency = 1166, BaseCoreFrequency = 1683, OverclockedCoreFrequency = 2012, MaxCoreFrequency = 2200, MinMemFrequency = -20, BaseMemFrequency = 1390, OverclockedMemFrequency = 2300, MaxMemFrequency = 2800, Length = 290, Wattage = 250, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10, SingleGPUScore = 8733, DualGPUScore = 17041, DualGPUPerformanceIncrease = 1.95133402038246, OverclockedSingleGPUScore = 12546, OverclockedDualGPUScore = 25563 }; gpus.Add(GPU_GeForce_GTX_1080_Ti_GAMING_X_11G);
            GPU GPU_GeForce_GTX_1080_Ti_Founders_Edition = new GPU() { Id = 93, Name = "GeForce GTX 1080 Ti Founders Edition", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 870, SellPrice = 290, LevelUnlock = 21, LevelPercent = 1, Lighting = Color.Green, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080_Ti, IsWaterCooled = false, RankingScore = 5394, VRAM = 11, MinCoreFrequency = 864, BaseCoreFrequency = 1582, OverclockedCoreFrequency = 2012, MaxCoreFrequency = 2300, MinMemFrequency = -48, BaseMemFrequency = 1376, OverclockedMemFrequency = 2300, MaxMemFrequency = 2800, Length = 267, Wattage = 250, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 9.5, SingleGPUScore = 8266, DualGPUScore = 16213, DualGPUPerformanceIncrease = 1.96140817807888, OverclockedSingleGPUScore = 12546, OverclockedDualGPUScore = 25563 }; gpus.Add(GPU_GeForce_GTX_1080_Ti_Founders_Edition);
            GPU GPU_GeForce_GTX_1080_Ti_AMP_Extreme = new GPU() { Id = 94, Name = "GeForce GTX 1080 Ti AMP Extreme", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 910, SellPrice = 303, LevelUnlock = 21, LevelPercent = 70, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080_Ti, IsWaterCooled = false, RankingScore = 5885, VRAM = 11, MinCoreFrequency = 1318, BaseCoreFrequency = 1759, OverclockedCoreFrequency = 2012, MaxCoreFrequency = 2200, MinMemFrequency = 0, BaseMemFrequency = 1400, OverclockedMemFrequency = 2300, MaxMemFrequency = 2800, Length = 325, Wattage = 250, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10, SingleGPUScore = 9084, DualGPUScore = 17660, DualGPUPerformanceIncrease = 1.94407749889916, OverclockedSingleGPUScore = 12546, OverclockedDualGPUScore = 25563 }; gpus.Add(GPU_GeForce_GTX_1080_Ti_AMP_Extreme);
            GPU GPU_GeForce_GTX_1080_Ti_Mini = new GPU() { Id = 95, Name = "GeForce GTX 1080 Ti Mini", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 840, SellPrice = 280, LevelUnlock = 21, LevelPercent = 20, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080_Ti, IsWaterCooled = false, RankingScore = 5491, VRAM = 11, MinCoreFrequency = 940, BaseCoreFrequency = 1620, OverclockedCoreFrequency = 2012, MaxCoreFrequency = 2300, MinMemFrequency = -48, BaseMemFrequency = 1376, OverclockedMemFrequency = 2300, MaxMemFrequency = 2800, Length = 211, Wattage = 250, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10, SingleGPUScore = 8428, DualGPUScore = 16489, DualGPUPerformanceIncrease = 1.95645467489321, OverclockedSingleGPUScore = 12546, OverclockedDualGPUScore = 25563 }; gpus.Add(GPU_GeForce_GTX_1080_Ti_Mini);
            GPU GPU_GeForce_GTX_1080_Ti___EKWB_EK_FC_Acetal = new GPU() { Id = 96, Name = "GeForce GTX 1080 Ti | EKWB EK-FC Acetal", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 955, SellPrice = 318, LevelUnlock = 21, LevelPercent = 90, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080_Ti, IsWaterCooled = true, RankingScore = 5394, VRAM = 11, MinCoreFrequency = 764, BaseCoreFrequency = 1582, OverclockedCoreFrequency = 2099, MaxCoreFrequency = 2400, MinMemFrequency = -248, BaseMemFrequency = 1376, OverclockedMemFrequency = 2399, MaxMemFrequency = 3000, Length = 258, Wattage = 250, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 8.7, SingleGPUScore = 8266, DualGPUScore = 16213, DualGPUPerformanceIncrease = 1.96140817807888, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1080_Ti___EKWB_EK_FC_Acetal);
            GPU GPU_GeForce_GTX_1080_Ti___EKWB_EK_FC_Plexi = new GPU() { Id = 97, Name = "GeForce GTX 1080 Ti | EKWB EK-FC Plexi", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 955, SellPrice = 318, LevelUnlock = 21, LevelPercent = 90, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080_Ti, IsWaterCooled = true, RankingScore = 5394, VRAM = 11, MinCoreFrequency = 764, BaseCoreFrequency = 1582, OverclockedCoreFrequency = 2099, MaxCoreFrequency = 2400, MinMemFrequency = -248, BaseMemFrequency = 1376, OverclockedMemFrequency = 2399, MaxMemFrequency = 3000, Length = 258, Wattage = 250, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 8.7, SingleGPUScore = 8266, DualGPUScore = 16213, DualGPUPerformanceIncrease = 1.96140817807888, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1080_Ti___EKWB_EK_FC_Plexi);
            GPU GPU_GeForce_GTX_1080_Ti___EKWB_EK_FC_Plexi_RGB = new GPU() { Id = 98, Name = "GeForce GTX 1080 Ti | EKWB EK-FC Plexi RGB", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 1005, SellPrice = 335, LevelUnlock = 23, LevelPercent = 75, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1080_Ti, IsWaterCooled = true, RankingScore = 5394, VRAM = 11, MinCoreFrequency = 764, BaseCoreFrequency = 1582, OverclockedCoreFrequency = 2099, MaxCoreFrequency = 2400, MinMemFrequency = -248, BaseMemFrequency = 1376, OverclockedMemFrequency = 2399, MaxMemFrequency = 3000, Length = 258, Wattage = 250, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 8.2, SingleGPUScore = 8266, DualGPUScore = 16213, DualGPUPerformanceIncrease = 1.96140817807888, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1080_Ti___EKWB_EK_FC_Plexi_RGB);
            GPU GPU_GeForce_GTX_1650_XC_ULTRA_BLACK_GAMING = new GPU() { Id = 99, Name = "GeForce GTX 1650 XC ULTRA BLACK GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 210, SellPrice = 70, LevelUnlock = 29, LevelPercent = 1, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1650, IsWaterCooled = false, RankingScore = 1794, VRAM = 4, MinCoreFrequency = 1230, BaseCoreFrequency = 1665, OverclockedCoreFrequency = 1900, MaxCoreFrequency = 2100, MinMemFrequency = 1600, BaseMemFrequency = 2000, OverclockedMemFrequency = 2200, MaxMemFrequency = 2400, Length = 202, Wattage = 75, MultiGPU = null, SlotSize = 3, PowerConnectors = new List<PowerConnector>() { Six_Pin }, ScoreToValueRatio = 13, SingleGPUScore = 2730, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 3380, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1650_XC_ULTRA_BLACK_GAMING);
            GPU GPU_GeForce_GTX_1660_SUPER_SC_ULTRA_BLACK_GAMING = new GPU() { Id = 100, Name = "GeForce GTX 1660 SUPER SC ULTRA BLACK GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 420, SellPrice = 140, LevelUnlock = 29, LevelPercent = 1, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1660_Super, IsWaterCooled = false, RankingScore = 3379, VRAM = 6, MinCoreFrequency = 1370, BaseCoreFrequency = 1785, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2200, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1900, MaxMemFrequency = 2000, Length = 202, Wattage = 125, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 12.5, SingleGPUScore = 5239, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 6428, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1660_SUPER_SC_ULTRA_BLACK_GAMING);
            GPU GPU_GeForce_GTX_1660_Ti_XC = new GPU() { Id = 101, Name = "GeForce GTX 1660 Ti XC", PartType = PartType.GPU, Manufacturer = EVGA, Price = 475, SellPrice = 158, LevelUnlock = 29, LevelPercent = 10, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1660_Ti, IsWaterCooled = false, RankingScore = 3864, VRAM = 6, MinCoreFrequency = 1690, BaseCoreFrequency = 1845, OverclockedCoreFrequency = 1900, MaxCoreFrequency = 2000, MinMemFrequency = 700, BaseMemFrequency = 1500, OverclockedMemFrequency = 2000, MaxMemFrequency = 2300, Length = 190, Wattage = 120, MultiGPU = null, SlotSize = 3, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 12.5, SingleGPUScore = 5931, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 6277, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1660_Ti_XC);
            GPU GPU_GeForce_GTX_1660_Ti_XC_ULTRA_GAMING = new GPU() { Id = 102, Name = "GeForce GTX 1660 Ti XC ULTRA GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 480, SellPrice = 160, LevelUnlock = 29, LevelPercent = 10, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1660_Ti, IsWaterCooled = false, RankingScore = 3898, VRAM = 6, MinCoreFrequency = 1720, BaseCoreFrequency = 1860, OverclockedCoreFrequency = 1900, MaxCoreFrequency = 2000, MinMemFrequency = 700, BaseMemFrequency = 1500, OverclockedMemFrequency = 2000, MaxMemFrequency = 2300, Length = 268, Wattage = 120, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 12.5, SingleGPUScore = 5985, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 6277, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1660_Ti_XC_ULTRA_GAMING);
            GPU GPU_GeForce_GTX_1660_Ti_AMP = new GPU() { Id = 103, Name = "GeForce GTX 1660 Ti AMP", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 540, SellPrice = 180, LevelUnlock = 29, LevelPercent = 1, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_GTX_1660_Ti, IsWaterCooled = false, RankingScore = 3898, VRAM = 6, MinCoreFrequency = 1720, BaseCoreFrequency = 1860, OverclockedCoreFrequency = 1900, MaxCoreFrequency = 2000, MinMemFrequency = 700, BaseMemFrequency = 1500, OverclockedMemFrequency = 2000, MaxMemFrequency = 2300, Length = 210, Wattage = 120, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.1, SingleGPUScore = 5985, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 6277, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_GTX_1660_Ti_AMP);
            GPU GPU_iGame_GeForce_RTX_2060_Ultra = new GPU() { Id = 104, Name = "iGame GeForce RTX 2060 Ultra", PartType = PartType.GPU, Manufacturer = Colorful, Price = 595, SellPrice = 198, LevelUnlock = 22, LevelPercent = 80, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = Geforce_RTX_2060, IsWaterCooled = false, RankingScore = 4435, VRAM = 6, MinCoreFrequency = 1520, BaseCoreFrequency = 1710, OverclockedCoreFrequency = 1800, MaxCoreFrequency = 1900, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1850, MaxMemFrequency = 2000, Length = 310, Wattage = 160, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 6837, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 7247, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_iGame_GeForce_RTX_2060_Ultra);
            GPU GPU_iGame_GeForce_RTX_2060_Ultra_OC_V = new GPU() { Id = 105, Name = "iGame GeForce RTX 2060 Ultra OC-V", PartType = PartType.GPU, Manufacturer = Colorful, Price = 605, SellPrice = 202, LevelUnlock = 22, LevelPercent = 80, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = Geforce_RTX_2060, IsWaterCooled = false, RankingScore = 4527, VRAM = 6, MinCoreFrequency = 1610, BaseCoreFrequency = 1755, OverclockedCoreFrequency = 1800, MaxCoreFrequency = 1900, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1850, MaxMemFrequency = 2000, Length = 315, Wattage = 160, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 6984, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 7247, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_iGame_GeForce_RTX_2060_Ultra_OC_V);
            GPU GPU_GeForce_RTX_2060_SC_ULTRA_GAMING = new GPU() { Id = 106, Name = "GeForce RTX 2060 SC ULTRA GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 605, SellPrice = 202, LevelUnlock = 22, LevelPercent = 1, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = Geforce_RTX_2060, IsWaterCooled = false, RankingScore = 4527, VRAM = 6, MinCoreFrequency = 1610, BaseCoreFrequency = 1755, OverclockedCoreFrequency = 1800, MaxCoreFrequency = 1900, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1850, MaxMemFrequency = 2000, Length = 268, Wattage = 160, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 6984, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 7247, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_2060_SC_ULTRA_GAMING);
            GPU GPU_GeForce_RTX_2060_Founders_Edition = new GPU() { Id = 107, Name = "GeForce RTX 2060 Founders Edition", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 590, SellPrice = 197, LevelUnlock = 22, LevelPercent = 1, Lighting = Color.Green, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = Geforce_RTX_2060, IsWaterCooled = false, RankingScore = 4374, VRAM = 6, MinCoreFrequency = 1460, BaseCoreFrequency = 1680, OverclockedCoreFrequency = 1800, MaxCoreFrequency = 1900, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1850, MaxMemFrequency = 2000, Length = 229, Wattage = 160, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.4, SingleGPUScore = 6738, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 7247, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_2060_Founders_Edition);
            GPU GPU_ROG_STRIX_GeForce_RTX_2060_SUPER_Series = new GPU() { Id = 108, Name = "ROG STRIX GeForce RTX 2060 SUPER Series", PartType = PartType.GPU, Manufacturer = ASUS, Price = 750, SellPrice = 250, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2060_Super, IsWaterCooled = false, RankingScore = 5382, VRAM = 8, MinCoreFrequency = 1620, BaseCoreFrequency = 1860, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2100, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1900, MaxMemFrequency = 2000, Length = 300, Wattage = 160, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11.1, SingleGPUScore = 8334, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 9076, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_ROG_STRIX_GeForce_RTX_2060_SUPER_Series);
            GPU GPU_iGame_GeForce_RTX_2060_SUPER_Ultra_V = new GPU() { Id = 109, Name = "iGame GeForce RTX 2060 SUPER Ultra-V", PartType = PartType.GPU, Manufacturer = Colorful, Price = 630, SellPrice = 210, LevelUnlock = 28, LevelPercent = 80, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2060_Super, IsWaterCooled = false, RankingScore = 4680, VRAM = 8, MinCoreFrequency = 1100, BaseCoreFrequency = 1650, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2200, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1900, MaxMemFrequency = 2000, Length = 310, Wattage = 160, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 7222, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 9076, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_iGame_GeForce_RTX_2060_SUPER_Ultra_V);
            GPU GPU_GeForce_RTX_2060_SUPER_XC_BLACK_GAMING = new GPU() { Id = 110, Name = "GeForce RTX 2060 SUPER XC BLACK GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 630, SellPrice = 210, LevelUnlock = 28, LevelPercent = 80, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2060_Super, IsWaterCooled = false, RankingScore = 4680, VRAM = 8, MinCoreFrequency = 1100, BaseCoreFrequency = 1650, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2200, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1900, MaxMemFrequency = 2000, Length = 270, Wattage = 160, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 7222, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 9076, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_2060_SUPER_XC_BLACK_GAMING);
            GPU GPU_AORUS_GeForce_RTX_2060_SUPER_8G = new GPU() { Id = 111, Name = "AORUS GeForce RTX 2060 SUPER 8G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 740, SellPrice = 247, LevelUnlock = 28, LevelPercent = 32, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2060_Super, IsWaterCooled = false, RankingScore = 5332, VRAM = 8, MinCoreFrequency = 1590, BaseCoreFrequency = 1845, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2100, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1900, MaxMemFrequency = 2000, Length = 290, Wattage = 160, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11.2, SingleGPUScore = 8255, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 9076, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_AORUS_GeForce_RTX_2060_SUPER_8G);
            GPU GPU_GeForce_RTX_2060_SUPER_WINDFORCE_OC_8G = new GPU() { Id = 112, Name = "GeForce RTX 2060 SUPER WINDFORCE OC 8G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 680, SellPrice = 227, LevelUnlock = 28, LevelPercent = 35, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2060_Super, IsWaterCooled = false, RankingScore = 4781, VRAM = 8, MinCoreFrequency = 1160, BaseCoreFrequency = 1680, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2200, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1900, MaxMemFrequency = 2000, Length = 265, Wattage = 160, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 10.9, SingleGPUScore = 7381, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 9076, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_2060_SUPER_WINDFORCE_OC_8G);
            GPU GPU_GeForce_RTX_2060_SUPER_ARMOR_OC = new GPU() { Id = 113, Name = "GeForce RTX 2060 SUPER ARMOR OC", PartType = PartType.GPU, Manufacturer = MSI, Price = 615, SellPrice = 205, LevelUnlock = 28, LevelPercent = 60, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2060_Super, IsWaterCooled = false, RankingScore = 4781, VRAM = 8, MinCoreFrequency = 1160, BaseCoreFrequency = 1680, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2200, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1900, MaxMemFrequency = 2000, Length = 250, Wattage = 160, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 12, SingleGPUScore = 7381, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 9076, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_2060_SUPER_ARMOR_OC);
            GPU GPU_GeForce_RTX_2060_SUPER_GAMING_X = new GPU() { Id = 114, Name = "GeForce RTX 2060 SUPER GAMING X", PartType = PartType.GPU, Manufacturer = MSI, Price = 620, SellPrice = 207, LevelUnlock = 28, LevelPercent = 60, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2060_Super, IsWaterCooled = false, RankingScore = 4831, VRAM = 8, MinCoreFrequency = 1190, BaseCoreFrequency = 1695, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2200, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1900, MaxMemFrequency = 2000, Length = 248, Wattage = 160, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 12, SingleGPUScore = 7460, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 9076, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_2060_SUPER_GAMING_X);
            GPU GPU_GeForce_RTX_2060_SUPER_Ventus_GP_OC = new GPU() { Id = 115, Name = "GeForce RTX 2060 SUPER Ventus GP OC", PartType = PartType.GPU, Manufacturer = MSI, Price = 610, SellPrice = 203, LevelUnlock = 28, LevelPercent = 60, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2060_Super, IsWaterCooled = false, RankingScore = 4731, VRAM = 8, MinCoreFrequency = 1130, BaseCoreFrequency = 1665, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2200, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1900, MaxMemFrequency = 2000, Length = 232, Wattage = 160, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 12, SingleGPUScore = 7301, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 9076, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_2060_SUPER_Ventus_GP_OC);
            GPU GPU_GAMING_GeForce_RTX_2060_SUPER_Amp_Extreme = new GPU() { Id = 116, Name = "GAMING GeForce RTX 2060 SUPER Amp Extreme", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 650, SellPrice = 217, LevelUnlock = 28, LevelPercent = 30, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2060_Super, IsWaterCooled = false, RankingScore = 4881, VRAM = 8, MinCoreFrequency = 1220, BaseCoreFrequency = 1710, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2200, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1900, MaxMemFrequency = 2000, Length = 308, Wattage = 160, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 11.6, SingleGPUScore = 7540, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 9076, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GAMING_GeForce_RTX_2060_SUPER_Amp_Extreme);
            GPU GPU_GAMING_GeForce_RTX_2060_SUPER_Mini = new GPU() { Id = 117, Name = "GAMING GeForce RTX 2060 SUPER Mini", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 615, SellPrice = 205, LevelUnlock = 28, LevelPercent = 30, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2060_Super, IsWaterCooled = false, RankingScore = 4781, VRAM = 8, MinCoreFrequency = 1160, BaseCoreFrequency = 1680, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2200, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1900, MaxMemFrequency = 2000, Length = 229, Wattage = 160, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 7381, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 9076, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GAMING_GeForce_RTX_2060_SUPER_Mini);
            GPU GPU_iGame_GeForce_RTX_2070_Ultra_OC_V = new GPU() { Id = 118, Name = "iGame GeForce RTX 2070 Ultra OC-V", PartType = PartType.GPU, Manufacturer = Colorful, Price = 710, SellPrice = 237, LevelUnlock = 23, LevelPercent = 80, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = Geforce_RTX_2070, IsWaterCooled = false, RankingScore = 5085, VRAM = 8, MinCoreFrequency = 1320, BaseCoreFrequency = 1710, OverclockedCoreFrequency = 1960, MaxCoreFrequency = 2100, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1900, MaxMemFrequency = 2000, Length = 315, Wattage = 175, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 7826, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 9212, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_iGame_GeForce_RTX_2070_Ultra_OC_V);
            GPU GPU_iGame_GeForce_RTX_2070_Vulcan_X_OC_V = new GPU() { Id = 119, Name = "iGame GeForce RTX 2070 Vulcan X OC-V", PartType = PartType.GPU, Manufacturer = Colorful, Price = 760, SellPrice = 253, LevelUnlock = 23, LevelPercent = 80, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = Geforce_RTX_2070, IsWaterCooled = false, RankingScore = 5425, VRAM = 8, MinCoreFrequency = 1530, BaseCoreFrequency = 1815, OverclockedCoreFrequency = 1960, MaxCoreFrequency = 2100, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1900, MaxMemFrequency = 2000, Length = 318, Wattage = 175, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 8372, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 9212, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_iGame_GeForce_RTX_2070_Vulcan_X_OC_V);
            GPU GPU_GeForce_RTX_2070_FTW3_ULTRA_GAMING = new GPU() { Id = 120, Name = "GeForce RTX 2070 FTW3 ULTRA GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 825, SellPrice = 275, LevelUnlock = 23, LevelPercent = 40, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = Geforce_RTX_2070, IsWaterCooled = false, RankingScore = 5425, VRAM = 8, MinCoreFrequency = 1530, BaseCoreFrequency = 1815, OverclockedCoreFrequency = 1960, MaxCoreFrequency = 2100, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1900, MaxMemFrequency = 2000, Length = 302, Wattage = 175, MultiGPU = null, SlotSize = 3, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.1, SingleGPUScore = 8372, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 9212, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_2070_FTW3_ULTRA_GAMING);
            GPU GPU_AORUS_GeForce_RTX_2070_XTREME_8G = new GPU() { Id = 121, Name = "AORUS GeForce RTX 2070 XTREME 8G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 830, SellPrice = 277, LevelUnlock = 23, LevelPercent = 80, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = Geforce_RTX_2070, IsWaterCooled = false, RankingScore = 5433, VRAM = 8, MinCoreFrequency = 1530, BaseCoreFrequency = 1815, OverclockedCoreFrequency = 1960, MaxCoreFrequency = 2100, MinMemFrequency = 1536, BaseMemFrequency = 1768, OverclockedMemFrequency = 1900, MaxMemFrequency = 2000, Length = 290, Wattage = 175, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.1, SingleGPUScore = 8382, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 9212, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_AORUS_GeForce_RTX_2070_XTREME_8G);
            GPU GPU_GeForce_RTX_2070_Founders_Edition = new GPU() { Id = 122, Name = "GeForce RTX 2070 Founders Edition", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 730, SellPrice = 243, LevelUnlock = 23, LevelPercent = 1, Lighting = Color.Green, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = Geforce_RTX_2070, IsWaterCooled = false, RankingScore = 4794, VRAM = 8, MinCoreFrequency = 1040, BaseCoreFrequency = 1620, OverclockedCoreFrequency = 1960, MaxCoreFrequency = 2200, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1900, MaxMemFrequency = 2000, Length = 229, Wattage = 175, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 10.1, SingleGPUScore = 7359, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 9212, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_2070_Founders_Edition);
            GPU GPU_ROG_STRIX_GeForce_RTX_2070_SUPER_Series = new GPU() { Id = 123, Name = "ROG STRIX GeForce RTX 2070 SUPER Series", PartType = PartType.GPU, Manufacturer = ASUS, Price = 950, SellPrice = 317, LevelUnlock = 28, LevelPercent = 30, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2070_Super, IsWaterCooled = false, RankingScore = 6365, VRAM = 8, MinCoreFrequency = 1770, BaseCoreFrequency = 1935, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2100, MinMemFrequency = 1400, BaseMemFrequency = 1750, OverclockedMemFrequency = 1950, MaxMemFrequency = 2100, Length = 300, Wattage = 215, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 9956, DualGPUScore = 16949, DualGPUPerformanceIncrease = 1.70239051828043, OverclockedSingleGPUScore = 10329, OverclockedDualGPUScore = 18498 }; gpus.Add(GPU_ROG_STRIX_GeForce_RTX_2070_SUPER_Series);
            GPU GPU_iGame_GeForce_RTX_2070_SUPER_Vulcan_OC_V = new GPU() { Id = 124, Name = "iGame GeForce RTX 2070 SUPER Vulcan OC-V", PartType = PartType.GPU, Manufacturer = Colorful, Price = 845, SellPrice = 282, LevelUnlock = 28, LevelPercent = 80, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2070_Super, IsWaterCooled = false, RankingScore = 5930, VRAM = 8, MinCoreFrequency = 1530, BaseCoreFrequency = 1815, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2100, MinMemFrequency = 1400, BaseMemFrequency = 1750, OverclockedMemFrequency = 1950, MaxMemFrequency = 2100, Length = 318, Wattage = 215, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 9271, DualGPUScore = 14054, DualGPUPerformanceIncrease = 1.5159098263402, OverclockedSingleGPUScore = 10329, OverclockedDualGPUScore = 18498 }; gpus.Add(GPU_iGame_GeForce_RTX_2070_SUPER_Vulcan_OC_V);
            GPU GPU_iGame_GeForce_RTX_2070_SUPER_Vulcan_X_OC_V = new GPU() { Id = 125, Name = "iGame GeForce RTX 2070 SUPER Vulcan X OC-V", PartType = PartType.GPU, Manufacturer = Colorful, Price = 890, SellPrice = 297, LevelUnlock = 28, LevelPercent = 80, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2070_Super, IsWaterCooled = false, RankingScore = 6257, VRAM = 8, MinCoreFrequency = 1710, BaseCoreFrequency = 1905, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2100, MinMemFrequency = 1400, BaseMemFrequency = 1750, OverclockedMemFrequency = 1950, MaxMemFrequency = 2100, Length = 318, Wattage = 215, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 9785, DualGPUScore = 16230, DualGPUPerformanceIncrease = 1.65866121614716, OverclockedSingleGPUScore = 10329, OverclockedDualGPUScore = 18498 }; gpus.Add(GPU_iGame_GeForce_RTX_2070_SUPER_Vulcan_X_OC_V);
            GPU GPU_GeForce_RTX_2070_SUPER_FTW3_ULTRA_ = new GPU() { Id = 126, Name = "GeForce RTX 2070 SUPER FTW3 ULTRA+", PartType = PartType.GPU, Manufacturer = EVGA, Price = 805, SellPrice = 268, LevelUnlock = 28, LevelPercent = 50, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2070_Super, IsWaterCooled = false, RankingScore = 5930, VRAM = 8, MinCoreFrequency = 1530, BaseCoreFrequency = 1815, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2100, MinMemFrequency = 1400, BaseMemFrequency = 1750, OverclockedMemFrequency = 1950, MaxMemFrequency = 2100, Length = 302, Wattage = 215, MultiGPU = SLI, SlotSize = 3, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 9271, DualGPUScore = 14054, DualGPUPerformanceIncrease = 1.5159098263402, OverclockedSingleGPUScore = 10329, OverclockedDualGPUScore = 18498 }; gpus.Add(GPU_GeForce_RTX_2070_SUPER_FTW3_ULTRA_);
            GPU GPU_GeForce_RTX_2070_SUPER_XC_ULTRA = new GPU() { Id = 127, Name = "GeForce RTX 2070 SUPER XC ULTRA", PartType = PartType.GPU, Manufacturer = EVGA, Price = 840, SellPrice = 280, LevelUnlock = 28, LevelPercent = 80, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2070_Super, IsWaterCooled = false, RankingScore = 5876, VRAM = 8, MinCoreFrequency = 1400, BaseCoreFrequency = 1800, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2200, MinMemFrequency = 1400, BaseMemFrequency = 1750, OverclockedMemFrequency = 1950, MaxMemFrequency = 2100, Length = 269, Wattage = 215, MultiGPU = SLI, SlotSize = 3, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 10.9, SingleGPUScore = 9186, DualGPUScore = 13687, DualGPUPerformanceIncrease = 1.4899847594165, OverclockedSingleGPUScore = 10329, OverclockedDualGPUScore = 18498 }; gpus.Add(GPU_GeForce_RTX_2070_SUPER_XC_ULTRA);
            GPU GPU_AORUS_GeForce_RTX_2070_SUPER_8G = new GPU() { Id = 128, Name = "AORUS GeForce RTX 2070 SUPER 8G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 950, SellPrice = 317, LevelUnlock = 28, LevelPercent = 45, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2070_Super, IsWaterCooled = false, RankingScore = 6257, VRAM = 8, MinCoreFrequency = 1710, BaseCoreFrequency = 1905, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2100, MinMemFrequency = 1400, BaseMemFrequency = 1750, OverclockedMemFrequency = 1950, MaxMemFrequency = 2100, Length = 290, Wattage = 215, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.3, SingleGPUScore = 9785, DualGPUScore = 16230, DualGPUPerformanceIncrease = 1.65866121614716, OverclockedSingleGPUScore = 10329, OverclockedDualGPUScore = 18498 }; gpus.Add(GPU_AORUS_GeForce_RTX_2070_SUPER_8G);
            GPU GPU_GeForce_RTX_2070_SUPER_GAMING_OC_WHITE_8G = new GPU() { Id = 129, Name = "GeForce RTX 2070 SUPER GAMING OC WHITE 8G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 950, SellPrice = 317, LevelUnlock = 28, LevelPercent = 30, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2070_Super, IsWaterCooled = false, RankingScore = 5930, VRAM = 8, MinCoreFrequency = 1530, BaseCoreFrequency = 1815, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2100, MinMemFrequency = 1400, BaseMemFrequency = 1750, OverclockedMemFrequency = 1950, MaxMemFrequency = 2100, Length = 287, Wattage = 215, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 9.8, SingleGPUScore = 9271, DualGPUScore = 14054, DualGPUPerformanceIncrease = 1.5159098263402, OverclockedSingleGPUScore = 10329, OverclockedDualGPUScore = 18498 }; gpus.Add(GPU_GeForce_RTX_2070_SUPER_GAMING_OC_WHITE_8G);
            GPU GPU_GeForce_RTX_2070_SUPER_GAMING_X = new GPU() { Id = 130, Name = "GeForce RTX 2070 SUPER GAMING X", PartType = PartType.GPU, Manufacturer = MSI, Price = 800, SellPrice = 267, LevelUnlock = 28, LevelPercent = 60, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2070_Super, IsWaterCooled = false, RankingScore = 5876, VRAM = 8, MinCoreFrequency = 1400, BaseCoreFrequency = 1800, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2200, MinMemFrequency = 1400, BaseMemFrequency = 1750, OverclockedMemFrequency = 1950, MaxMemFrequency = 2100, Length = 297, Wattage = 215, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 9186, DualGPUScore = 13687, DualGPUPerformanceIncrease = 1.4899847594165, OverclockedSingleGPUScore = 10329, OverclockedDualGPUScore = 18498 }; gpus.Add(GPU_GeForce_RTX_2070_SUPER_GAMING_X);
            GPU GPU_GeForce_RTX_2070_SUPER_GAMING_X_Trio = new GPU() { Id = 131, Name = "GeForce RTX 2070 SUPER GAMING X Trio", PartType = PartType.GPU, Manufacturer = MSI, Price = 800, SellPrice = 267, LevelUnlock = 28, LevelPercent = 60, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2070_Super, IsWaterCooled = false, RankingScore = 5876, VRAM = 8, MinCoreFrequency = 1400, BaseCoreFrequency = 1800, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2200, MinMemFrequency = 1400, BaseMemFrequency = 1750, OverclockedMemFrequency = 1950, MaxMemFrequency = 2100, Length = 328, Wattage = 215, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 9186, DualGPUScore = 13687, DualGPUPerformanceIncrease = 1.4899847594165, OverclockedSingleGPUScore = 10329, OverclockedDualGPUScore = 18498 }; gpus.Add(GPU_GeForce_RTX_2070_SUPER_GAMING_X_Trio);
            GPU GPU_GeForce_RTX_2070_SUPER_Ventus_GP_OC = new GPU() { Id = 132, Name = "GeForce RTX 2070 SUPER Ventus GP OC", PartType = PartType.GPU, Manufacturer = MSI, Price = 790, SellPrice = 263, LevelUnlock = 28, LevelPercent = 60, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2070_Super, IsWaterCooled = false, RankingScore = 5822, VRAM = 8, MinCoreFrequency = 1370, BaseCoreFrequency = 1785, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2200, MinMemFrequency = 1400, BaseMemFrequency = 1750, OverclockedMemFrequency = 1950, MaxMemFrequency = 2100, Length = 258, Wattage = 215, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 9100, DualGPUScore = 13320, DualGPUPerformanceIncrease = 1.46373626373626, OverclockedSingleGPUScore = 10329, OverclockedDualGPUScore = 18498 }; gpus.Add(GPU_GeForce_RTX_2070_SUPER_Ventus_GP_OC);
            GPU GPU_GAMING_GeForce_RTX_2070_SUPER_Mini = new GPU() { Id = 133, Name = "GAMING GeForce RTX 2070 SUPER Mini", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 740, SellPrice = 247, LevelUnlock = 28, LevelPercent = 30, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2070_Super, IsWaterCooled = false, RankingScore = 5441, VRAM = 8, MinCoreFrequency = 1160, BaseCoreFrequency = 1680, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2200, MinMemFrequency = 1400, BaseMemFrequency = 1750, OverclockedMemFrequency = 1950, MaxMemFrequency = 2100, Length = 229, Wattage = 215, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 8501, DualGPUScore = 10705, DualGPUPerformanceIncrease = 1.25926361604517, OverclockedSingleGPUScore = 10329, OverclockedDualGPUScore = 18498 }; gpus.Add(GPU_GAMING_GeForce_RTX_2070_SUPER_Mini);
            GPU GPU_iGame_GeForce_RTX_2080_Advanced_V = new GPU() { Id = 134, Name = "iGame GeForce RTX 2080 Advanced-V", PartType = PartType.GPU, Manufacturer = Colorful, Price = 860, SellPrice = 287, LevelUnlock = 25, LevelPercent = 60, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080, IsWaterCooled = false, RankingScore = 6096, VRAM = 8, MinCoreFrequency = 1320, BaseCoreFrequency = 1710, OverclockedCoreFrequency = 1960, MaxCoreFrequency = 2100, MinMemFrequency = 1300, BaseMemFrequency = 1750, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 315, Wattage = 215, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 9459, DualGPUScore = 16411, DualGPUPerformanceIncrease = 1.73496141241146, OverclockedSingleGPUScore = 11222, OverclockedDualGPUScore = 20300 }; gpus.Add(GPU_iGame_GeForce_RTX_2080_Advanced_V);
            GPU GPU_GeForce_RTX_2080_FTW3_ULTRA_GAMING = new GPU() { Id = 135, Name = "GeForce RTX 2080 FTW3 ULTRA GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 1030, SellPrice = 343, LevelUnlock = 25, LevelPercent = 40, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080, IsWaterCooled = false, RankingScore = 6604, VRAM = 8, MinCoreFrequency = 1620, BaseCoreFrequency = 1860, OverclockedCoreFrequency = 1960, MaxCoreFrequency = 2100, MinMemFrequency = 1300, BaseMemFrequency = 1750, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 302, Wattage = 215, MultiGPU = SLI, SlotSize = 3, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10, SingleGPUScore = 10278, DualGPUScore = 18496, DualGPUPerformanceIncrease = 1.79957190114808, OverclockedSingleGPUScore = 11222, OverclockedDualGPUScore = 20300 }; gpus.Add(GPU_GeForce_RTX_2080_FTW3_ULTRA_GAMING);
            GPU GPU_AORUS_GeForce_RTX_2080_XTREME_8G = new GPU() { Id = 136, Name = "AORUS GeForce RTX 2080 XTREME 8G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 1050, SellPrice = 350, LevelUnlock = 25, LevelPercent = 80, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080, IsWaterCooled = false, RankingScore = 6722, VRAM = 8, MinCoreFrequency = 1780, BaseCoreFrequency = 1890, OverclockedCoreFrequency = 1960, MaxCoreFrequency = 2000, MinMemFrequency = 1334, BaseMemFrequency = 1767, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 290, Wattage = 215, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10, SingleGPUScore = 10469, DualGPUScore = 18941, DualGPUPerformanceIncrease = 1.80924634635591, OverclockedSingleGPUScore = 11222, OverclockedDualGPUScore = 20300 }; gpus.Add(GPU_AORUS_GeForce_RTX_2080_XTREME_8G);
            GPU GPU_GeForce_RTX_2080_Founders_Edition = new GPU() { Id = 137, Name = "GeForce RTX 2080 Founders Edition", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 950, SellPrice = 317, LevelUnlock = 25, LevelPercent = 1, Lighting = Color.Green, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080, IsWaterCooled = false, RankingScore = 6096, VRAM = 8, MinCoreFrequency = 1320, BaseCoreFrequency = 1710, OverclockedCoreFrequency = 1960, MaxCoreFrequency = 2100, MinMemFrequency = 1300, BaseMemFrequency = 1750, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 267, Wattage = 215, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 10, SingleGPUScore = 9459, DualGPUScore = 16411, DualGPUPerformanceIncrease = 1.73496141241146, OverclockedSingleGPUScore = 11222, OverclockedDualGPUScore = 20300 }; gpus.Add(GPU_GeForce_RTX_2080_Founders_Edition);
            GPU GPU_ROG_STRIX_GeForce_RTX_2080_SUPER_Series = new GPU() { Id = 138, Name = "ROG STRIX GeForce RTX 2080 SUPER Series", PartType = PartType.GPU, Manufacturer = ASUS, Price = 1050, SellPrice = 350, LevelUnlock = 28, LevelPercent = 60, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Super, IsWaterCooled = false, RankingScore = 6805, VRAM = 8, MinCoreFrequency = 1680, BaseCoreFrequency = 1890, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2100, MinMemFrequency = 1574, BaseMemFrequency = 1937, OverclockedMemFrequency = 2150, MaxMemFrequency = 2300, Length = 300, Wattage = 250, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.2, SingleGPUScore = 10672, DualGPUScore = 20669, DualGPUPerformanceIncrease = 1.93675037481259, OverclockedSingleGPUScore = 11562, OverclockedDualGPUScore = 23017 }; gpus.Add(GPU_ROG_STRIX_GeForce_RTX_2080_SUPER_Series);
            GPU GPU_iGame_GeForce_RTX_2080_SUPER_Advanced_OC_V = new GPU() { Id = 139, Name = "iGame GeForce RTX 2080 SUPER Advanced OC-V", PartType = PartType.GPU, Manufacturer = Colorful, Price = 935, SellPrice = 312, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Super, IsWaterCooled = false, RankingScore = 6582, VRAM = 8, MinCoreFrequency = 1590, BaseCoreFrequency = 1845, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2100, MinMemFrequency = 1574, BaseMemFrequency = 1937, OverclockedMemFrequency = 2150, MaxMemFrequency = 2300, Length = 315, Wattage = 250, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 10309, DualGPUScore = 20223, DualGPUPerformanceIncrease = 1.96168396546707, OverclockedSingleGPUScore = 11562, OverclockedDualGPUScore = 23017 }; gpus.Add(GPU_iGame_GeForce_RTX_2080_SUPER_Advanced_OC_V);
            GPU GPU_iGame_GeForce_RTX_2080_SUPER_Vulcan_X_OC = new GPU() { Id = 140, Name = "iGame GeForce RTX 2080 SUPER Vulcan X OC", PartType = PartType.GPU, Manufacturer = Colorful, Price = 950, SellPrice = 317, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Super, IsWaterCooled = false, RankingScore = 6657, VRAM = 8, MinCoreFrequency = 1620, BaseCoreFrequency = 1860, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2100, MinMemFrequency = 1574, BaseMemFrequency = 1937, OverclockedMemFrequency = 2150, MaxMemFrequency = 2300, Length = 318, Wattage = 250, MultiGPU = SLI, SlotSize = 3, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 10430, DualGPUScore = 20373, DualGPUPerformanceIncrease = 1.95330776605944, OverclockedSingleGPUScore = 11562, OverclockedDualGPUScore = 23017 }; gpus.Add(GPU_iGame_GeForce_RTX_2080_SUPER_Vulcan_X_OC);
            GPU GPU_GeForce_RTX_2080_SUPER_BLACK_GAMING = new GPU() { Id = 141, Name = "GeForce RTX 2080 SUPER BLACK GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 960, SellPrice = 320, LevelUnlock = 28, LevelPercent = 80, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Super, IsWaterCooled = false, RankingScore = 6433, VRAM = 8, MinCoreFrequency = 1530, BaseCoreFrequency = 1815, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2100, MinMemFrequency = 1570, BaseMemFrequency = 1935, OverclockedMemFrequency = 2150, MaxMemFrequency = 2300, Length = 270, Wattage = 250, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 10067, DualGPUScore = 19910, DualGPUPerformanceIncrease = 1.97774908115625, OverclockedSingleGPUScore = 11562, OverclockedDualGPUScore = 23017 }; gpus.Add(GPU_GeForce_RTX_2080_SUPER_BLACK_GAMING);
            GPU GPU_AORUS_GeForce_RTX_2080_SUPER_8G = new GPU() { Id = 142, Name = "AORUS GeForce RTX 2080 SUPER 8G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 1050, SellPrice = 350, LevelUnlock = 28, LevelPercent = 60, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Super, IsWaterCooled = false, RankingScore = 6657, VRAM = 8, MinCoreFrequency = 1620, BaseCoreFrequency = 1860, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2100, MinMemFrequency = 1574, BaseMemFrequency = 1937, OverclockedMemFrequency = 2150, MaxMemFrequency = 2300, Length = 290, Wattage = 250, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 9.9, SingleGPUScore = 10430, DualGPUScore = 20373, DualGPUPerformanceIncrease = 1.95330776605944, OverclockedSingleGPUScore = 11562, OverclockedDualGPUScore = 23017 }; gpus.Add(GPU_AORUS_GeForce_RTX_2080_SUPER_8G);
            GPU GPU_GeForce_RTX_2080_SUPER_GAMING_OC_8G = new GPU() { Id = 143, Name = "GeForce RTX 2080 SUPER GAMING OC 8G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 980, SellPrice = 327, LevelUnlock = 28, LevelPercent = 65, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Super, IsWaterCooled = false, RankingScore = 6582, VRAM = 8, MinCoreFrequency = 1590, BaseCoreFrequency = 1845, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2100, MinMemFrequency = 1570, BaseMemFrequency = 1935, OverclockedMemFrequency = 2150, MaxMemFrequency = 2300, Length = 287, Wattage = 250, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 10309, DualGPUScore = 20211, DualGPUPerformanceIncrease = 1.96051993403822, OverclockedSingleGPUScore = 11562, OverclockedDualGPUScore = 23017 }; gpus.Add(GPU_GeForce_RTX_2080_SUPER_GAMING_OC_8G);
            GPU GPU_GeForce_RTX_2080_SUPER_GAMING_X_Trio = new GPU() { Id = 144, Name = "GeForce RTX 2080 SUPER GAMING X Trio", PartType = PartType.GPU, Manufacturer = MSI, Price = 935, SellPrice = 312, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Super, IsWaterCooled = false, RankingScore = 6582, VRAM = 8, MinCoreFrequency = 1590, BaseCoreFrequency = 1845, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2100, MinMemFrequency = 1574, BaseMemFrequency = 1937, OverclockedMemFrequency = 2150, MaxMemFrequency = 2300, Length = 328, Wattage = 250, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 10309, DualGPUScore = 20223, DualGPUPerformanceIncrease = 1.96168396546707, OverclockedSingleGPUScore = 11562, OverclockedDualGPUScore = 23017 }; gpus.Add(GPU_GeForce_RTX_2080_SUPER_GAMING_X_Trio);
            GPU GPU_GeForce_RTX_2080_SUPER_Ventus_XS_OC = new GPU() { Id = 145, Name = "GeForce RTX 2080 SUPER Ventus XS OC", PartType = PartType.GPU, Manufacturer = MSI, Price = 925, SellPrice = 308, LevelUnlock = 28, LevelPercent = 1, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Super, IsWaterCooled = false, RankingScore = 6508, VRAM = 8, MinCoreFrequency = 1560, BaseCoreFrequency = 1830, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2100, MinMemFrequency = 1574, BaseMemFrequency = 1937, OverclockedMemFrequency = 2150, MaxMemFrequency = 2300, Length = 257, Wattage = 250, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 10188, DualGPUScore = 20073, DualGPUPerformanceIncrease = 1.97025912838634, OverclockedSingleGPUScore = 11562, OverclockedDualGPUScore = 23017 }; gpus.Add(GPU_GeForce_RTX_2080_SUPER_Ventus_XS_OC);
            GPU GPU_GeForce_RTX_2080_SUPER__AERO = new GPU() { Id = 146, Name = "GeForce RTX 2080 SUPER™ AERO", PartType = PartType.GPU, Manufacturer = MSI, Price = 960, SellPrice = 320, LevelUnlock = 28, LevelPercent = 50, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Super, IsWaterCooled = false, RankingScore = 6432, VRAM = 8, MinCoreFrequency = 1530, BaseCoreFrequency = 1815, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2100, MinMemFrequency = 1100, BaseMemFrequency = 1750, OverclockedMemFrequency = 2150, MaxMemFrequency = 2400, Length = 265, Wattage = 250, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 10065, DualGPUScore = 18800, DualGPUPerformanceIncrease = 1, OverclockedSingleGPUScore = 11562, OverclockedDualGPUScore = 23017 }; gpus.Add(GPU_GeForce_RTX_2080_SUPER__AERO);
            GPU GPU_GAMING_GeForce_RTX_2080_SUPER_Amp = new GPU() { Id = 147, Name = "GAMING GeForce RTX 2080 SUPER Amp", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 980, SellPrice = 327, LevelUnlock = 28, LevelPercent = 30, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Super, IsWaterCooled = false, RankingScore = 6582, VRAM = 8, MinCoreFrequency = 1590, BaseCoreFrequency = 1845, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2100, MinMemFrequency = 1570, BaseMemFrequency = 1935, OverclockedMemFrequency = 2150, MaxMemFrequency = 2300, Length = 298, Wattage = 250, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 10309, DualGPUScore = 20211, DualGPUPerformanceIncrease = 1.96051993403822, OverclockedSingleGPUScore = 11562, OverclockedDualGPUScore = 23017 }; gpus.Add(GPU_GAMING_GeForce_RTX_2080_SUPER_Amp);
            GPU GPU_GAMING_GeForce_RTX_2080_SUPER_Amp_Extreme = new GPU() { Id = 148, Name = "GAMING GeForce RTX 2080 SUPER Amp Extreme", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 1000, SellPrice = 333, LevelUnlock = 28, LevelPercent = 30, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Super, IsWaterCooled = false, RankingScore = 6731, VRAM = 8, MinCoreFrequency = 1650, BaseCoreFrequency = 1875, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2100, MinMemFrequency = 1570, BaseMemFrequency = 1935, OverclockedMemFrequency = 2150, MaxMemFrequency = 2300, Length = 324, Wattage = 250, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.6, SingleGPUScore = 10551, DualGPUScore = 20509, DualGPUPerformanceIncrease = 1.94379679651218, OverclockedSingleGPUScore = 11562, OverclockedDualGPUScore = 23017 }; gpus.Add(GPU_GAMING_GeForce_RTX_2080_SUPER_Amp_Extreme);
            GPU GPU_GAMING_GeForce_RTX_2080_SUPER_Twin_Fan = new GPU() { Id = 149, Name = "GAMING GeForce RTX 2080 SUPER Twin Fan", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 950, SellPrice = 317, LevelUnlock = 28, LevelPercent = 30, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Super, IsWaterCooled = false, RankingScore = 6433, VRAM = 8, MinCoreFrequency = 1530, BaseCoreFrequency = 1815, OverclockedCoreFrequency = 2000, MaxCoreFrequency = 2100, MinMemFrequency = 1570, BaseMemFrequency = 1935, OverclockedMemFrequency = 2150, MaxMemFrequency = 2300, Length = 268, Wattage = 250, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 10.6, SingleGPUScore = 10067, DualGPUScore = 19910, DualGPUPerformanceIncrease = 1.97774908115625, OverclockedSingleGPUScore = 11562, OverclockedDualGPUScore = 23017 }; gpus.Add(GPU_GAMING_GeForce_RTX_2080_SUPER_Twin_Fan);
            GPU GPU_GeForce_RTX_2080_SUPER_FTW3_HYDRO_COPPER_GAMING = new GPU() { Id = 150, Name = "GeForce RTX 2080 SUPER FTW3 HYDRO COPPER GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 1350, SellPrice = 450, LevelUnlock = 26, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Super, IsWaterCooled = true, RankingScore = 6582, VRAM = 8, MinCoreFrequency = 1390, BaseCoreFrequency = 1845, OverclockedCoreFrequency = 2090, MaxCoreFrequency = 2300, MinMemFrequency = 1374, BaseMemFrequency = 1937, OverclockedMemFrequency = 2247, MaxMemFrequency = 2500, Length = 290, Wattage = 250, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 7.6, SingleGPUScore = 10309, DualGPUScore = 20223, DualGPUPerformanceIncrease = 1.96168396546707, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_2080_SUPER_FTW3_HYDRO_COPPER_GAMING);
            GPU GPU_AORUS_GeForce_RTX_2080_SUPER_WATERFORCE_WB_8G = new GPU() { Id = 151, Name = "AORUS GeForce RTX 2080 SUPER WATERFORCE WB 8G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 1400, SellPrice = 467, LevelUnlock = 29, LevelPercent = 50, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Super, IsWaterCooled = true, RankingScore = 6657, VRAM = 8, MinCoreFrequency = 1520, BaseCoreFrequency = 1860, OverclockedCoreFrequency = 2086, MaxCoreFrequency = 2200, MinMemFrequency = 1474, BaseMemFrequency = 1937, OverclockedMemFrequency = 2242, MaxMemFrequency = 2400, Length = 291, Wattage = 250, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 7.5, SingleGPUScore = 10430, DualGPUScore = 20373, DualGPUPerformanceIncrease = 1.95330776605944, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_AORUS_GeForce_RTX_2080_SUPER_WATERFORCE_WB_8G);
            GPU GPU_ROG_Strix_Geforce_RTX_2080_Ti_11GB_Gaming = new GPU() { Id = 152, Name = "ROG Strix Geforce RTX 2080 Ti 11GB Gaming", PartType = PartType.GPU, Manufacturer = ASUS, Price = 1030, SellPrice = 343, LevelUnlock = 28, LevelPercent = 50, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Ti, IsWaterCooled = false, RankingScore = 6984, VRAM = 11, MinCoreFrequency = 920, BaseCoreFrequency = 1560, OverclockedCoreFrequency = 1960, MaxCoreFrequency = 2200, MinMemFrequency = 1400, BaseMemFrequency = 1750, OverclockedMemFrequency = 1950, MaxMemFrequency = 2100, Length = 304, Wattage = 250, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 10801, DualGPUScore = 19185, DualGPUPerformanceIncrease = 1.77622442366448, OverclockedSingleGPUScore = 14164, OverclockedDualGPUScore = 25810 }; gpus.Add(GPU_ROG_Strix_Geforce_RTX_2080_Ti_11GB_Gaming);
            GPU GPU_iGame_GeForce_RTX_2080_Ti_Advanced_OC = new GPU() { Id = 153, Name = "iGame GeForce RTX 2080 Ti Advanced OC", PartType = PartType.GPU, Manufacturer = Colorful, Price = 1200, SellPrice = 400, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Ti, IsWaterCooled = false, RankingScore = 7353, VRAM = 11, MinCoreFrequency = 1070, BaseCoreFrequency = 1635, OverclockedCoreFrequency = 1960, MaxCoreFrequency = 2200, MinMemFrequency = 1400, BaseMemFrequency = 1750, OverclockedMemFrequency = 1950, MaxMemFrequency = 2100, Length = 304, Wattage = 250, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 9.5, SingleGPUScore = 11382, DualGPUScore = 19914, DualGPUPerformanceIncrease = 1.74960463890353, OverclockedSingleGPUScore = 14164, OverclockedDualGPUScore = 25810 }; gpus.Add(GPU_iGame_GeForce_RTX_2080_Ti_Advanced_OC);
            GPU GPU_iGame_GeForce_RTX_2080_Ti_Vulcan_X_OC = new GPU() { Id = 154, Name = "iGame GeForce RTX 2080 Ti Vulcan X OC", PartType = PartType.GPU, Manufacturer = Colorful, Price = 1320, SellPrice = 440, LevelUnlock = 28, LevelPercent = 30, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Ti, IsWaterCooled = false, RankingScore = 8017, VRAM = 11, MinCoreFrequency = 1440, BaseCoreFrequency = 1770, OverclockedCoreFrequency = 1960, MaxCoreFrequency = 2100, MinMemFrequency = 1400, BaseMemFrequency = 1750, OverclockedMemFrequency = 1950, MaxMemFrequency = 2100, Length = 318, Wattage = 250, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin, Eight_Pin }, ScoreToValueRatio = 9.4, SingleGPUScore = 12427, DualGPUScore = 21226, DualGPUPerformanceIncrease = 1.70805504144202, OverclockedSingleGPUScore = 14164, OverclockedDualGPUScore = 25810 }; gpus.Add(GPU_iGame_GeForce_RTX_2080_Ti_Vulcan_X_OC);
            GPU GPU_GeForce_RTX_2080_Ti_FTW3_ULTRA_GAMING = new GPU() { Id = 155, Name = "GeForce RTX 2080 Ti FTW3 ULTRA GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 1240, SellPrice = 413, LevelUnlock = 27, LevelPercent = 40, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Ti, IsWaterCooled = false, RankingScore = 7943, VRAM = 11, MinCoreFrequency = 1410, BaseCoreFrequency = 1755, OverclockedCoreFrequency = 1960, MaxCoreFrequency = 2100, MinMemFrequency = 1400, BaseMemFrequency = 1750, OverclockedMemFrequency = 1950, MaxMemFrequency = 2100, Length = 302, Wattage = 250, MultiGPU = SLI, SlotSize = 3, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 9.9, SingleGPUScore = 12311, DualGPUScore = 21080, DualGPUPerformanceIncrease = 1.71228982211031, OverclockedSingleGPUScore = 14164, OverclockedDualGPUScore = 25810 }; gpus.Add(GPU_GeForce_RTX_2080_Ti_FTW3_ULTRA_GAMING);
            GPU GPU_GeForce_RTX_2080Ti_XC_BLACK_EDITION_GAMING = new GPU() { Id = 156, Name = "GeForce RTX 2080Ti XC BLACK EDITION GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 1080, SellPrice = 360, LevelUnlock = 27, LevelPercent = 80, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Ti, IsWaterCooled = false, RankingScore = 6984, VRAM = 11, MinCoreFrequency = 920, BaseCoreFrequency = 1560, OverclockedCoreFrequency = 1960, MaxCoreFrequency = 2200, MinMemFrequency = 1400, BaseMemFrequency = 1750, OverclockedMemFrequency = 1950, MaxMemFrequency = 2100, Length = 269, Wattage = 250, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10, SingleGPUScore = 10801, DualGPUScore = 19185, DualGPUPerformanceIncrease = 1.77622442366448, OverclockedSingleGPUScore = 14164, OverclockedDualGPUScore = 25810 }; gpus.Add(GPU_GeForce_RTX_2080Ti_XC_BLACK_EDITION_GAMING);
            GPU GPU_AORUS_GeForce_RTX_2080_Ti_XTREME_11G = new GPU() { Id = 157, Name = "AORUS GeForce RTX 2080 Ti XTREME 11G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 1310, SellPrice = 437, LevelUnlock = 27, LevelPercent = 80, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Ti, IsWaterCooled = false, RankingScore = 8031, VRAM = 11, MinCoreFrequency = 1440, BaseCoreFrequency = 1770, OverclockedCoreFrequency = 1960, MaxCoreFrequency = 2100, MinMemFrequency = 1434, BaseMemFrequency = 1767, OverclockedMemFrequency = 1950, MaxMemFrequency = 2100, Length = 290, Wattage = 250, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 9.5, SingleGPUScore = 12450, DualGPUScore = 21459, DualGPUPerformanceIncrease = 1.72361445783133, OverclockedSingleGPUScore = 14164, OverclockedDualGPUScore = 25810 }; gpus.Add(GPU_AORUS_GeForce_RTX_2080_Ti_XTREME_11G);
            GPU GPU_GeForce_RTX_2080_Ti_Founders_Edition = new GPU() { Id = 158, Name = "GeForce RTX 2080 Ti Founders Edition", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 1130, SellPrice = 377, LevelUnlock = 27, LevelPercent = 1, Lighting = Color.Green, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Ti, IsWaterCooled = false, RankingScore = 6910, VRAM = 11, MinCoreFrequency = 890, BaseCoreFrequency = 1545, OverclockedCoreFrequency = 1960, MaxCoreFrequency = 2200, MinMemFrequency = 1400, BaseMemFrequency = 1750, OverclockedMemFrequency = 1950, MaxMemFrequency = 2100, Length = 269, Wattage = 250, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 9.5, SingleGPUScore = 10685, DualGPUScore = 19039, DualGPUPerformanceIncrease = 1.78184370613009, OverclockedSingleGPUScore = 14164, OverclockedDualGPUScore = 25810 }; gpus.Add(GPU_GeForce_RTX_2080_Ti_Founders_Edition);
            GPU GPU_GAMING_GeForce_RTX_2080_Ti_Amp = new GPU() { Id = 159, Name = "GAMING GeForce RTX 2080 Ti Amp", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 1150, SellPrice = 383, LevelUnlock = 27, LevelPercent = 30, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Ti, IsWaterCooled = false, RankingScore = 7500, VRAM = 11, MinCoreFrequency = 1130, BaseCoreFrequency = 1665, OverclockedCoreFrequency = 1960, MaxCoreFrequency = 2200, MinMemFrequency = 1400, BaseMemFrequency = 1750, OverclockedMemFrequency = 1950, MaxMemFrequency = 2100, Length = 308, Wattage = 250, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.1, SingleGPUScore = 11614, DualGPUScore = 20205, DualGPUPerformanceIncrease = 1.73971069399001, OverclockedSingleGPUScore = 14164, OverclockedDualGPUScore = 25810 }; gpus.Add(GPU_GAMING_GeForce_RTX_2080_Ti_Amp);
            GPU GPU_GAMING_GeForce_RTX_2080_Ti_Amp_Extreme = new GPU() { Id = 160, Name = "GAMING GeForce RTX 2080 Ti Amp Extreme", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 1300, SellPrice = 433, LevelUnlock = 27, LevelPercent = 50, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Ti, IsWaterCooled = false, RankingScore = 8280, VRAM = 11, MinCoreFrequency = 1530, BaseCoreFrequency = 1815, OverclockedCoreFrequency = 1960, MaxCoreFrequency = 2100, MinMemFrequency = 1500, BaseMemFrequency = 1800, OverclockedMemFrequency = 1950, MaxMemFrequency = 2100, Length = 324, Wattage = 250, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 9.9, SingleGPUScore = 12842, DualGPUScore = 22348, DualGPUPerformanceIncrease = 1.74022737891294, OverclockedSingleGPUScore = 14164, OverclockedDualGPUScore = 25810 }; gpus.Add(GPU_GAMING_GeForce_RTX_2080_Ti_Amp_Extreme);
            GPU GPU_GAMING_GeForce_RTX_2080_Ti_Amp_MAXX = new GPU() { Id = 161, Name = "GAMING GeForce RTX 2080 Ti Amp MAXX", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 1150, SellPrice = 383, LevelUnlock = 27, LevelPercent = 30, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Ti, IsWaterCooled = false, RankingScore = 7500, VRAM = 11, MinCoreFrequency = 1130, BaseCoreFrequency = 1665, OverclockedCoreFrequency = 1960, MaxCoreFrequency = 2200, MinMemFrequency = 1400, BaseMemFrequency = 1750, OverclockedMemFrequency = 1950, MaxMemFrequency = 2100, Length = 298, Wattage = 250, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.1, SingleGPUScore = 11614, DualGPUScore = 20205, DualGPUPerformanceIncrease = 1.73971069399001, OverclockedSingleGPUScore = 14164, OverclockedDualGPUScore = 25810 }; gpus.Add(GPU_GAMING_GeForce_RTX_2080_Ti_Amp_MAXX);
            GPU GPU_GAMING_GeForce_RTX_2080_Ti_Blower = new GPU() { Id = 162, Name = "GAMING GeForce RTX 2080 Ti Blower", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 1050, SellPrice = 350, LevelUnlock = 27, LevelPercent = 30, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Ti, IsWaterCooled = false, RankingScore = 6910, VRAM = 11, MinCoreFrequency = 890, BaseCoreFrequency = 1545, OverclockedCoreFrequency = 1960, MaxCoreFrequency = 2200, MinMemFrequency = 1400, BaseMemFrequency = 1750, OverclockedMemFrequency = 1950, MaxMemFrequency = 2100, Length = 268, Wattage = 250, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.2, SingleGPUScore = 10685, DualGPUScore = 19039, DualGPUPerformanceIncrease = 1.78184370613009, OverclockedSingleGPUScore = 14164, OverclockedDualGPUScore = 25810 }; gpus.Add(GPU_GAMING_GeForce_RTX_2080_Ti_Blower);
            GPU GPU_GeForce_RTX_2080_Ti_FTW3_ULTRA_HYDRO_COPPER_GAMING = new GPU() { Id = 163, Name = "GeForce RTX 2080 Ti FTW3 ULTRA HYDRO COPPER GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 1500, SellPrice = 500, LevelUnlock = 28, LevelPercent = 85, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Ti, IsWaterCooled = true, RankingScore = 7943, VRAM = 11, MinCoreFrequency = 1310, BaseCoreFrequency = 1755, OverclockedCoreFrequency = 2048, MaxCoreFrequency = 2200, MinMemFrequency = 1300, BaseMemFrequency = 1750, OverclockedMemFrequency = 2038, MaxMemFrequency = 2200, Length = 291, Wattage = 250, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 8.2, SingleGPUScore = 12311, DualGPUScore = 21080, DualGPUPerformanceIncrease = 1.71228982211031, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_2080_Ti_FTW3_ULTRA_HYDRO_COPPER_GAMING);
            GPU GPU_GeForce_RTX_2080_Ti_XC_HYDRO_COPPER_GAMING = new GPU() { Id = 164, Name = "GeForce RTX 2080 Ti XC HYDRO COPPER GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 1350, SellPrice = 450, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Ti, IsWaterCooled = true, RankingScore = 6910, VRAM = 11, MinCoreFrequency = 690, BaseCoreFrequency = 1545, OverclockedCoreFrequency = 2048, MaxCoreFrequency = 2400, MinMemFrequency = 1300, BaseMemFrequency = 1750, OverclockedMemFrequency = 2038, MaxMemFrequency = 2200, Length = 266, Wattage = 250, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 7.9, SingleGPUScore = 10685, DualGPUScore = 19039, DualGPUPerformanceIncrease = 1.78184370613009, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_2080_Ti_XC_HYDRO_COPPER_GAMING);
            GPU GPU_AORUS_GeForce_RTX_2080_Ti_XTREME_WATERFORCE_WB_11G = new GPU() { Id = 165, Name = "AORUS GeForce RTX 2080 Ti XTREME WATERFORCE WB 11G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 1550, SellPrice = 517, LevelUnlock = 27, LevelPercent = 90, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Ti, IsWaterCooled = true, RankingScore = 8031, VRAM = 11, MinCoreFrequency = 1340, BaseCoreFrequency = 1770, OverclockedCoreFrequency = 2044, MaxCoreFrequency = 2200, MinMemFrequency = 1334, BaseMemFrequency = 1767, OverclockedMemFrequency = 2034, MaxMemFrequency = 2200, Length = 291, Wattage = 250, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 8, SingleGPUScore = 12450, DualGPUScore = 21459, DualGPUPerformanceIncrease = 1.72361445783133, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_AORUS_GeForce_RTX_2080_Ti_XTREME_WATERFORCE_WB_11G);
            GPU GPU_GeForce_RTX_2080Ti___Alphacool_Eisblock_GPX_N_Acetal_M02 = new GPU() { Id = 166, Name = "GeForce RTX 2080Ti | Alphacool Eisblock GPX-N Acetal M02", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 1550, SellPrice = 517, LevelUnlock = 27, LevelPercent = 90, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Ti, IsWaterCooled = true, RankingScore = 8031, VRAM = 11, MinCoreFrequency = 1340, BaseCoreFrequency = 1770, OverclockedCoreFrequency = 2044, MaxCoreFrequency = 2200, MinMemFrequency = 1334, BaseMemFrequency = 1767, OverclockedMemFrequency = 2034, MaxMemFrequency = 2200, Length = 291, Wattage = 250, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 8, SingleGPUScore = 12450, DualGPUScore = 21459, DualGPUPerformanceIncrease = 1.72361445783133, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_2080Ti___Alphacool_Eisblock_GPX_N_Acetal_M02);
            GPU GPU_GeForce_RTX_2080Ti___Alphacool_Eisblock_GPX_N_Plexi_M02 = new GPU() { Id = 167, Name = "GeForce RTX 2080Ti | Alphacool Eisblock GPX-N Plexi M02", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 1550, SellPrice = 517, LevelUnlock = 27, LevelPercent = 90, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Ti, IsWaterCooled = true, RankingScore = 8031, VRAM = 11, MinCoreFrequency = 1340, BaseCoreFrequency = 1770, OverclockedCoreFrequency = 2044, MaxCoreFrequency = 2200, MinMemFrequency = 1334, BaseMemFrequency = 1767, OverclockedMemFrequency = 2034, MaxMemFrequency = 2200, Length = 291, Wattage = 250, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 8, SingleGPUScore = 12450, DualGPUScore = 21459, DualGPUPerformanceIncrease = 1.72361445783133, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_2080Ti___Alphacool_Eisblock_GPX_N_Plexi_M02);
            GPU GPU_ZOTAC_GAMING_GeForce_RTX_2080_Ti_ArcticStorm = new GPU() { Id = 168, Name = "ZOTAC GAMING GeForce RTX 2080 Ti ArcticStorm", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 1550, SellPrice = 517, LevelUnlock = 27, LevelPercent = 80, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_2080_Ti, IsWaterCooled = true, RankingScore = 7058, VRAM = 11, MinCoreFrequency = 850, BaseCoreFrequency = 1575, OverclockedCoreFrequency = 2048, MaxCoreFrequency = 2300, MinMemFrequency = 1300, BaseMemFrequency = 1750, OverclockedMemFrequency = 2038, MaxMemFrequency = 2200, Length = 295, Wattage = 300, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 7, SingleGPUScore = 10918, DualGPUScore = 19331, DualGPUPerformanceIncrease = 1.77056237406118, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_ZOTAC_GAMING_GeForce_RTX_2080_Ti_ArcticStorm);
            GPU GPU_iGame_GeForce_RTX_3060_bilibili_E_sports_Edition_OC_12G_V = new GPU() { Id = 169, Name = "iGame GeForce RTX 3060 bilibili E-sports Edition OC 12G-V", PartType = PartType.GPU, Manufacturer = Colorful, Price = 715, SellPrice = 238, LevelUnlock = 31, LevelPercent = 80, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3060, IsWaterCooled = false, RankingScore = 5351, VRAM = 12, MinCoreFrequency = 1554, BaseCoreFrequency = 1777, OverclockedCoreFrequency = 1920, MaxCoreFrequency = 2000, MinMemFrequency = 750, BaseMemFrequency = 1875, OverclockedMemFrequency = 2600, MaxMemFrequency = 3000, Length = 300, Wattage = 170, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 8082, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 9100, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_iGame_GeForce_RTX_3060_bilibili_E_sports_Edition_OC_12G_V);
            GPU GPU_GAMING_GeForce_RTX_3060_AMP_White_Edition = new GPU() { Id = 170, Name = "GAMING GeForce RTX 3060 AMP White Edition", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 760, SellPrice = 253, LevelUnlock = 32, LevelPercent = 1, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3060, IsWaterCooled = false, RankingScore = 5534, VRAM = 12, MinCoreFrequency = 1734, BaseCoreFrequency = 1867, OverclockedCoreFrequency = 1920, MaxCoreFrequency = 2000, MinMemFrequency = 750, BaseMemFrequency = 1875, OverclockedMemFrequency = 2600, MaxMemFrequency = 3000, Length = 231, Wattage = 170, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 8364, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 9100, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GAMING_GeForce_RTX_3060_AMP_White_Edition);
            GPU GPU_GAMING_GeForce_RTX_3060_Twin_Edge_OC = new GPU() { Id = 171, Name = "GAMING GeForce RTX 3060 Twin Edge OC", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 745, SellPrice = 248, LevelUnlock = 32, LevelPercent = 1, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3060, IsWaterCooled = false, RankingScore = 5412, VRAM = 12, MinCoreFrequency = 1614, BaseCoreFrequency = 1807, OverclockedCoreFrequency = 1920, MaxCoreFrequency = 2000, MinMemFrequency = 750, BaseMemFrequency = 1875, OverclockedMemFrequency = 2600, MaxMemFrequency = 3000, Length = 224, Wattage = 170, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 8176, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 9100, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GAMING_GeForce_RTX_3060_Twin_Edge_OC);
            GPU GPU_iGame_GeForce_RTX_3060_Ti_bilibili_E_sports_Edition_OC_LHR_V = new GPU() { Id = 172, Name = "iGame GeForce RTX 3060 Ti bilibili E-sports Edition OC LHR-V", PartType = PartType.GPU, Manufacturer = Colorful, Price = 970, SellPrice = 323, LevelUnlock = 31, LevelPercent = 80, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3060_Ti, IsWaterCooled = false, RankingScore = 7014, VRAM = 8, MinCoreFrequency = 1230, BaseCoreFrequency = 1665, OverclockedCoreFrequency = 1950, MaxCoreFrequency = 2100, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1900, MaxMemFrequency = 2000, Length = 300, Wattage = 200, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 10535, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 11831, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_iGame_GeForce_RTX_3060_Ti_bilibili_E_sports_Edition_OC_LHR_V);
            GPU GPU_GeForce_RTX__3060Ti_GAMING_X_TRIO = new GPU() { Id = 173, Name = "GeForce RTX™ 3060Ti GAMING X TRIO", PartType = PartType.GPU, Manufacturer = MSI, Price = 1060, SellPrice = 353, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3060_Ti, IsWaterCooled = false, RankingScore = 7399, VRAM = 8, MinCoreFrequency = 1560, BaseCoreFrequency = 1830, OverclockedCoreFrequency = 1950, MaxCoreFrequency = 2100, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1900, MaxMemFrequency = 2000, Length = 323, Wattage = 200, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 11134, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 11831, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX__3060Ti_GAMING_X_TRIO);
            GPU GPU_GeForce_RTX_3060_Ti_Founders_Edition = new GPU() { Id = 174, Name = "GeForce RTX 3060 Ti Founders Edition", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 1005, SellPrice = 335, LevelUnlock = 32, LevelPercent = 80, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3060_Ti, IsWaterCooled = false, RankingScore = 7014, VRAM = 8, MinCoreFrequency = 1230, BaseCoreFrequency = 1665, OverclockedCoreFrequency = 1950, MaxCoreFrequency = 2100, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1900, MaxMemFrequency = 2000, Length = 242, Wattage = 200, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 10535, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 11831, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_3060_Ti_Founders_Edition);
            GPU GPU_GAMING_GeForce_RTX_3060_Ti_Twin_Edge_OC = new GPU() { Id = 175, Name = "GAMING GeForce RTX 3060 Ti Twin Edge OC", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 1015, SellPrice = 338, LevelUnlock = 34, LevelPercent = 90, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3060_Ti, IsWaterCooled = false, RankingScore = 7084, VRAM = 8, MinCoreFrequency = 1290, BaseCoreFrequency = 1695, OverclockedCoreFrequency = 1950, MaxCoreFrequency = 2100, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1900, MaxMemFrequency = 2000, Length = 222, Wattage = 200, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 10644, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 11831, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GAMING_GeForce_RTX_3060_Ti_Twin_Edge_OC);
            GPU GPU_GeForce_RTX_3070_OC_Edition_8GB_GDDR6 = new GPU() { Id = 176, Name = "GeForce RTX 3070 OC Edition 8GB GDDR6", PartType = PartType.GPU, Manufacturer = ASUS, Price = 1185, SellPrice = 395, LevelUnlock = 31, LevelPercent = 30, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3070, IsWaterCooled = false, RankingScore = 8201, VRAM = 8, MinCoreFrequency = 1340, BaseCoreFrequency = 1770, OverclockedCoreFrequency = 2050, MaxCoreFrequency = 2200, MinMemFrequency = 1300, BaseMemFrequency = 1750, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 267, Wattage = 220, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 12454, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 13402, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_3070_OC_Edition_8GB_GDDR6);
            GPU GPU_iGame_GeForce_RTX_3070_bilibili_E_sports_Edition_OC_LHR_V = new GPU() { Id = 177, Name = "iGame GeForce RTX 3070 bilibili E-sports Edition OC LHR-V", PartType = PartType.GPU, Manufacturer = Colorful, Price = 1195, SellPrice = 398, LevelUnlock = 31, LevelPercent = 80, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3070, IsWaterCooled = false, RankingScore = 8036, VRAM = 8, MinCoreFrequency = 1150, BaseCoreFrequency = 1725, OverclockedCoreFrequency = 2050, MaxCoreFrequency = 2300, MinMemFrequency = 1300, BaseMemFrequency = 1750, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 300, Wattage = 240, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 12205, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 14009, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_iGame_GeForce_RTX_3070_bilibili_E_sports_Edition_OC_LHR_V);
            GPU GPU_iGame_GeForce_RTX_3070_Ultra_W_OC_V = new GPU() { Id = 178, Name = "iGame GeForce RTX 3070 Ultra W OC-V", PartType = PartType.GPU, Manufacturer = Colorful, Price = 1185, SellPrice = 395, LevelUnlock = 31, LevelPercent = 80, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3070, IsWaterCooled = false, RankingScore = 8201, VRAM = 8, MinCoreFrequency = 1340, BaseCoreFrequency = 1770, OverclockedCoreFrequency = 2050, MaxCoreFrequency = 2200, MinMemFrequency = 1300, BaseMemFrequency = 1750, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 310, Wattage = 220, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 12454, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 14009, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_iGame_GeForce_RTX_3070_Ultra_W_OC_V);
            GPU GPU_GeForce_RTX__3070_VENTUS_2X = new GPU() { Id = 179, Name = "GeForce RTX™ 3070 VENTUS 2X", PartType = PartType.GPU, Manufacturer = MSI, Price = 1160, SellPrice = 387, LevelUnlock = 31, LevelPercent = 70, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3070, IsWaterCooled = false, RankingScore = 8036, VRAM = 8, MinCoreFrequency = 1150, BaseCoreFrequency = 1725, OverclockedCoreFrequency = 2050, MaxCoreFrequency = 2300, MinMemFrequency = 1300, BaseMemFrequency = 1750, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 232, Wattage = 220, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 12205, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 14009, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX__3070_VENTUS_2X);
            GPU GPU_GeForce_RTX_3070 = new GPU() { Id = 180, Name = "GeForce RTX 3070", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 1160, SellPrice = 387, LevelUnlock = 31, LevelPercent = 1, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3070, IsWaterCooled = false, RankingScore = 8036, VRAM = 8, MinCoreFrequency = 1150, BaseCoreFrequency = 1725, OverclockedCoreFrequency = 2050, MaxCoreFrequency = 2300, MinMemFrequency = 1300, BaseMemFrequency = 1750, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 267, Wattage = 220, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 12205, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 13402, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_3070);
            GPU GPU_GAMING_GeForce_RTX_3070_AMP_Holo = new GPU() { Id = 181, Name = "GAMING GeForce RTX 3070 AMP Holo", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 1195, SellPrice = 398, LevelUnlock = 32, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3070, IsWaterCooled = false, RankingScore = 8256, VRAM = 8, MinCoreFrequency = 1370, BaseCoreFrequency = 1785, OverclockedCoreFrequency = 2050, MaxCoreFrequency = 2200, MinMemFrequency = 1300, BaseMemFrequency = 1750, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 291, Wattage = 240, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 12537, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 14009, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GAMING_GeForce_RTX_3070_AMP_Holo);
            GPU GPU_GAMING_GeForce_RTX_3070_Twin_Edge_OC = new GPU() { Id = 182, Name = "GAMING GeForce RTX 3070 Twin Edge OC", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 1125, SellPrice = 375, LevelUnlock = 31, LevelPercent = 30, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3070, IsWaterCooled = false, RankingScore = 8146, VRAM = 8, MinCoreFrequency = 1310, BaseCoreFrequency = 1755, OverclockedCoreFrequency = 2050, MaxCoreFrequency = 2200, MinMemFrequency = 1300, BaseMemFrequency = 1750, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 232, Wattage = 220, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 12371, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 14009, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GAMING_GeForce_RTX_3070_Twin_Edge_OC);
            GPU GPU_GAMING_GeForce_RTX_3070_Twin_Edge_OC_White_Edition = new GPU() { Id = 183, Name = "GAMING GeForce RTX 3070 Twin Edge OC White Edition", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 1125, SellPrice = 375, LevelUnlock = 31, LevelPercent = 30, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3070, IsWaterCooled = false, RankingScore = 8146, VRAM = 8, MinCoreFrequency = 1310, BaseCoreFrequency = 1755, OverclockedCoreFrequency = 2050, MaxCoreFrequency = 2200, MinMemFrequency = 1300, BaseMemFrequency = 1750, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 232, Wattage = 220, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 12371, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 14009, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GAMING_GeForce_RTX_3070_Twin_Edge_OC_White_Edition);
            GPU GPU_GeForce_RTX_3070___Corsair_Hydro_X_Series_XG7_STRIX_RGB = new GPU() { Id = 184, Name = "GeForce RTX 3070 | Corsair Hydro X Series XG7 STRIX RGB", PartType = PartType.GPU, Manufacturer = CORSAIR, Price = 1450, SellPrice = 483, LevelUnlock = 31, LevelPercent = 90, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3070, IsWaterCooled = true, RankingScore = 8036, VRAM = 8, MinCoreFrequency = 950, BaseCoreFrequency = 1725, OverclockedCoreFrequency = 2185, MaxCoreFrequency = 2500, MinMemFrequency = 1100, BaseMemFrequency = 1750, OverclockedMemFrequency = 2132, MaxMemFrequency = 2400, Length = 285, Wattage = 220, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin, Eight_Pin }, ScoreToValueRatio = 8.4, SingleGPUScore = 12205, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_3070___Corsair_Hydro_X_Series_XG7_STRIX_RGB);
            GPU GPU_GeForce_RTX_3070_Ti_Founders_Edition = new GPU() { Id = 185, Name = "GeForce RTX 3070 Ti Founders Edition", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 1160, SellPrice = 387, LevelUnlock = 32, LevelPercent = 80, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3070_Ti, IsWaterCooled = false, RankingScore = 8470, VRAM = 8, MinCoreFrequency = 1540, BaseCoreFrequency = 1770, OverclockedCoreFrequency = 1920, MaxCoreFrequency = 2000, MinMemFrequency = 1076, BaseMemFrequency = 1188, OverclockedMemFrequency = 1250, MaxMemFrequency = 1300, Length = 267, Wattage = 290, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 12735, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 14119, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_3070_Ti_Founders_Edition);
            GPU GPU_GAMING_GeForce_RTX_3070_Ti_AMP_Holo = new GPU() { Id = 186, Name = "GAMING GeForce RTX 3070 Ti AMP Holo", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 1265, SellPrice = 422, LevelUnlock = 34, LevelPercent = 90, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3070_Ti, IsWaterCooled = false, RankingScore = 8824, VRAM = 8, MinCoreFrequency = 1660, BaseCoreFrequency = 1830, OverclockedCoreFrequency = 1920, MaxCoreFrequency = 2000, MinMemFrequency = 1076, BaseMemFrequency = 1188, OverclockedMemFrequency = 1250, MaxMemFrequency = 1300, Length = 317, Wattage = 310, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 13283, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 14119, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GAMING_GeForce_RTX_3070_Ti_AMP_Holo);
            GPU GPU_TUF_Gaming_GeForce_RTX_3080_O10G = new GPU() { Id = 187, Name = "TUF Gaming GeForce RTX 3080 O10G", PartType = PartType.GPU, Manufacturer = ASUS, Price = 1445, SellPrice = 482, LevelUnlock = 31, LevelPercent = 50, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3080, IsWaterCooled = false, RankingScore = 9929, VRAM = 10, MinCoreFrequency = 1330, BaseCoreFrequency = 1815, OverclockedCoreFrequency = 2100, MaxCoreFrequency = 2300, MinMemFrequency = 976, BaseMemFrequency = 1188, OverclockedMemFrequency = 1320, MaxMemFrequency = 1400, Length = 299, Wattage = 320, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 15158, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 16007, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_TUF_Gaming_GeForce_RTX_3080_O10G);
            GPU GPU_GeForce_RTX_3080_NB_10G_V = new GPU() { Id = 188, Name = "GeForce RTX 3080 NB 10G-V", PartType = PartType.GPU, Manufacturer = Colorful, Price = 1335, SellPrice = 445, LevelUnlock = 31, LevelPercent = 30, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3080, IsWaterCooled = false, RankingScore = 9617, VRAM = 10, MinCoreFrequency = 1120, BaseCoreFrequency = 1710, OverclockedCoreFrequency = 2100, MaxCoreFrequency = 2300, MinMemFrequency = 976, BaseMemFrequency = 1188, OverclockedMemFrequency = 1320, MaxMemFrequency = 1400, Length = 310, Wattage = 370, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 14685, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 16007, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_3080_NB_10G_V);
            GPU GPU_iGame_GeForce_RTX_3080_Advanced_10G_V = new GPU() { Id = 189, Name = "iGame GeForce RTX 3080 Advanced 10G-V", PartType = PartType.GPU, Manufacturer = Colorful, Price = 1335, SellPrice = 445, LevelUnlock = 31, LevelPercent = 10, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3080, IsWaterCooled = false, RankingScore = 9617, VRAM = 10, MinCoreFrequency = 1120, BaseCoreFrequency = 1710, OverclockedCoreFrequency = 2100, MaxCoreFrequency = 2300, MinMemFrequency = 976, BaseMemFrequency = 1188, OverclockedMemFrequency = 1320, MaxMemFrequency = 1400, Length = 315, Wattage = 320, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 14685, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 16007, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_iGame_GeForce_RTX_3080_Advanced_10G_V);
            GPU GPU_iGame_GeForce_RTX_3080_Ultra_OC_10G_V = new GPU() { Id = 190, Name = "iGame GeForce RTX 3080 Ultra OC 10G-V", PartType = PartType.GPU, Manufacturer = Colorful, Price = 1355, SellPrice = 452, LevelUnlock = 31, LevelPercent = 10, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3080, IsWaterCooled = false, RankingScore = 9751, VRAM = 10, MinCoreFrequency = 1210, BaseCoreFrequency = 1755, OverclockedCoreFrequency = 2100, MaxCoreFrequency = 2300, MinMemFrequency = 976, BaseMemFrequency = 1188, OverclockedMemFrequency = 1320, MaxMemFrequency = 1400, Length = 310, Wattage = 320, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 14888, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 16007, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_iGame_GeForce_RTX_3080_Ultra_OC_10G_V);
            GPU GPU_iGame_GeForce_RTX_3080_Vulcan_OC_10G_V = new GPU() { Id = 191, Name = "iGame GeForce RTX 3080 Vulcan OC 10G-V", PartType = PartType.GPU, Manufacturer = Colorful, Price = 1370, SellPrice = 457, LevelUnlock = 31, LevelPercent = 30, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3080, IsWaterCooled = false, RankingScore = 9885, VRAM = 10, MinCoreFrequency = 1300, BaseCoreFrequency = 1800, OverclockedCoreFrequency = 2100, MaxCoreFrequency = 2300, MinMemFrequency = 976, BaseMemFrequency = 1188, OverclockedMemFrequency = 1320, MaxMemFrequency = 1400, Length = 323, Wattage = 370, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 15090, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 16007, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_iGame_GeForce_RTX_3080_Vulcan_OC_10G_V);
            GPU GPU_GeForce_RTX_3080_FTW3_ULTRA_GAMING = new GPU() { Id = 192, Name = "GeForce RTX 3080 FTW3 ULTRA GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 1310, SellPrice = 437, LevelUnlock = 31, LevelPercent = 30, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3080, IsWaterCooled = false, RankingScore = 9885, VRAM = 10, MinCoreFrequency = 1300, BaseCoreFrequency = 1800, OverclockedCoreFrequency = 2100, MaxCoreFrequency = 2300, MinMemFrequency = 976, BaseMemFrequency = 1188, OverclockedMemFrequency = 1320, MaxMemFrequency = 1400, Length = 300, Wattage = 320, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 15090, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 16007, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_3080_FTW3_ULTRA_GAMING);
            GPU GPU_GeForce_RTX_3080_XC3_ULTRA_GAMING = new GPU() { Id = 193, Name = "GeForce RTX 3080 XC3 ULTRA GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 1295, SellPrice = 432, LevelUnlock = 31, LevelPercent = 10, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3080, IsWaterCooled = false, RankingScore = 9751, VRAM = 10, MinCoreFrequency = 1210, BaseCoreFrequency = 1755, OverclockedCoreFrequency = 2100, MaxCoreFrequency = 2300, MinMemFrequency = 976, BaseMemFrequency = 1188, OverclockedMemFrequency = 1320, MaxMemFrequency = 1400, Length = 285, Wattage = 320, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 14888, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 16007, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_3080_XC3_ULTRA_GAMING);
            GPU GPU_GeForce_RTX__3080_SUPRIM_X_10G = new GPU() { Id = 194, Name = "GeForce RTX™ 3080 SUPRIM X 10G", PartType = PartType.GPU, Manufacturer = MSI, Price = 1565, SellPrice = 522, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3080, IsWaterCooled = false, RankingScore = 10197, VRAM = 10, MinCoreFrequency = 1610, BaseCoreFrequency = 1905, OverclockedCoreFrequency = 2100, MaxCoreFrequency = 2200, MinMemFrequency = 976, BaseMemFrequency = 1188, OverclockedMemFrequency = 1320, MaxMemFrequency = 1400, Length = 336, Wattage = 320, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10, SingleGPUScore = 15563, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 16007, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX__3080_SUPRIM_X_10G);
            GPU GPU_GeForce_RTX_3080 = new GPU() { Id = 195, Name = "GeForce RTX 3080", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 1275, SellPrice = 425, LevelUnlock = 31, LevelPercent = 1, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3080, IsWaterCooled = false, RankingScore = 9617, VRAM = 10, MinCoreFrequency = 1120, BaseCoreFrequency = 1710, OverclockedCoreFrequency = 2100, MaxCoreFrequency = 2300, MinMemFrequency = 976, BaseMemFrequency = 1188, OverclockedMemFrequency = 1320, MaxMemFrequency = 1400, Length = 285, Wattage = 320, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 14685, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 16007, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_3080);
            GPU GPU_GAMING_GeForce_RTX_3080_Trinity = new GPU() { Id = 196, Name = "GAMING GeForce RTX 3080 Trinity", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 1400, SellPrice = 467, LevelUnlock = 32, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3080, IsWaterCooled = false, RankingScore = 9617, VRAM = 10, MinCoreFrequency = 1120, BaseCoreFrequency = 1710, OverclockedCoreFrequency = 2100, MaxCoreFrequency = 2300, MinMemFrequency = 976, BaseMemFrequency = 1188, OverclockedMemFrequency = 1320, MaxMemFrequency = 1400, Length = 317, Wattage = 320, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 14685, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 16457, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GAMING_GeForce_RTX_3080_Trinity);
            GPU GPU_GeForce_RTX_3080___Corsair_Hydro_X_Series_XG7_REFERENCE_RGB = new GPU() { Id = 197, Name = "GeForce RTX 3080 | Corsair Hydro X Series XG7 REFERENCE RGB", PartType = PartType.GPU, Manufacturer = CORSAIR, Price = 1700, SellPrice = 567, LevelUnlock = 31, LevelPercent = 90, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3080, IsWaterCooled = true, RankingScore = 9617, VRAM = 10, MinCoreFrequency = 820, BaseCoreFrequency = 1710, OverclockedCoreFrequency = 2239, MaxCoreFrequency = 2600, MinMemFrequency = 776, BaseMemFrequency = 1188, OverclockedMemFrequency = 1407, MaxMemFrequency = 1600, Length = 240, Wattage = 320, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 8.6, SingleGPUScore = 14685, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_3080___Corsair_Hydro_X_Series_XG7_REFERENCE_RGB);
            GPU GPU_GeForce_RTX_3080___Corsair_Hydro_X_Series_XG7_STRIX_RGB = new GPU() { Id = 198, Name = "GeForce RTX 3080 | Corsair Hydro X Series XG7 STRIX RGB", PartType = PartType.GPU, Manufacturer = CORSAIR, Price = 1700, SellPrice = 567, LevelUnlock = 31, LevelPercent = 90, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3080, IsWaterCooled = true, RankingScore = 9617, VRAM = 10, MinCoreFrequency = 820, BaseCoreFrequency = 1710, OverclockedCoreFrequency = 2239, MaxCoreFrequency = 2600, MinMemFrequency = 776, BaseMemFrequency = 1188, OverclockedMemFrequency = 1407, MaxMemFrequency = 1600, Length = 285, Wattage = 320, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin, Eight_Pin }, ScoreToValueRatio = 8.6, SingleGPUScore = 14685, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_3080___Corsair_Hydro_X_Series_XG7_STRIX_RGB);
            GPU GPU_GeForce_RTX_3080___Corsair_Hydro_X_Series_XG7_VENTUS_RGB = new GPU() { Id = 199, Name = "GeForce RTX 3080 | Corsair Hydro X Series XG7 VENTUS RGB", PartType = PartType.GPU, Manufacturer = CORSAIR, Price = 1700, SellPrice = 567, LevelUnlock = 31, LevelPercent = 90, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3080, IsWaterCooled = true, RankingScore = 9617, VRAM = 10, MinCoreFrequency = 820, BaseCoreFrequency = 1710, OverclockedCoreFrequency = 2239, MaxCoreFrequency = 2600, MinMemFrequency = 776, BaseMemFrequency = 1188, OverclockedMemFrequency = 1407, MaxMemFrequency = 1600, Length = 258, Wattage = 320, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 8.6, SingleGPUScore = 14685, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_3080___Corsair_Hydro_X_Series_XG7_VENTUS_RGB);
            GPU GPU_GeForce_RTX_3080_FE___Corsair_Hydro_X_Series_XG7_RGB = new GPU() { Id = 200, Name = "GeForce RTX 3080 FE | Corsair Hydro X Series XG7 RGB", PartType = PartType.GPU, Manufacturer = CORSAIR, Price = 1700, SellPrice = 567, LevelUnlock = 31, LevelPercent = 90, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3080, IsWaterCooled = true, RankingScore = 9617, VRAM = 10, MinCoreFrequency = 820, BaseCoreFrequency = 1710, OverclockedCoreFrequency = 2239, MaxCoreFrequency = 2600, MinMemFrequency = 776, BaseMemFrequency = 1188, OverclockedMemFrequency = 1407, MaxMemFrequency = 1600, Length = 200, Wattage = 320, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 8.6, SingleGPUScore = 14685, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_3080_FE___Corsair_Hydro_X_Series_XG7_RGB);
            GPU GPU_GeForce_RTX_3080_FTW3_ULTRA_HYDRO_COPPER_GAMING = new GPU() { Id = 201, Name = "GeForce RTX 3080 FTW3 ULTRA HYDRO COPPER GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 1800, SellPrice = 600, LevelUnlock = 31, LevelPercent = 90, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3080, IsWaterCooled = true, RankingScore = 9885, VRAM = 10, MinCoreFrequency = 1200, BaseCoreFrequency = 1800, OverclockedCoreFrequency = 2195, MaxCoreFrequency = 2400, MinMemFrequency = 876, BaseMemFrequency = 1188, OverclockedMemFrequency = 1379, MaxMemFrequency = 1500, Length = 289, Wattage = 320, MultiGPU = null, SlotSize = 1.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin, Eight_Pin }, ScoreToValueRatio = 8.4, SingleGPUScore = 15090, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_3080_FTW3_ULTRA_HYDRO_COPPER_GAMING);
            GPU GPU_GeForce_RTX_3080_XC3_ULTRA_HYDRO_COPPER_GAMING = new GPU() { Id = 202, Name = "GeForce RTX 3080 XC3 ULTRA HYDRO COPPER GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 1750, SellPrice = 583, LevelUnlock = 31, LevelPercent = 90, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3080, IsWaterCooled = true, RankingScore = 9751, VRAM = 10, MinCoreFrequency = 1010, BaseCoreFrequency = 1755, OverclockedCoreFrequency = 2195, MaxCoreFrequency = 2500, MinMemFrequency = 876, BaseMemFrequency = 1188, OverclockedMemFrequency = 1379, MaxMemFrequency = 1500, Length = 263, Wattage = 320, MultiGPU = null, SlotSize = 1.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 8.5, SingleGPUScore = 14888, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_3080_XC3_ULTRA_HYDRO_COPPER_GAMING);
            GPU GPU_GeForce_RTX_3080_Ti_Founders_Edition = new GPU() { Id = 203, Name = "GeForce RTX 3080 Ti Founders Edition", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 1555, SellPrice = 518, LevelUnlock = 32, LevelPercent = 80, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3080_Ti, IsWaterCooled = false, RankingScore = 11829, VRAM = 12, MinCoreFrequency = 1230, BaseCoreFrequency = 1665, OverclockedCoreFrequency = 1900, MaxCoreFrequency = 2100, MinMemFrequency = 1076, BaseMemFrequency = 1188, OverclockedMemFrequency = 1250, MaxMemFrequency = 1300, Length = 285, Wattage = 350, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 17890, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 19240, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_3080_Ti_Founders_Edition);
            GPU GPU_GAMING_GeForce_RTX_3080_Ti_AMP_Holo = new GPU() { Id = 204, Name = "GAMING GeForce RTX 3080 Ti AMP Holo", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 1805, SellPrice = 602, LevelUnlock = 34, LevelPercent = 90, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3080_Ti, IsWaterCooled = false, RankingScore = 11947, VRAM = 12, MinCoreFrequency = 1420, BaseCoreFrequency = 1710, OverclockedCoreFrequency = 1900, MaxCoreFrequency = 2000, MinMemFrequency = 1076, BaseMemFrequency = 1188, OverclockedMemFrequency = 1250, MaxMemFrequency = 1300, Length = 318, Wattage = 350, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10, SingleGPUScore = 18071, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 19240, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GAMING_GeForce_RTX_3080_Ti_AMP_Holo);
            GPU GPU_GAMING_GeForce_RTX_3080_Ti_Trinity_OC = new GPU() { Id = 205, Name = "GAMING GeForce RTX 3080 Ti Trinity OC", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 1725, SellPrice = 575, LevelUnlock = 34, LevelPercent = 90, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3080_Ti, IsWaterCooled = false, RankingScore = 11986, VRAM = 12, MinCoreFrequency = 1450, BaseCoreFrequency = 1725, OverclockedCoreFrequency = 1900, MaxCoreFrequency = 2000, MinMemFrequency = 1076, BaseMemFrequency = 1188, OverclockedMemFrequency = 1250, MaxMemFrequency = 1300, Length = 317, Wattage = 350, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 18131, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 19240, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GAMING_GeForce_RTX_3080_Ti_Trinity_OC);
            GPU GPU_GAMING_GeForce_RTX_3080_Trinity_OC_White_Edition = new GPU() { Id = 206, Name = "GAMING GeForce RTX 3080 Trinity OC White Edition", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 1410, SellPrice = 470, LevelUnlock = 31, LevelPercent = 50, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3080_Ti, IsWaterCooled = false, RankingScore = 12026, VRAM = 10, MinCoreFrequency = 1480, BaseCoreFrequency = 1740, OverclockedCoreFrequency = 1900, MaxCoreFrequency = 2000, MinMemFrequency = 1076, BaseMemFrequency = 1188, OverclockedMemFrequency = 1250, MaxMemFrequency = 1300, Length = 317, Wattage = 350, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 18192, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 16457, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GAMING_GeForce_RTX_3080_Trinity_OC_White_Edition);
            GPU GPU_ROG_Strix_GeForce_RTX_3090_O24G = new GPU() { Id = 207, Name = "ROG Strix GeForce RTX 3090 O24G", PartType = PartType.GPU, Manufacturer = ASUS, Price = 1700, SellPrice = 567, LevelUnlock = 32, LevelPercent = 50, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3090, IsWaterCooled = false, RankingScore = 12341, VRAM = 24, MinCoreFrequency = 1420, BaseCoreFrequency = 1860, OverclockedCoreFrequency = 2100, MaxCoreFrequency = 2300, MinMemFrequency = 38, BaseMemFrequency = 1219, OverclockedMemFrequency = 2000, MaxMemFrequency = 2400, Length = 318, Wattage = 350, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 18679, DualGPUScore = 32798, DualGPUPerformanceIncrease = 1.75587558220461, OverclockedSingleGPUScore = 23658, OverclockedDualGPUScore = 46739 }; gpus.Add(GPU_ROG_Strix_GeForce_RTX_3090_O24G);
            GPU GPU_GeForce_RTX_3090_NB_V = new GPU() { Id = 208, Name = "GeForce RTX 3090 NB-V", PartType = PartType.GPU, Manufacturer = Colorful, Price = 1805, SellPrice = 602, LevelUnlock = 32, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3090, IsWaterCooled = false, RankingScore = 11925, VRAM = 24, MinCoreFrequency = 990, BaseCoreFrequency = 1695, OverclockedCoreFrequency = 2100, MaxCoreFrequency = 2400, MinMemFrequency = 38, BaseMemFrequency = 1219, OverclockedMemFrequency = 2000, MaxMemFrequency = 2400, Length = 310, Wattage = 350, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10, SingleGPUScore = 18028, DualGPUScore = 31241, DualGPUPerformanceIncrease = 1.73291546483248, OverclockedSingleGPUScore = 23658, OverclockedDualGPUScore = 46739 }; gpus.Add(GPU_GeForce_RTX_3090_NB_V);
            GPU GPU_iGame_GeForce_RTX_3090_Advanced_OC_V = new GPU() { Id = 209, Name = "iGame GeForce RTX 3090 Advanced OC-V", PartType = PartType.GPU, Manufacturer = Colorful, Price = 1825, SellPrice = 608, LevelUnlock = 32, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3090, IsWaterCooled = false, RankingScore = 12076, VRAM = 24, MinCoreFrequency = 1210, BaseCoreFrequency = 1755, OverclockedCoreFrequency = 2100, MaxCoreFrequency = 2300, MinMemFrequency = 38, BaseMemFrequency = 1219, OverclockedMemFrequency = 2000, MaxMemFrequency = 2400, Length = 315, Wattage = 350, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10, SingleGPUScore = 18265, DualGPUScore = 31808, DualGPUPerformanceIncrease = 1.74147276211333, OverclockedSingleGPUScore = 23658, OverclockedDualGPUScore = 46739 }; gpus.Add(GPU_iGame_GeForce_RTX_3090_Advanced_OC_V);
            GPU GPU_GeForce_RTX_3090_FTW3_ULTRA_GAMING = new GPU() { Id = 210, Name = "GeForce RTX 3090 FTW3 ULTRA GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 1605, SellPrice = 535, LevelUnlock = 32, LevelPercent = 50, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3090, IsWaterCooled = false, RankingScore = 12190, VRAM = 24, MinCoreFrequency = 1300, BaseCoreFrequency = 1800, OverclockedCoreFrequency = 2100, MaxCoreFrequency = 2300, MinMemFrequency = 38, BaseMemFrequency = 1219, OverclockedMemFrequency = 2000, MaxMemFrequency = 2400, Length = 300, Wattage = 350, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 18442, DualGPUScore = 32232, DualGPUPerformanceIncrease = 1.7477497017677, OverclockedSingleGPUScore = 23658, OverclockedDualGPUScore = 46739 }; gpus.Add(GPU_GeForce_RTX_3090_FTW3_ULTRA_GAMING);
            GPU GPU_GeForce_RTX_3090_XC3_ULTRA_GAMING = new GPU() { Id = 211, Name = "GeForce RTX 3090 XC3 ULTRA GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 1580, SellPrice = 527, LevelUnlock = 32, LevelPercent = 50, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3090, IsWaterCooled = false, RankingScore = 12001, VRAM = 24, MinCoreFrequency = 1150, BaseCoreFrequency = 1725, OverclockedCoreFrequency = 2100, MaxCoreFrequency = 2300, MinMemFrequency = 38, BaseMemFrequency = 1219, OverclockedMemFrequency = 2000, MaxMemFrequency = 2400, Length = 285, Wattage = 350, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 18147, DualGPUScore = 31524, DualGPUPerformanceIncrease = 1.73714663580757, OverclockedSingleGPUScore = 23658, OverclockedDualGPUScore = 46739 }; gpus.Add(GPU_GeForce_RTX_3090_XC3_ULTRA_GAMING);
            GPU GPU_GeForce_RTX__3090_GAMING_X_TRIO_24G = new GPU() { Id = 212, Name = "GeForce RTX™ 3090 GAMING X TRIO 24G", PartType = PartType.GPU, Manufacturer = MSI, Price = 1840, SellPrice = 613, LevelUnlock = 32, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3090, IsWaterCooled = false, RankingScore = 12152, VRAM = 24, MinCoreFrequency = 1270, BaseCoreFrequency = 1785, OverclockedCoreFrequency = 2100, MaxCoreFrequency = 2300, MinMemFrequency = 38, BaseMemFrequency = 1219, OverclockedMemFrequency = 2000, MaxMemFrequency = 2400, Length = 323, Wattage = 370, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10, SingleGPUScore = 18383, DualGPUScore = 32091, DualGPUPerformanceIncrease = 1.7456889517489, OverclockedSingleGPUScore = 23658, OverclockedDualGPUScore = 46739 }; gpus.Add(GPU_GeForce_RTX__3090_GAMING_X_TRIO_24G);
            GPU GPU_GeForce_RTX__3090_SUPRIM_X_24G = new GPU() { Id = 213, Name = "GeForce RTX™ 3090 SUPRIM X 24G", PartType = PartType.GPU, Manufacturer = MSI, Price = 1870, SellPrice = 623, LevelUnlock = 32, LevelPercent = 50, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3090, IsWaterCooled = false, RankingScore = 12341, VRAM = 24, MinCoreFrequency = 1420, BaseCoreFrequency = 1860, OverclockedCoreFrequency = 2100, MaxCoreFrequency = 2300, MinMemFrequency = 38, BaseMemFrequency = 1219, OverclockedMemFrequency = 2000, MaxMemFrequency = 2400, Length = 336, Wattage = 350, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10, SingleGPUScore = 18679, DualGPUScore = 32798, DualGPUPerformanceIncrease = 1.75587558220461, OverclockedSingleGPUScore = 23658, OverclockedDualGPUScore = 46739 }; gpus.Add(GPU_GeForce_RTX__3090_SUPRIM_X_24G);
            GPU GPU_GeForce_RTX__3090_VENTUS_3X_24G_OC = new GPU() { Id = 214, Name = "GeForce RTX™ 3090 VENTUS 3X 24G OC", PartType = PartType.GPU, Manufacturer = MSI, Price = 1815, SellPrice = 605, LevelUnlock = 32, LevelPercent = 1, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3090, IsWaterCooled = false, RankingScore = 12001, VRAM = 24, MinCoreFrequency = 1150, BaseCoreFrequency = 1725, OverclockedCoreFrequency = 2100, MaxCoreFrequency = 2300, MinMemFrequency = 38, BaseMemFrequency = 1219, OverclockedMemFrequency = 2000, MaxMemFrequency = 2400, Length = 305, Wattage = 350, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10, SingleGPUScore = 18147, DualGPUScore = 31524, DualGPUPerformanceIncrease = 1.73714663580757, OverclockedSingleGPUScore = 23658, OverclockedDualGPUScore = 46739 }; gpus.Add(GPU_GeForce_RTX__3090_VENTUS_3X_24G_OC);
            GPU GPU_GeForce_RTX_3090 = new GPU() { Id = 215, Name = "GeForce RTX 3090", PartType = PartType.GPU, Manufacturer = NVIDIA, Price = 1570, SellPrice = 523, LevelUnlock = 32, LevelPercent = 1, Lighting = null, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3090, IsWaterCooled = false, RankingScore = 11925, VRAM = 24, MinCoreFrequency = 990, BaseCoreFrequency = 1695, OverclockedCoreFrequency = 2100, MaxCoreFrequency = 2400, MinMemFrequency = 38, BaseMemFrequency = 1219, OverclockedMemFrequency = 2000, MaxMemFrequency = 2400, Length = 313, Wattage = 350, MultiGPU = SLI, SlotSize = 3, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 18028, DualGPUScore = 31241, DualGPUPerformanceIncrease = 1.73291546483248, OverclockedSingleGPUScore = 23658, OverclockedDualGPUScore = 46739 }; gpus.Add(GPU_GeForce_RTX_3090);
            GPU GPU_GAMING_GeForce_RTX_3090_AMP_Core_Holo = new GPU() { Id = 216, Name = "GAMING GeForce RTX 3090 AMP Core Holo", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 1825, SellPrice = 608, LevelUnlock = 34, LevelPercent = 90, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3090, IsWaterCooled = false, RankingScore = 12076, VRAM = 24, MinCoreFrequency = 1210, BaseCoreFrequency = 1755, OverclockedCoreFrequency = 2100, MaxCoreFrequency = 2300, MinMemFrequency = 38, BaseMemFrequency = 1219, OverclockedMemFrequency = 2000, MaxMemFrequency = 2400, Length = 328, Wattage = 350, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10, SingleGPUScore = 18265, DualGPUScore = 31808, DualGPUPerformanceIncrease = 1.74147276211333, OverclockedSingleGPUScore = 23658, OverclockedDualGPUScore = 46739 }; gpus.Add(GPU_GAMING_GeForce_RTX_3090_AMP_Core_Holo);
            GPU GPU_GeForce_RTX_3090___Corsair_Hydro_X_Series_XG7_REFERENCE_RGB = new GPU() { Id = 217, Name = "GeForce RTX 3090 | Corsair Hydro X Series XG7 REFERENCE RGB", PartType = PartType.GPU, Manufacturer = CORSAIR, Price = 1900, SellPrice = 633, LevelUnlock = 32, LevelPercent = 90, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3090, IsWaterCooled = true, RankingScore = 11925, VRAM = 24, MinCoreFrequency = 790, BaseCoreFrequency = 1695, OverclockedCoreFrequency = 2239, MaxCoreFrequency = 2600, MinMemFrequency = -162, BaseMemFrequency = 1219, OverclockedMemFrequency = 2132, MaxMemFrequency = 2600, Length = 240, Wattage = 350, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 9.5, SingleGPUScore = 18028, DualGPUScore = 31241, DualGPUPerformanceIncrease = 1.73291546483248, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_3090___Corsair_Hydro_X_Series_XG7_REFERENCE_RGB);
            GPU GPU_GeForce_RTX_3090___Corsair_Hydro_X_Series_XG7_STRIX_RGB = new GPU() { Id = 218, Name = "GeForce RTX 3090 | Corsair Hydro X Series XG7 STRIX RGB", PartType = PartType.GPU, Manufacturer = CORSAIR, Price = 1900, SellPrice = 633, LevelUnlock = 32, LevelPercent = 90, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3090, IsWaterCooled = true, RankingScore = 11925, VRAM = 24, MinCoreFrequency = 790, BaseCoreFrequency = 1695, OverclockedCoreFrequency = 2239, MaxCoreFrequency = 2600, MinMemFrequency = -162, BaseMemFrequency = 1219, OverclockedMemFrequency = 2132, MaxMemFrequency = 2600, Length = 285, Wattage = 350, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin, Eight_Pin }, ScoreToValueRatio = 9.5, SingleGPUScore = 18028, DualGPUScore = 31241, DualGPUPerformanceIncrease = 1.73291546483248, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_3090___Corsair_Hydro_X_Series_XG7_STRIX_RGB);
            GPU GPU_GeForce_RTX_3090___Corsair_Hydro_X_Series_XG7_VENTUS_RGB = new GPU() { Id = 219, Name = "GeForce RTX 3090 | Corsair Hydro X Series XG7 VENTUS RGB", PartType = PartType.GPU, Manufacturer = CORSAIR, Price = 1900, SellPrice = 633, LevelUnlock = 32, LevelPercent = 90, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3090, IsWaterCooled = true, RankingScore = 11925, VRAM = 24, MinCoreFrequency = 790, BaseCoreFrequency = 1695, OverclockedCoreFrequency = 2239, MaxCoreFrequency = 2600, MinMemFrequency = -162, BaseMemFrequency = 1219, OverclockedMemFrequency = 2132, MaxMemFrequency = 2600, Length = 258, Wattage = 350, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 9.5, SingleGPUScore = 18028, DualGPUScore = 31241, DualGPUPerformanceIncrease = 1.73291546483248, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_3090___Corsair_Hydro_X_Series_XG7_VENTUS_RGB);
            GPU GPU_GeForce_RTX_3090_FE___Corsair_Hydro_X_Series_XG7_RGB = new GPU() { Id = 220, Name = "GeForce RTX 3090 FE | Corsair Hydro X Series XG7 RGB", PartType = PartType.GPU, Manufacturer = CORSAIR, Price = 1900, SellPrice = 633, LevelUnlock = 32, LevelPercent = 90, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3090, IsWaterCooled = true, RankingScore = 11925, VRAM = 24, MinCoreFrequency = 790, BaseCoreFrequency = 1695, OverclockedCoreFrequency = 2239, MaxCoreFrequency = 2600, MinMemFrequency = -162, BaseMemFrequency = 1219, OverclockedMemFrequency = 2132, MaxMemFrequency = 2600, Length = 200, Wattage = 350, MultiGPU = SLI, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 9.5, SingleGPUScore = 18028, DualGPUScore = 31241, DualGPUPerformanceIncrease = 1.73291546483248, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_3090_FE___Corsair_Hydro_X_Series_XG7_RGB);
            GPU GPU_GeForce_RTX_3090_FTW3_ULTRA_HYDRO_COPPER_GAMING = new GPU() { Id = 221, Name = "GeForce RTX 3090 FTW3 ULTRA HYDRO COPPER GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 2000, SellPrice = 667, LevelUnlock = 32, LevelPercent = 90, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3090, IsWaterCooled = true, RankingScore = 12190, VRAM = 24, MinCoreFrequency = 1200, BaseCoreFrequency = 1800, OverclockedCoreFrequency = 2195, MaxCoreFrequency = 2400, MinMemFrequency = -162, BaseMemFrequency = 1219, OverclockedMemFrequency = 2090, MaxMemFrequency = 2600, Length = 289, Wattage = 350, MultiGPU = SLI, SlotSize = 1.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin, Eight_Pin }, ScoreToValueRatio = 9.2, SingleGPUScore = 18442, DualGPUScore = 32232, DualGPUPerformanceIncrease = 1.7477497017677, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_3090_FTW3_ULTRA_HYDRO_COPPER_GAMING);
            GPU GPU_GeForce_RTX_3090_XC3_ULTRA_HYDRO_COPPER_GAMING = new GPU() { Id = 222, Name = "GeForce RTX 3090 XC3 ULTRA HYDRO COPPER GAMING", PartType = PartType.GPU, Manufacturer = EVGA, Price = 1950, SellPrice = 650, LevelUnlock = 32, LevelPercent = 90, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3090, IsWaterCooled = true, RankingScore = 12001, VRAM = 24, MinCoreFrequency = 950, BaseCoreFrequency = 1725, OverclockedCoreFrequency = 2195, MaxCoreFrequency = 2500, MinMemFrequency = -162, BaseMemFrequency = 1219, OverclockedMemFrequency = 2090, MaxMemFrequency = 2600, Length = 263, Wattage = 350, MultiGPU = SLI, SlotSize = 1.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin, Eight_Pin }, ScoreToValueRatio = 9.3, SingleGPUScore = 18147, DualGPUScore = 31524, DualGPUPerformanceIncrease = 1.73714663580757, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GeForce_RTX_3090_XC3_ULTRA_HYDRO_COPPER_GAMING);
            GPU GPU_GAMING_GeForce_RTX_3090_ArcticStorm = new GPU() { Id = 223, Name = "GAMING GeForce RTX 3090 ArcticStorm", PartType = PartType.GPU, Manufacturer = ZOTAC, Price = 1900, SellPrice = 633, LevelUnlock = 32, LevelPercent = 80, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.NVIDIA, GPUChipset = GeForce_RTX_3090, IsWaterCooled = true, RankingScore = 11925, VRAM = 24, MinCoreFrequency = 890, BaseCoreFrequency = 1695, OverclockedCoreFrequency = 2195, MaxCoreFrequency = 2500, MinMemFrequency = -162, BaseMemFrequency = 1219, OverclockedMemFrequency = 2090, MaxMemFrequency = 2600, Length = 303, Wattage = 350, MultiGPU = SLI, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin, Eight_Pin }, ScoreToValueRatio = 9.5, SingleGPUScore = 18028, DualGPUScore = 31241, DualGPUPerformanceIncrease = 1.73291546483248, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_GAMING_GeForce_RTX_3090_ArcticStorm);
            GPU GPU_Radeon_R9_280_GR8_3G = new GPU() { Id = 224, Name = "Radeon R9 280 GR8 3G", PartType = PartType.GPU, Manufacturer = DFL, Price = 160, SellPrice = 53, LevelUnlock = 1, LevelPercent = 1, Lighting = null, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_R9_280, IsWaterCooled = false, RankingScore = 1405, VRAM = 3, MinCoreFrequency = 566, BaseCoreFrequency = 933, OverclockedCoreFrequency = 1150, MaxCoreFrequency = 1300, MinMemFrequency = 900, BaseMemFrequency = 1250, OverclockedMemFrequency = 1450, MaxMemFrequency = 1600, Length = 147, Wattage = 200, MultiGPU = CrossFire, SlotSize = 1.5, PowerConnectors = null, ScoreToValueRatio = 12.6, SingleGPUScore = 2019, DualGPUScore = 4013, DualGPUPerformanceIncrease = 1.98761763249133, OverclockedSingleGPUScore = 2395, OverclockedDualGPUScore = 4382 }; gpus.Add(GPU_Radeon_R9_280_GR8_3G);
            GPU GPU_Radeon_R9_280_GAMING_3G = new GPU() { Id = 225, Name = "Radeon R9 280 GAMING 3G", PartType = PartType.GPU, Manufacturer = MSI, Price = 170, SellPrice = 57, LevelUnlock = 3, LevelPercent = 60, Lighting = null, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_R9_280, IsWaterCooled = false, RankingScore = 1472, VRAM = 3, MinCoreFrequency = 700, BaseCoreFrequency = 1000, OverclockedCoreFrequency = 1150, MaxCoreFrequency = 1300, MinMemFrequency = 900, BaseMemFrequency = 1250, OverclockedMemFrequency = 1450, MaxMemFrequency = 1600, Length = 269, Wattage = 200, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 12.5, SingleGPUScore = 2117, DualGPUScore = 4064, DualGPUPerformanceIncrease = 1.91969768540387, OverclockedSingleGPUScore = 2395, OverclockedDualGPUScore = 4382 }; gpus.Add(GPU_Radeon_R9_280_GAMING_3G);
            GPU GPU_Radeon_R9_280_GAMING_3G_LE = new GPU() { Id = 226, Name = "Radeon R9 280 GAMING 3G LE", PartType = PartType.GPU, Manufacturer = MSI, Price = 165, SellPrice = 55, LevelUnlock = 3, LevelPercent = 30, Lighting = null, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_R9_280, IsWaterCooled = false, RankingScore = 1431, VRAM = 3, MinCoreFrequency = 618, BaseCoreFrequency = 959, OverclockedCoreFrequency = 1150, MaxCoreFrequency = 1300, MinMemFrequency = 900, BaseMemFrequency = 1250, OverclockedMemFrequency = 1450, MaxMemFrequency = 1600, Length = 269, Wattage = 200, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 12.5, SingleGPUScore = 2057, DualGPUScore = 4033, DualGPUPerformanceIncrease = 1.9606222654351, OverclockedSingleGPUScore = 2395, OverclockedDualGPUScore = 4382 }; gpus.Add(GPU_Radeon_R9_280_GAMING_3G_LE);
            GPU GPU_Radeon_R9_290_GR8 = new GPU() { Id = 227, Name = "Radeon R9 290 GR8", PartType = PartType.GPU, Manufacturer = DFL, Price = 300, SellPrice = 100, LevelUnlock = 1, LevelPercent = 1, Lighting = null, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_R9_290, IsWaterCooled = false, RankingScore = 2465, VRAM = 4, MinCoreFrequency = 694, BaseCoreFrequency = 947, OverclockedCoreFrequency = 1075, MaxCoreFrequency = 1200, MinMemFrequency = 1000, BaseMemFrequency = 1250, OverclockedMemFrequency = 1400, MaxMemFrequency = 1500, Length = 147, Wattage = 275, MultiGPU = CrossFire, SlotSize = 1.5, PowerConnectors = null, ScoreToValueRatio = 11.9, SingleGPUScore = 3572, DualGPUScore = 7140, DualGPUPerformanceIncrease = 1.99888017917133, OverclockedSingleGPUScore = 3982, OverclockedDualGPUScore = 7925 }; gpus.Add(GPU_Radeon_R9_290_GR8);
            GPU GPU_Radeon_R9_290_GR8TOR = new GPU() { Id = 228, Name = "Radeon R9 290 GR8TOR", PartType = PartType.GPU, Manufacturer = DFL, Price = 325, SellPrice = 108, LevelUnlock = 1, LevelPercent = 1, Lighting = null, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_R9_290, IsWaterCooled = false, RankingScore = 2562, VRAM = 4, MinCoreFrequency = 800, BaseCoreFrequency = 1000, OverclockedCoreFrequency = 1075, MaxCoreFrequency = 1200, MinMemFrequency = 1000, BaseMemFrequency = 1250, OverclockedMemFrequency = 1400, MaxMemFrequency = 1500, Length = 147, Wattage = 275, MultiGPU = CrossFire, SlotSize = 1.5, PowerConnectors = null, ScoreToValueRatio = 11.4, SingleGPUScore = 3717, DualGPUScore = 7419, DualGPUPerformanceIncrease = 1.99596448748991, OverclockedSingleGPUScore = 3982, OverclockedDualGPUScore = 7925 }; gpus.Add(GPU_Radeon_R9_290_GR8TOR);
            GPU GPU_Radeon_R9_370_GAMING_2G = new GPU() { Id = 229, Name = "Radeon R9 370 GAMING 2G", PartType = PartType.GPU, Manufacturer = MSI, Price = 115, SellPrice = 38, LevelUnlock = 3, LevelPercent = 10, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_R9_370, IsWaterCooled = false, RankingScore = 1050, VRAM = 2, MinCoreFrequency = 860, BaseCoreFrequency = 1030, OverclockedCoreFrequency = 1100, MaxCoreFrequency = 1200, MinMemFrequency = 1000, BaseMemFrequency = 1400, OverclockedMemFrequency = 1600, MaxMemFrequency = 1800, Length = 258, Wattage = 110, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Six_Pin }, ScoreToValueRatio = 13.2, SingleGPUScore = 1516, DualGPUScore = 3345, DualGPUPerformanceIncrease = 2.20646437994723, OverclockedSingleGPUScore = 1633, OverclockedDualGPUScore = 3523 }; gpus.Add(GPU_Radeon_R9_370_GAMING_2G);
            GPU GPU_Radeon_R9_370_GAMING_4G = new GPU() { Id = 230, Name = "Radeon R9 370 GAMING 4G", PartType = PartType.GPU, Manufacturer = MSI, Price = 120, SellPrice = 40, LevelUnlock = 3, LevelPercent = 15, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_R9_370, IsWaterCooled = false, RankingScore = 1094, VRAM = 4, MinCoreFrequency = 940, BaseCoreFrequency = 1070, OverclockedCoreFrequency = 1100, MaxCoreFrequency = 1200, MinMemFrequency = 1250, BaseMemFrequency = 1425, OverclockedMemFrequency = 1500, MaxMemFrequency = 1600, Length = 258, Wattage = 110, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Six_Pin }, ScoreToValueRatio = 13.1, SingleGPUScore = 1574, DualGPUScore = 3446, DualGPUPerformanceIncrease = 2.18932655654384, OverclockedSingleGPUScore = 1624, OverclockedDualGPUScore = 3523 }; gpus.Add(GPU_Radeon_R9_370_GAMING_4G);
            GPU GPU_Radeon_R9_380_GAMING_2G = new GPU() { Id = 231, Name = "Radeon R9 380 GAMING 2G", PartType = PartType.GPU, Manufacturer = MSI, Price = 215, SellPrice = 72, LevelUnlock = 4, LevelPercent = 10, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_R9_380, IsWaterCooled = false, RankingScore = 1831, VRAM = 2, MinCoreFrequency = 660, BaseCoreFrequency = 980, OverclockedCoreFrequency = 1150, MaxCoreFrequency = 1300, MinMemFrequency = 1150, BaseMemFrequency = 1425, OverclockedMemFrequency = 1600, MaxMemFrequency = 1700, Length = 268, Wattage = 190, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 12.5, SingleGPUScore = 2685, DualGPUScore = 5313, DualGPUPerformanceIncrease = 1.97877094972067, OverclockedSingleGPUScore = 3075, OverclockedDualGPUScore = 5966 }; gpus.Add(GPU_Radeon_R9_380_GAMING_2G);
            GPU GPU_Radeon_R9_380_GAMING_4G = new GPU() { Id = 232, Name = "Radeon R9 380 GAMING 4G", PartType = PartType.GPU, Manufacturer = MSI, Price = 215, SellPrice = 72, LevelUnlock = 4, LevelPercent = 30, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_R9_380, IsWaterCooled = false, RankingScore = 1831, VRAM = 4, MinCoreFrequency = 660, BaseCoreFrequency = 980, OverclockedCoreFrequency = 1150, MaxCoreFrequency = 1300, MinMemFrequency = 1250, BaseMemFrequency = 1425, OverclockedMemFrequency = 1500, MaxMemFrequency = 1600, Length = 268, Wattage = 190, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 12.5, SingleGPUScore = 2685, DualGPUScore = 5313, DualGPUPerformanceIncrease = 1.97877094972067, OverclockedSingleGPUScore = 3050, OverclockedDualGPUScore = 5933 }; gpus.Add(GPU_Radeon_R9_380_GAMING_4G);
            GPU GPU_Radeon_R9_390_GAMING_8G = new GPU() { Id = 233, Name = "Radeon R9 390 GAMING 8G", PartType = PartType.GPU, Manufacturer = MSI, Price = 350, SellPrice = 117, LevelUnlock = 7, LevelPercent = 20, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_R9_390, IsWaterCooled = false, RankingScore = 2787, VRAM = 8, MinCoreFrequency = 920, BaseCoreFrequency = 1060, OverclockedCoreFrequency = 1100, MaxCoreFrequency = 1200, MinMemFrequency = 1350, BaseMemFrequency = 1525, OverclockedMemFrequency = 1600, MaxMemFrequency = 1700, Length = 277, Wattage = 275, MultiGPU = CrossFire, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 4041, DualGPUScore = 7984, DualGPUPerformanceIncrease = 1.97574857708488, OverclockedSingleGPUScore = 4174, OverclockedDualGPUScore = 8358 }; gpus.Add(GPU_Radeon_R9_390_GAMING_8G);
            GPU GPU_Radeon_R9_390_GAMING_8G_LE = new GPU() { Id = 234, Name = "Radeon R9 390 GAMING 8G LE", PartType = PartType.GPU, Manufacturer = MSI, Price = 340, SellPrice = 113, LevelUnlock = 7, LevelPercent = 40, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_R9_390, IsWaterCooled = false, RankingScore = 2682, VRAM = 8, MinCoreFrequency = 820, BaseCoreFrequency = 1010, OverclockedCoreFrequency = 1100, MaxCoreFrequency = 1200, MinMemFrequency = 1300, BaseMemFrequency = 1500, OverclockedMemFrequency = 1600, MaxMemFrequency = 1700, Length = 277, Wattage = 275, MultiGPU = CrossFire, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 11.4, SingleGPUScore = 3885, DualGPUScore = 7586, DualGPUPerformanceIncrease = 1.95263835263835, OverclockedSingleGPUScore = 4174, OverclockedDualGPUScore = 8358 }; gpus.Add(GPU_Radeon_R9_390_GAMING_8G_LE);
            GPU GPU_Radeon_R9_390X_GAMING_8G = new GPU() { Id = 235, Name = "Radeon R9 390X GAMING 8G", PartType = PartType.GPU, Manufacturer = MSI, Price = 395, SellPrice = 132, LevelUnlock = 7, LevelPercent = 60, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_R9_390X, IsWaterCooled = false, RankingScore = 2985, VRAM = 8, MinCoreFrequency = 1000, BaseCoreFrequency = 1100, OverclockedCoreFrequency = 1150, MaxCoreFrequency = 1200, MinMemFrequency = 1350, BaseMemFrequency = 1525, OverclockedMemFrequency = 1600, MaxMemFrequency = 1700, Length = 277, Wattage = 275, MultiGPU = CrossFire, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 4334, DualGPUScore = 8447, DualGPUPerformanceIncrease = 1.94900784494693, OverclockedSingleGPUScore = 4488, OverclockedDualGPUScore = 8820 }; gpus.Add(GPU_Radeon_R9_390X_GAMING_8G);
            GPU GPU_Radeon_R9_390X_GAMING_8G_LE = new GPU() { Id = 236, Name = "Radeon R9 390X GAMING 8G LE", PartType = PartType.GPU, Manufacturer = MSI, Price = 385, SellPrice = 128, LevelUnlock = 7, LevelPercent = 80, Lighting = Color.White, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_R9_390X, IsWaterCooled = false, RankingScore = 2904, VRAM = 8, MinCoreFrequency = 920, BaseCoreFrequency = 1060, OverclockedCoreFrequency = 1150, MaxCoreFrequency = 1200, MinMemFrequency = 1300, BaseMemFrequency = 1500, OverclockedMemFrequency = 1600, MaxMemFrequency = 1700, Length = 277, Wattage = 275, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 10.9, SingleGPUScore = 4212, DualGPUScore = 8158, DualGPUPerformanceIncrease = 1.93684710351377, OverclockedSingleGPUScore = 4488, OverclockedDualGPUScore = 8820 }; gpus.Add(GPU_Radeon_R9_390X_GAMING_8G_LE);
            GPU GPU_Radeon_RX_470_GAMING_4G = new GPU() { Id = 237, Name = "Radeon RX 470 GAMING 4G", PartType = PartType.GPU, Manufacturer = MSI, Price = 295, SellPrice = 98, LevelUnlock = 4, LevelPercent = 30, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_470, IsWaterCooled = false, RankingScore = 2382, VRAM = 4, MinCoreFrequency = 936, BaseCoreFrequency = 1218, OverclockedCoreFrequency = 1350, MaxCoreFrequency = 1500, MinMemFrequency = 1500, BaseMemFrequency = 1650, OverclockedMemFrequency = 1700, MaxMemFrequency = 1800, Length = 276, Wattage = 120, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 12, SingleGPUScore = 3539, DualGPUScore = 7196, DualGPUPerformanceIncrease = 2.03334275218988, OverclockedSingleGPUScore = 3845, OverclockedDualGPUScore = 7302 }; gpus.Add(GPU_Radeon_RX_470_GAMING_4G);
            GPU GPU_Radeon_RX_470_GAMING_8G = new GPU() { Id = 238, Name = "Radeon RX 470 GAMING 8G", PartType = PartType.GPU, Manufacturer = MSI, Price = 295, SellPrice = 98, LevelUnlock = 4, LevelPercent = 50, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_470, IsWaterCooled = false, RankingScore = 2382, VRAM = 8, MinCoreFrequency = 936, BaseCoreFrequency = 1218, OverclockedCoreFrequency = 1380, MaxCoreFrequency = 1500, MinMemFrequency = 1400, BaseMemFrequency = 1650, OverclockedMemFrequency = 1800, MaxMemFrequency = 1900, Length = 276, Wattage = 120, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 12, SingleGPUScore = 3539, DualGPUScore = 7196, DualGPUPerformanceIncrease = 2.03334275218988, OverclockedSingleGPUScore = 3968, OverclockedDualGPUScore = 7327 }; gpus.Add(GPU_Radeon_RX_470_GAMING_8G);
            GPU GPU_Radeon_RX_470_GAMING_X_4G = new GPU() { Id = 239, Name = "Radeon RX 470 GAMING X 4G", PartType = PartType.GPU, Manufacturer = MSI, Price = 300, SellPrice = 100, LevelUnlock = 4, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_470, IsWaterCooled = false, RankingScore = 2415, VRAM = 4, MinCoreFrequency = 984, BaseCoreFrequency = 1242, OverclockedCoreFrequency = 1350, MaxCoreFrequency = 1500, MinMemFrequency = 1500, BaseMemFrequency = 1650, OverclockedMemFrequency = 1700, MaxMemFrequency = 1800, Length = 276, Wattage = 120, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 12, SingleGPUScore = 3589, DualGPUScore = 7215, DualGPUPerformanceIncrease = 2.01030927835052, OverclockedSingleGPUScore = 3845, OverclockedDualGPUScore = 7302 }; gpus.Add(GPU_Radeon_RX_470_GAMING_X_4G);
            GPU GPU_Radeon_RX_470_GAMING_X_8G = new GPU() { Id = 240, Name = "Radeon RX 470 GAMING X 8G", PartType = PartType.GPU, Manufacturer = MSI, Price = 300, SellPrice = 100, LevelUnlock = 4, LevelPercent = 75, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_470, IsWaterCooled = false, RankingScore = 2415, VRAM = 8, MinCoreFrequency = 984, BaseCoreFrequency = 1242, OverclockedCoreFrequency = 1380, MaxCoreFrequency = 1500, MinMemFrequency = 1400, BaseMemFrequency = 1650, OverclockedMemFrequency = 1800, MaxMemFrequency = 1900, Length = 276, Wattage = 120, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 12, SingleGPUScore = 3589, DualGPUScore = 7215, DualGPUPerformanceIncrease = 2.01030927835052, OverclockedSingleGPUScore = 3968, OverclockedDualGPUScore = 7327 }; gpus.Add(GPU_Radeon_RX_470_GAMING_X_8G);
            GPU GPU_Radeon_RX_480_GAMING_4G = new GPU() { Id = 241, Name = "Radeon RX 480 GAMING 4G", PartType = PartType.GPU, Manufacturer = MSI, Price = 340, SellPrice = 113, LevelUnlock = 10, LevelPercent = 10, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_480, IsWaterCooled = false, RankingScore = 2630, VRAM = 4, MinCoreFrequency = 1158, BaseCoreFrequency = 1279, OverclockedCoreFrequency = 1350, MaxCoreFrequency = 1400, MinMemFrequency = 1000, BaseMemFrequency = 1750, OverclockedMemFrequency = 2200, MaxMemFrequency = 2500, Length = 276, Wattage = 150, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 3911, DualGPUScore = 7564, DualGPUPerformanceIncrease = 1.93403221682434, OverclockedSingleGPUScore = 4306, OverclockedDualGPUScore = 8264 }; gpus.Add(GPU_Radeon_RX_480_GAMING_4G);
            GPU GPU_Radeon_RX_480_GAMING_8G = new GPU() { Id = 242, Name = "Radeon RX 480 GAMING 8G", PartType = PartType.GPU, Manufacturer = MSI, Price = 350, SellPrice = 117, LevelUnlock = 10, LevelPercent = 35, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_480, IsWaterCooled = false, RankingScore = 2709, VRAM = 8, MinCoreFrequency = 1158, BaseCoreFrequency = 1279, OverclockedCoreFrequency = 1350, MaxCoreFrequency = 1400, MinMemFrequency = 1600, BaseMemFrequency = 2000, OverclockedMemFrequency = 2200, MaxMemFrequency = 2400, Length = 276, Wattage = 150, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 4024, DualGPUScore = 7727, DualGPUPerformanceIncrease = 1.92022862823062, OverclockedSingleGPUScore = 4306, OverclockedDualGPUScore = 8264 }; gpus.Add(GPU_Radeon_RX_480_GAMING_8G);
            GPU GPU_Radeon_RX_480_GAMING_X_4G = new GPU() { Id = 243, Name = "Radeon RX 480 GAMING X 4G", PartType = PartType.GPU, Manufacturer = MSI, Price = 345, SellPrice = 115, LevelUnlock = 10, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_480, IsWaterCooled = false, RankingScore = 2673, VRAM = 4, MinCoreFrequency = 1206, BaseCoreFrequency = 1303, OverclockedCoreFrequency = 1350, MaxCoreFrequency = 1400, MinMemFrequency = 1000, BaseMemFrequency = 1750, OverclockedMemFrequency = 2200, MaxMemFrequency = 2500, Length = 276, Wattage = 150, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 3976, DualGPUScore = 7701, DualGPUPerformanceIncrease = 1.93687122736419, OverclockedSingleGPUScore = 4306, OverclockedDualGPUScore = 8264 }; gpus.Add(GPU_Radeon_RX_480_GAMING_X_4G);
            GPU GPU_Radeon_RX_480_GAMING_X_8G = new GPU() { Id = 244, Name = "Radeon RX 480 GAMING X 8G", PartType = PartType.GPU, Manufacturer = MSI, Price = 355, SellPrice = 118, LevelUnlock = 10, LevelPercent = 75, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_480, IsWaterCooled = false, RankingScore = 2753, VRAM = 8, MinCoreFrequency = 1206, BaseCoreFrequency = 1303, OverclockedCoreFrequency = 1350, MaxCoreFrequency = 1400, MinMemFrequency = 1600, BaseMemFrequency = 2000, OverclockedMemFrequency = 2200, MaxMemFrequency = 2400, Length = 276, Wattage = 150, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 4089, DualGPUScore = 7864, DualGPUPerformanceIncrease = 1.92320860846173, OverclockedSingleGPUScore = 4306, OverclockedDualGPUScore = 8264 }; gpus.Add(GPU_Radeon_RX_480_GAMING_X_8G);
            GPU GPU_Phantom_Gaming_Radeon_RX560_4G = new GPU() { Id = 245, Name = "Phantom Gaming Radeon RX560 4G", PartType = PartType.GPU, Manufacturer = ASRock, Price = 155, SellPrice = 52, LevelUnlock = 2, LevelPercent = 50, Lighting = null, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX560, IsWaterCooled = false, RankingScore = 1278, VRAM = 4, MinCoreFrequency = 846, BaseCoreFrequency = 1223, OverclockedCoreFrequency = 1440, MaxCoreFrequency = 1600, MinMemFrequency = 1414, BaseMemFrequency = 1757, OverclockedMemFrequency = 1950, MaxMemFrequency = 2100, Length = 170, Wattage = 75, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = null, ScoreToValueRatio = 12.1, SingleGPUScore = 1878, DualGPUScore = 3653, DualGPUPerformanceIncrease = 1.94515441959531, OverclockedSingleGPUScore = 2147, OverclockedDualGPUScore = 4346 }; gpus.Add(GPU_Phantom_Gaming_Radeon_RX560_4G);
            GPU GPU_Radeon_RX_560 = new GPU() { Id = 246, Name = "Radeon RX 560", PartType = PartType.GPU, Manufacturer = ASUS, Price = 160, SellPrice = 53, LevelUnlock = 2, LevelPercent = 10, Lighting = null, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX560, IsWaterCooled = false, RankingScore = 1319, VRAM = 4, MinCoreFrequency = 950, BaseCoreFrequency = 1275, OverclockedCoreFrequency = 1440, MaxCoreFrequency = 1600, MinMemFrequency = 1400, BaseMemFrequency = 1750, OverclockedMemFrequency = 1950, MaxMemFrequency = 2100, Length = 220, Wattage = 75, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = null, ScoreToValueRatio = 12.1, SingleGPUScore = 1940, DualGPUScore = 3810, DualGPUPerformanceIncrease = 1.9639175257732, OverclockedSingleGPUScore = 2147, OverclockedDualGPUScore = 4346 }; gpus.Add(GPU_Radeon_RX_560);
            GPU GPU_ROG_Strix_Radeon_RX_560_OC_Edition = new GPU() { Id = 247, Name = "ROG Strix Radeon RX 560 OC Edition", PartType = PartType.GPU, Manufacturer = ASUS, Price = 165, SellPrice = 55, LevelUnlock = 2, LevelPercent = 30, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX560, IsWaterCooled = false, RankingScore = 1360, VRAM = 4, MinCoreFrequency = 1152, BaseCoreFrequency = 1326, OverclockedCoreFrequency = 1440, MaxCoreFrequency = 1500, MinMemFrequency = 1400, BaseMemFrequency = 1750, OverclockedMemFrequency = 1950, MaxMemFrequency = 2100, Length = 194, Wattage = 75, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Six_Pin }, ScoreToValueRatio = 12.1, SingleGPUScore = 2001, DualGPUScore = 3965, DualGPUPerformanceIncrease = 1.98150924537731, OverclockedSingleGPUScore = 2147, OverclockedDualGPUScore = 4346 }; gpus.Add(GPU_ROG_Strix_Radeon_RX_560_OC_Edition);
            GPU GPU_Expedition_Radeon_RX_570_OC_Edition = new GPU() { Id = 248, Name = "Expedition Radeon RX 570 OC Edition", PartType = PartType.GPU, Manufacturer = ASUS, Price = 320, SellPrice = 107, LevelUnlock = 8, LevelPercent = 1, Lighting = null, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX570, IsWaterCooled = false, RankingScore = 2510, VRAM = 4, MinCoreFrequency = 1012, BaseCoreFrequency = 1256, OverclockedCoreFrequency = 1410, MaxCoreFrequency = 1500, MinMemFrequency = 1300, BaseMemFrequency = 1750, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 240, Wattage = 120, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 3683, DualGPUScore = 6908, DualGPUPerformanceIncrease = 1.87564485473799, OverclockedSingleGPUScore = 4000, OverclockedDualGPUScore = 7748 }; gpus.Add(GPU_Expedition_Radeon_RX_570_OC_Edition);
            GPU GPU_ROG_Strix_Radeon_RX_570_8G = new GPU() { Id = 249, Name = "ROG Strix Radeon RX 570 8G", PartType = PartType.GPU, Manufacturer = ASUS, Price = 320, SellPrice = 107, LevelUnlock = 21, LevelPercent = 80, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX570, IsWaterCooled = false, RankingScore = 2507, VRAM = 8, MinCoreFrequency = 1008, BaseCoreFrequency = 1254, OverclockedCoreFrequency = 1410, MaxCoreFrequency = 1500, MinMemFrequency = 1300, BaseMemFrequency = 1750, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 240, Wattage = 120, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 3679, DualGPUScore = 6901, DualGPUPerformanceIncrease = 1.8757814623539, OverclockedSingleGPUScore = 4000, OverclockedDualGPUScore = 7748 }; gpus.Add(GPU_ROG_Strix_Radeon_RX_570_8G);
            GPU GPU_ROG_Strix_Radeon_RX_570_8G_OC_Edition = new GPU() { Id = 250, Name = "ROG Strix Radeon RX 570 8G OC Edition", PartType = PartType.GPU, Manufacturer = ASUS, Price = 330, SellPrice = 110, LevelUnlock = 21, LevelPercent = 80, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX570, IsWaterCooled = false, RankingScore = 2579, VRAM = 8, MinCoreFrequency = 1120, BaseCoreFrequency = 1310, OverclockedCoreFrequency = 1410, MaxCoreFrequency = 1500, MinMemFrequency = 1300, BaseMemFrequency = 1750, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 240, Wattage = 120, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 3790, DualGPUScore = 7083, DualGPUPerformanceIncrease = 1.8688654353562, OverclockedSingleGPUScore = 4000, OverclockedDualGPUScore = 7748 }; gpus.Add(GPU_ROG_Strix_Radeon_RX_570_8G_OC_Edition);
            GPU GPU_ROG_Strix_Radeon_RX_570_OC_Edition = new GPU() { Id = 251, Name = "ROG Strix Radeon RX 570 OC Edition", PartType = PartType.GPU, Manufacturer = ASUS, Price = 330, SellPrice = 110, LevelUnlock = 8, LevelPercent = 70, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX570, IsWaterCooled = false, RankingScore = 2566, VRAM = 4, MinCoreFrequency = 1100, BaseCoreFrequency = 1300, OverclockedCoreFrequency = 1410, MaxCoreFrequency = 1500, MinMemFrequency = 1300, BaseMemFrequency = 1750, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 240, Wattage = 120, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.4, SingleGPUScore = 3771, DualGPUScore = 7050, DualGPUPerformanceIncrease = 1.86953062848051, OverclockedSingleGPUScore = 4000, OverclockedDualGPUScore = 7748 }; gpus.Add(GPU_ROG_Strix_Radeon_RX_570_OC_Edition);
            GPU GPU_AORUS_Radeon_RX570_4G = new GPU() { Id = 252, Name = "AORUS Radeon RX570 4G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 325, SellPrice = 108, LevelUnlock = 8, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX570, IsWaterCooled = false, RankingScore = 2560, VRAM = 4, MinCoreFrequency = 1090, BaseCoreFrequency = 1295, OverclockedCoreFrequency = 1410, MaxCoreFrequency = 1500, MinMemFrequency = 1300, BaseMemFrequency = 1750, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 232, Wattage = 120, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.6, SingleGPUScore = 3761, DualGPUScore = 7034, DualGPUPerformanceIncrease = 1.87024727466099, OverclockedSingleGPUScore = 4000, OverclockedDualGPUScore = 7748 }; gpus.Add(GPU_AORUS_Radeon_RX570_4G);
            GPU GPU_Radeon_RX_570_GAMING_4G = new GPU() { Id = 253, Name = "Radeon RX 570 GAMING 4G", PartType = PartType.GPU, Manufacturer = MSI, Price = 320, SellPrice = 107, LevelUnlock = 8, LevelPercent = 80, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX570, IsWaterCooled = false, RankingScore = 2525, VRAM = 4, MinCoreFrequency = 1036, BaseCoreFrequency = 1268, OverclockedCoreFrequency = 1410, MaxCoreFrequency = 1500, MinMemFrequency = 1300, BaseMemFrequency = 1750, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 276, Wattage = 120, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.6, SingleGPUScore = 3707, DualGPUScore = 6947, DualGPUPerformanceIncrease = 1.87402212031292, OverclockedSingleGPUScore = 4000, OverclockedDualGPUScore = 7748 }; gpus.Add(GPU_Radeon_RX_570_GAMING_4G);
            GPU GPU_Radeon_RX_570_GAMING_8G = new GPU() { Id = 254, Name = "Radeon RX 570 GAMING 8G", PartType = PartType.GPU, Manufacturer = MSI, Price = 320, SellPrice = 107, LevelUnlock = 8, LevelPercent = 60, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX570, IsWaterCooled = false, RankingScore = 2525, VRAM = 8, MinCoreFrequency = 1036, BaseCoreFrequency = 1268, OverclockedCoreFrequency = 1410, MaxCoreFrequency = 1500, MinMemFrequency = 1300, BaseMemFrequency = 1750, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 276, Wattage = 120, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.6, SingleGPUScore = 3707, DualGPUScore = 6947, DualGPUPerformanceIncrease = 1.87402212031292, OverclockedSingleGPUScore = 4000, OverclockedDualGPUScore = 7748 }; gpus.Add(GPU_Radeon_RX_570_GAMING_8G);
            GPU GPU_Radeon_RX_570_GAMING_X_4G = new GPU() { Id = 255, Name = "Radeon RX 570 GAMING X 4G", PartType = PartType.GPU, Manufacturer = MSI, Price = 325, SellPrice = 108, LevelUnlock = 8, LevelPercent = 40, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX570, IsWaterCooled = false, RankingScore = 2558, VRAM = 4, MinCoreFrequency = 1086, BaseCoreFrequency = 1293, OverclockedCoreFrequency = 1410, MaxCoreFrequency = 1500, MinMemFrequency = 1350, BaseMemFrequency = 1775, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 276, Wattage = 120, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.6, SingleGPUScore = 3758, DualGPUScore = 7062, DualGPUPerformanceIncrease = 1.87919105907398, OverclockedSingleGPUScore = 4000, OverclockedDualGPUScore = 7748 }; gpus.Add(GPU_Radeon_RX_570_GAMING_X_4G);
            GPU GPU_Radeon_RX_570_GAMING_X_8G = new GPU() { Id = 256, Name = "Radeon RX 570 GAMING X 8G", PartType = PartType.GPU, Manufacturer = MSI, Price = 325, SellPrice = 108, LevelUnlock = 8, LevelPercent = 20, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX570, IsWaterCooled = false, RankingScore = 2558, VRAM = 8, MinCoreFrequency = 1086, BaseCoreFrequency = 1293, OverclockedCoreFrequency = 1410, MaxCoreFrequency = 1500, MinMemFrequency = 1350, BaseMemFrequency = 1775, OverclockedMemFrequency = 2000, MaxMemFrequency = 2200, Length = 276, Wattage = 120, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.6, SingleGPUScore = 3758, DualGPUScore = 7062, DualGPUPerformanceIncrease = 1.87919105907398, OverclockedSingleGPUScore = 4000, OverclockedDualGPUScore = 7748 }; gpus.Add(GPU_Radeon_RX_570_GAMING_X_8G);
            GPU GPU_Phantom_Gaming_D_Radeon_RX580_8G_OC = new GPU() { Id = 257, Name = "Phantom Gaming D Radeon RX580 8G OC", PartType = PartType.GPU, Manufacturer = ASRock, Price = 390, SellPrice = 130, LevelUnlock = 14, LevelPercent = 80, Lighting = null, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX580, IsWaterCooled = false, RankingScore = 2906, VRAM = 8, MinCoreFrequency = 1140, BaseCoreFrequency = 1370, OverclockedCoreFrequency = 1490, MaxCoreFrequency = 1600, MinMemFrequency = 1600, BaseMemFrequency = 2000, OverclockedMemFrequency = 2200, MaxMemFrequency = 2400, Length = 237, Wattage = 185, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Six_Pin }, ScoreToValueRatio = 11.1, SingleGPUScore = 4311, DualGPUScore = 8482, DualGPUPerformanceIncrease = 1.9675249362097, OverclockedSingleGPUScore = 4610, OverclockedDualGPUScore = 9030 }; gpus.Add(GPU_Phantom_Gaming_D_Radeon_RX580_8G_OC);
            GPU GPU_Phantom_Gaming_X_Radeon_RX580_8G_OC = new GPU() { Id = 258, Name = "Phantom Gaming X Radeon RX580 8G OC", PartType = PartType.GPU, Manufacturer = ASRock, Price = 395, SellPrice = 132, LevelUnlock = 14, LevelPercent = 85, Lighting = null, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX580, IsWaterCooled = false, RankingScore = 2919, VRAM = 8, MinCoreFrequency = 1160, BaseCoreFrequency = 1380, OverclockedCoreFrequency = 1490, MaxCoreFrequency = 1600, MinMemFrequency = 1600, BaseMemFrequency = 2000, OverclockedMemFrequency = 2200, MaxMemFrequency = 2400, Length = 279, Wattage = 185, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 4331, DualGPUScore = 8522, DualGPUPerformanceIncrease = 1.96767490187024, OverclockedSingleGPUScore = 4610, OverclockedDualGPUScore = 9030 }; gpus.Add(GPU_Phantom_Gaming_X_Radeon_RX580_8G_OC);
            GPU GPU_AREZ_Strix_Radeon_RX_580 = new GPU() { Id = 259, Name = "AREZ Strix Radeon RX 580", PartType = PartType.GPU, Manufacturer = ASUS, Price = 385, SellPrice = 128, LevelUnlock = 14, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX580, IsWaterCooled = false, RankingScore = 2865, VRAM = 8, MinCoreFrequency = 1080, BaseCoreFrequency = 1340, OverclockedCoreFrequency = 1490, MaxCoreFrequency = 1600, MinMemFrequency = 1600, BaseMemFrequency = 2000, OverclockedMemFrequency = 2200, MaxMemFrequency = 2400, Length = 298, Wattage = 185, MultiGPU = CrossFire, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 4248, DualGPUScore = 8363, DualGPUPerformanceIncrease = 1.96869114877589, OverclockedSingleGPUScore = 4610, OverclockedDualGPUScore = 9030 }; gpus.Add(GPU_AREZ_Strix_Radeon_RX_580);
            GPU GPU_Dual_Series_Radeon_RX_580_OC_Edition = new GPU() { Id = 260, Name = "Dual Series Radeon RX 580 OC Edition", PartType = PartType.GPU, Manufacturer = ASUS, Price = 390, SellPrice = 130, LevelUnlock = 14, LevelPercent = 20, Lighting = null, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX580, IsWaterCooled = false, RankingScore = 2892, VRAM = 8, MinCoreFrequency = 1120, BaseCoreFrequency = 1360, OverclockedCoreFrequency = 1490, MaxCoreFrequency = 1600, MinMemFrequency = 1600, BaseMemFrequency = 2000, OverclockedMemFrequency = 2200, MaxMemFrequency = 2400, Length = 242, Wattage = 185, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 4290, DualGPUScore = 8442, DualGPUPerformanceIncrease = 1.96783216783217, OverclockedSingleGPUScore = 4610, OverclockedDualGPUScore = 9030 }; gpus.Add(GPU_Dual_Series_Radeon_RX_580_OC_Edition);
            GPU GPU_AORUS_Radeon_RX580_4G = new GPU() { Id = 261, Name = "AORUS Radeon RX580 4G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 390, SellPrice = 130, LevelUnlock = 16, LevelPercent = 75, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX580, IsWaterCooled = false, RankingScore = 2877, VRAM = 4, MinCoreFrequency = 1160, BaseCoreFrequency = 1380, OverclockedCoreFrequency = 1490, MaxCoreFrequency = 1600, MinMemFrequency = 1000, BaseMemFrequency = 1750, OverclockedMemFrequency = 2200, MaxMemFrequency = 2500, Length = 232, Wattage = 185, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 4271, DualGPUScore = 8434, DualGPUPerformanceIncrease = 1.97471318192461, OverclockedSingleGPUScore = 4610, OverclockedDualGPUScore = 9030 }; gpus.Add(GPU_AORUS_Radeon_RX580_4G);
            GPU GPU_AORUS_Radeon_RX580_8G = new GPU() { Id = 262, Name = "AORUS Radeon RX580 8G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 395, SellPrice = 132, LevelUnlock = 16, LevelPercent = 50, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX580, IsWaterCooled = false, RankingScore = 2919, VRAM = 8, MinCoreFrequency = 1160, BaseCoreFrequency = 1380, OverclockedCoreFrequency = 1490, MaxCoreFrequency = 1600, MinMemFrequency = 1600, BaseMemFrequency = 2000, OverclockedMemFrequency = 2200, MaxMemFrequency = 2400, Length = 232, Wattage = 185, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 4331, DualGPUScore = 8522, DualGPUPerformanceIncrease = 1.96767490187024, OverclockedSingleGPUScore = 4610, OverclockedDualGPUScore = 9030 }; gpus.Add(GPU_AORUS_Radeon_RX580_8G);
            GPU GPU_Radeon_RX_580_GAMING_4G = new GPU() { Id = 263, Name = "Radeon RX 580 GAMING 4G", PartType = PartType.GPU, Manufacturer = MSI, Price = 385, SellPrice = 128, LevelUnlock = 16, LevelPercent = 25, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX580, IsWaterCooled = false, RankingScore = 2858, VRAM = 4, MinCoreFrequency = 1132, BaseCoreFrequency = 1366, OverclockedCoreFrequency = 1490, MaxCoreFrequency = 1600, MinMemFrequency = 1000, BaseMemFrequency = 1750, OverclockedMemFrequency = 2200, MaxMemFrequency = 2500, Length = 276, Wattage = 185, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 4242, DualGPUScore = 8379, DualGPUPerformanceIncrease = 1.97524752475248, OverclockedSingleGPUScore = 4610, OverclockedDualGPUScore = 9030 }; gpus.Add(GPU_Radeon_RX_580_GAMING_4G);
            GPU GPU_Radeon_RX_580_GAMING_8G = new GPU() { Id = 264, Name = "Radeon RX 580 GAMING 8G", PartType = PartType.GPU, Manufacturer = MSI, Price = 390, SellPrice = 130, LevelUnlock = 14, LevelPercent = 42, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX580, IsWaterCooled = false, RankingScore = 2900, VRAM = 8, MinCoreFrequency = 1132, BaseCoreFrequency = 1366, OverclockedCoreFrequency = 1490, MaxCoreFrequency = 1600, MinMemFrequency = 1600, BaseMemFrequency = 2000, OverclockedMemFrequency = 2200, MaxMemFrequency = 2400, Length = 276, Wattage = 185, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 4302, DualGPUScore = 8466, DualGPUPerformanceIncrease = 1.96792189679219, OverclockedSingleGPUScore = 4610, OverclockedDualGPUScore = 9030 }; gpus.Add(GPU_Radeon_RX_580_GAMING_8G);
            GPU GPU_Radeon_RX_580_GAMING_X_4G = new GPU() { Id = 265, Name = "Radeon RX 580 GAMING X 4G", PartType = PartType.GPU, Manufacturer = MSI, Price = 390, SellPrice = 130, LevelUnlock = 16, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX580, IsWaterCooled = false, RankingScore = 2899, VRAM = 4, MinCoreFrequency = 1186, BaseCoreFrequency = 1393, OverclockedCoreFrequency = 1490, MaxCoreFrequency = 1600, MinMemFrequency = 1050, BaseMemFrequency = 1775, OverclockedMemFrequency = 2200, MaxMemFrequency = 2500, Length = 276, Wattage = 185, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 4304, DualGPUScore = 8495, DualGPUPerformanceIncrease = 1.97374535315985, OverclockedSingleGPUScore = 4610, OverclockedDualGPUScore = 9030 }; gpus.Add(GPU_Radeon_RX_580_GAMING_X_4G);
            GPU GPU_Radeon_RX_580_GAMING_X_8G = new GPU() { Id = 266, Name = "Radeon RX 580 GAMING X 8G", PartType = PartType.GPU, Manufacturer = MSI, Price = 395, SellPrice = 132, LevelUnlock = 14, LevelPercent = 30, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX580, IsWaterCooled = false, RankingScore = 2941, VRAM = 8, MinCoreFrequency = 1186, BaseCoreFrequency = 1393, OverclockedCoreFrequency = 1490, MaxCoreFrequency = 1600, MinMemFrequency = 1750, BaseMemFrequency = 2025, OverclockedMemFrequency = 2200, MaxMemFrequency = 2300, Length = 276, Wattage = 185, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11.1, SingleGPUScore = 4365, DualGPUScore = 8582, DualGPUPerformanceIncrease = 1.96609392898053, OverclockedSingleGPUScore = 4610, OverclockedDualGPUScore = 9030 }; gpus.Add(GPU_Radeon_RX_580_GAMING_X_8G);
            GPU GPU_Radeon_RX_580_GAMING_X__8G = new GPU() { Id = 267, Name = "Radeon RX 580 GAMING X+ 8G", PartType = PartType.GPU, Manufacturer = MSI, Price = 405, SellPrice = 135, LevelUnlock = 14, LevelPercent = 10, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX580, IsWaterCooled = false, RankingScore = 3007, VRAM = 8, MinCoreFrequency = 1282, BaseCoreFrequency = 1441, OverclockedCoreFrequency = 1490, MaxCoreFrequency = 1600, MinMemFrequency = 1750, BaseMemFrequency = 2025, OverclockedMemFrequency = 2200, MaxMemFrequency = 2300, Length = 279, Wattage = 185, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 4465, DualGPUScore = 8774, DualGPUPerformanceIncrease = 1.96506159014558, OverclockedSingleGPUScore = 4610, OverclockedDualGPUScore = 9030 }; gpus.Add(GPU_Radeon_RX_580_GAMING_X__8G);
            GPU GPU_Radeon_RX_580_GAMING__8G = new GPU() { Id = 268, Name = "Radeon RX 580 GAMING+ 8G", PartType = PartType.GPU, Manufacturer = MSI, Price = 405, SellPrice = 135, LevelUnlock = 14, LevelPercent = 20, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX580, IsWaterCooled = false, RankingScore = 2989, VRAM = 8, MinCoreFrequency = 1262, BaseCoreFrequency = 1431, OverclockedCoreFrequency = 1490, MaxCoreFrequency = 1600, MinMemFrequency = 1600, BaseMemFrequency = 2000, OverclockedMemFrequency = 2200, MaxMemFrequency = 2400, Length = 279, Wattage = 185, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 4438, DualGPUScore = 8725, DualGPUPerformanceIncrease = 1.96597566471384, OverclockedSingleGPUScore = 4610, OverclockedDualGPUScore = 9030 }; gpus.Add(GPU_Radeon_RX_580_GAMING__8G);
            GPU GPU_Phantom_Gaming_X_Radeon_RX590_8G_OC = new GPU() { Id = 269, Name = "Phantom Gaming X Radeon RX590 8G OC", PartType = PartType.GPU, Manufacturer = ASRock, Price = 400, SellPrice = 133, LevelUnlock = 15, LevelPercent = 1, Lighting = null, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX590, IsWaterCooled = false, RankingScore = 3208, VRAM = 8, MinCoreFrequency = 1482, BaseCoreFrequency = 1591, OverclockedCoreFrequency = 1640, MaxCoreFrequency = 1700, MinMemFrequency = 1816, BaseMemFrequency = 2008, OverclockedMemFrequency = 2100, MaxMemFrequency = 2200, Length = 279, Wattage = 175, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.9, SingleGPUScore = 4775, DualGPUScore = 9365, DualGPUPerformanceIncrease = 1.96125654450262, OverclockedSingleGPUScore = 4900, OverclockedDualGPUScore = 9593 }; gpus.Add(GPU_Phantom_Gaming_X_Radeon_RX590_8G_OC);
            GPU GPU_Radeon_RX_Vega_56 = new GPU() { Id = 270, Name = "Radeon RX Vega 56", PartType = PartType.GPU, Manufacturer = AMD, Price = 580, SellPrice = 193, LevelUnlock = 16, LevelPercent = 1, Lighting = Color.Red, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_VEGA_56, IsWaterCooled = false, RankingScore = 4365, VRAM = 8, MinCoreFrequency = 1242, BaseCoreFrequency = 1471, OverclockedCoreFrequency = 1590, MaxCoreFrequency = 1700, MinMemFrequency = 600, BaseMemFrequency = 800, OverclockedMemFrequency = 875, MaxMemFrequency = 1000, Length = 283, Wattage = 210, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.9, SingleGPUScore = 6339, DualGPUScore = 11402, DualGPUPerformanceIncrease = 1.79870642057107, OverclockedSingleGPUScore = 6658, OverclockedDualGPUScore = 12091 }; gpus.Add(GPU_Radeon_RX_Vega_56);
            GPU GPU_Phantom_Gaming_X_Radeon_RX_VEGA_56_8G = new GPU() { Id = 271, Name = "Phantom Gaming X Radeon RX VEGA 56 8G", PartType = PartType.GPU, Manufacturer = ASRock, Price = 605, SellPrice = 202, LevelUnlock = 16, LevelPercent = 50, Lighting = null, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_VEGA_56, IsWaterCooled = false, RankingScore = 4367, VRAM = 8, MinCoreFrequency = 1248, BaseCoreFrequency = 1474, OverclockedCoreFrequency = 1590, MaxCoreFrequency = 1700, MinMemFrequency = 600, BaseMemFrequency = 800, OverclockedMemFrequency = 875, MaxMemFrequency = 1000, Length = 280, Wattage = 210, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 6343, DualGPUScore = 11411, DualGPUPerformanceIncrease = 1.79899101371591, OverclockedSingleGPUScore = 6658, OverclockedDualGPUScore = 12091 }; gpus.Add(GPU_Phantom_Gaming_X_Radeon_RX_VEGA_56_8G);
            GPU GPU_AREZ_Strix_Radeon_RX_VEGA_56_OC_Edition = new GPU() { Id = 272, Name = "AREZ Strix Radeon RX VEGA 56 OC Edition", PartType = PartType.GPU, Manufacturer = ASUS, Price = 615, SellPrice = 205, LevelUnlock = 16, LevelPercent = 30, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_VEGA_56, IsWaterCooled = false, RankingScore = 4452, VRAM = 8, MinCoreFrequency = 1546, BaseCoreFrequency = 1573, OverclockedCoreFrequency = 1590, MaxCoreFrequency = 1600, MinMemFrequency = 600, BaseMemFrequency = 800, OverclockedMemFrequency = 875, MaxMemFrequency = 1000, Length = 298, Wattage = 210, MultiGPU = CrossFire, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 6469, DualGPUScore = 11714, DualGPUPerformanceIncrease = 1.81078992116247, OverclockedSingleGPUScore = 6658, OverclockedDualGPUScore = 12091 }; gpus.Add(GPU_AREZ_Strix_Radeon_RX_VEGA_56_OC_Edition);
            GPU GPU_Radeon_Vega_56___EKWB_EK_FC_Acetal = new GPU() { Id = 273, Name = "Radeon Vega 56 | EKWB EK-FC Acetal", PartType = PartType.GPU, Manufacturer = AMD, Price = 730, SellPrice = 243, LevelUnlock = 16, LevelPercent = 90, Lighting = null, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_VEGA_56, IsWaterCooled = true, RankingScore = 4367, VRAM = 8, MinCoreFrequency = 1048, BaseCoreFrequency = 1474, OverclockedCoreFrequency = 1722, MaxCoreFrequency = 1900, MinMemFrequency = 500, BaseMemFrequency = 800, OverclockedMemFrequency = 948, MaxMemFrequency = 1100, Length = 258, Wattage = 210, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 8.7, SingleGPUScore = 6343, DualGPUScore = 11411, DualGPUPerformanceIncrease = 1.79899101371591, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_Radeon_Vega_56___EKWB_EK_FC_Acetal);
            GPU GPU_Radeon_Vega_56___EKWB_EK_FC_Plexi = new GPU() { Id = 274, Name = "Radeon Vega 56 | EKWB EK-FC Plexi", PartType = PartType.GPU, Manufacturer = AMD, Price = 730, SellPrice = 243, LevelUnlock = 16, LevelPercent = 90, Lighting = null, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_VEGA_56, IsWaterCooled = true, RankingScore = 4367, VRAM = 8, MinCoreFrequency = 1048, BaseCoreFrequency = 1474, OverclockedCoreFrequency = 1722, MaxCoreFrequency = 1900, MinMemFrequency = 500, BaseMemFrequency = 800, OverclockedMemFrequency = 948, MaxMemFrequency = 1100, Length = 258, Wattage = 210, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 8.7, SingleGPUScore = 6343, DualGPUScore = 11411, DualGPUPerformanceIncrease = 1.79899101371591, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_Radeon_Vega_56___EKWB_EK_FC_Plexi);
            GPU GPU_Radeon_Vega_56___EKWB_EK_FC_Plexi_RGB = new GPU() { Id = 275, Name = "Radeon Vega 56 | EKWB EK-FC Plexi RGB", PartType = PartType.GPU, Manufacturer = AMD, Price = 780, SellPrice = 260, LevelUnlock = 23, LevelPercent = 30, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_VEGA_56, IsWaterCooled = true, RankingScore = 4367, VRAM = 8, MinCoreFrequency = 1048, BaseCoreFrequency = 1474, OverclockedCoreFrequency = 1722, MaxCoreFrequency = 1900, MinMemFrequency = 500, BaseMemFrequency = 800, OverclockedMemFrequency = 948, MaxMemFrequency = 1100, Length = 258, Wattage = 210, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 8.1, SingleGPUScore = 6343, DualGPUScore = 11411, DualGPUPerformanceIncrease = 1.79899101371591, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_Radeon_Vega_56___EKWB_EK_FC_Plexi_RGB);
            GPU GPU_Radeon_RX_Vega_64 = new GPU() { Id = 276, Name = "Radeon RX Vega 64", PartType = PartType.GPU, Manufacturer = AMD, Price = 660, SellPrice = 220, LevelUnlock = 17, LevelPercent = 1, Lighting = Color.Red, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_VEGA_64, IsWaterCooled = false, RankingScore = 4798, VRAM = 8, MinCoreFrequency = 1292, BaseCoreFrequency = 1546, OverclockedCoreFrequency = 1690, MaxCoreFrequency = 1800, MinMemFrequency = 690, BaseMemFrequency = 945, OverclockedMemFrequency = 1050, MaxMemFrequency = 1200, Length = 283, Wattage = 295, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 6923, DualGPUScore = 12679, DualGPUPerformanceIncrease = 1.83143146034956, OverclockedSingleGPUScore = 7445, OverclockedDualGPUScore = 13877 }; gpus.Add(GPU_Radeon_RX_Vega_64);
            GPU GPU_ROG_Strix_RX_VEGA64_OC_Edition = new GPU() { Id = 277, Name = "ROG Strix RX VEGA64 OC Edition", PartType = PartType.GPU, Manufacturer = ASUS, Price = 665, SellPrice = 222, LevelUnlock = 17, LevelPercent = 80, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_VEGA_64, IsWaterCooled = false, RankingScore = 4849, VRAM = 8, MinCoreFrequency = 1380, BaseCoreFrequency = 1590, OverclockedCoreFrequency = 1690, MaxCoreFrequency = 1800, MinMemFrequency = 690, BaseMemFrequency = 945, OverclockedMemFrequency = 1050, MaxMemFrequency = 1200, Length = 298, Wattage = 295, MultiGPU = CrossFire, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 6994, DualGPUScore = 12922, DualGPUPerformanceIncrease = 1.84758364312268, OverclockedSingleGPUScore = 7445, OverclockedDualGPUScore = 13877 }; gpus.Add(GPU_ROG_Strix_RX_VEGA64_OC_Edition);
            GPU GPU_Radeon_Vega_64___EKWB_EK_FC_Acetal = new GPU() { Id = 278, Name = "Radeon Vega 64 | EKWB EK-FC Acetal", PartType = PartType.GPU, Manufacturer = AMD, Price = 810, SellPrice = 270, LevelUnlock = 17, LevelPercent = 90, Lighting = null, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_VEGA_64, IsWaterCooled = true, RankingScore = 4787, VRAM = 8, MinCoreFrequency = 1072, BaseCoreFrequency = 1536, OverclockedCoreFrequency = 1802, MaxCoreFrequency = 2000, MinMemFrequency = 590, BaseMemFrequency = 945, OverclockedMemFrequency = 1119, MaxMemFrequency = 1300, Length = 258, Wattage = 295, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 8.5, SingleGPUScore = 6906, DualGPUScore = 12623, DualGPUPerformanceIncrease = 1.82783087170576, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_Radeon_Vega_64___EKWB_EK_FC_Acetal);
            GPU GPU_Radeon_Vega_64___EKWB_EK_FC_Plexi = new GPU() { Id = 279, Name = "Radeon Vega 64 | EKWB EK-FC Plexi", PartType = PartType.GPU, Manufacturer = AMD, Price = 810, SellPrice = 270, LevelUnlock = 17, LevelPercent = 90, Lighting = null, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_VEGA_64, IsWaterCooled = true, RankingScore = 4787, VRAM = 8, MinCoreFrequency = 1072, BaseCoreFrequency = 1536, OverclockedCoreFrequency = 1802, MaxCoreFrequency = 2000, MinMemFrequency = 590, BaseMemFrequency = 945, OverclockedMemFrequency = 1119, MaxMemFrequency = 1300, Length = 258, Wattage = 295, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 8.5, SingleGPUScore = 6906, DualGPUScore = 12623, DualGPUPerformanceIncrease = 1.82783087170576, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_Radeon_Vega_64___EKWB_EK_FC_Plexi);
            GPU GPU_Radeon_Vega_64___EKWB_EK_FC_Plexi_RGB = new GPU() { Id = 280, Name = "Radeon Vega 64 | EKWB EK-FC Plexi RGB", PartType = PartType.GPU, Manufacturer = AMD, Price = 960, SellPrice = 320, LevelUnlock = 23, LevelPercent = 45, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_VEGA_64, IsWaterCooled = true, RankingScore = 4787, VRAM = 8, MinCoreFrequency = 1072, BaseCoreFrequency = 1536, OverclockedCoreFrequency = 1802, MaxCoreFrequency = 2000, MinMemFrequency = 590, BaseMemFrequency = 945, OverclockedMemFrequency = 1119, MaxMemFrequency = 1300, Length = 258, Wattage = 295, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 7.2, SingleGPUScore = 6906, DualGPUScore = 12623, DualGPUPerformanceIncrease = 1.82783087170576, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_Radeon_Vega_64___EKWB_EK_FC_Plexi_RGB);
            GPU GPU_Radeon_VII = new GPU() { Id = 281, Name = "Radeon VII", PartType = PartType.GPU, Manufacturer = AMD, Price = 840, SellPrice = 280, LevelUnlock = 24, LevelPercent = 1, Lighting = Color.Red, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_VII, IsWaterCooled = false, RankingScore = 5997, VRAM = 16, MinCoreFrequency = 1400, BaseCoreFrequency = 1750, OverclockedCoreFrequency = 1950, MaxCoreFrequency = 2100, MinMemFrequency = 600, BaseMemFrequency = 1000, OverclockedMemFrequency = 1200, MaxMemFrequency = 1400, Length = 280, Wattage = 295, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.2, SingleGPUScore = 8588, DualGPUScore = 16465, DualGPUPerformanceIncrease = 1.9172100605496, OverclockedSingleGPUScore = 9441, OverclockedDualGPUScore = 18245 }; gpus.Add(GPU_Radeon_VII);
            GPU GPU_ROG_Strix_Radeon_RX_5500_XT_8GB_Gaming = new GPU() { Id = 282, Name = "ROG Strix Radeon RX 5500 XT 8GB Gaming", PartType = PartType.GPU, Manufacturer = ASUS, Price = 400, SellPrice = 133, LevelUnlock = 26, LevelPercent = 60, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_5500_XT, IsWaterCooled = false, RankingScore = 3153, VRAM = 8, MinCoreFrequency = 1374, BaseCoreFrequency = 1737, OverclockedCoreFrequency = 1950, MaxCoreFrequency = 2100, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1850, MaxMemFrequency = 2000, Length = 280, Wattage = 130, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.4, SingleGPUScore = 4562, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 4968, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_ROG_Strix_Radeon_RX_5500_XT_8GB_Gaming);
            GPU GPU_Radeon_RX_5500_XT_GAMING_OC_8G = new GPU() { Id = 283, Name = "Radeon RX 5500 XT GAMING OC 8G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 390, SellPrice = 130, LevelUnlock = 26, LevelPercent = 70, Lighting = null, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_5500_XT, IsWaterCooled = false, RankingScore = 3076, VRAM = 8, MinCoreFrequency = 1260, BaseCoreFrequency = 1680, OverclockedCoreFrequency = 1950, MaxCoreFrequency = 2100, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1850, MaxMemFrequency = 2000, Length = 265, Wattage = 130, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.4, SingleGPUScore = 4453, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 4968, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_Radeon_RX_5500_XT_GAMING_OC_8G);
            GPU GPU_Radeon_RX_5500_XT_OC_8G = new GPU() { Id = 284, Name = "Radeon RX 5500 XT OC 8G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 365, SellPrice = 122, LevelUnlock = 26, LevelPercent = 50, Lighting = null, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_5500_XT, IsWaterCooled = false, RankingScore = 3148, VRAM = 8, MinCoreFrequency = 1366, BaseCoreFrequency = 1733, OverclockedCoreFrequency = 1950, MaxCoreFrequency = 2100, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1850, MaxMemFrequency = 2000, Length = 225, Wattage = 130, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 12.5, SingleGPUScore = 4554, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 4968, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_Radeon_RX_5500_XT_OC_8G);
            GPU GPU_Radeon_RX_5500_XT_GAMING_X_8G = new GPU() { Id = 285, Name = "Radeon RX 5500 XT GAMING X 8G", PartType = PartType.GPU, Manufacturer = MSI, Price = 380, SellPrice = 127, LevelUnlock = 26, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_5500_XT, IsWaterCooled = false, RankingScore = 3300, VRAM = 8, MinCoreFrequency = 1590, BaseCoreFrequency = 1845, OverclockedCoreFrequency = 1950, MaxCoreFrequency = 2100, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1850, MaxMemFrequency = 2000, Length = 247, Wattage = 130, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 12.5, SingleGPUScore = 4767, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 4968, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_Radeon_RX_5500_XT_GAMING_X_8G);
            GPU GPU_ROG_Strix_Radeon_RX_5600_XT_OC_Edition_6GB = new GPU() { Id = 286, Name = "ROG Strix Radeon RX 5600 XT OC Edition 6GB", PartType = PartType.GPU, Manufacturer = ASUS, Price = 650, SellPrice = 217, LevelUnlock = 26, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_5600_XT, IsWaterCooled = false, RankingScore = 5194, VRAM = 6, MinCoreFrequency = 1640, BaseCoreFrequency = 1770, OverclockedCoreFrequency = 1800, MaxCoreFrequency = 1900, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1850, MaxMemFrequency = 2000, Length = 304, Wattage = 150, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 7477, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 7695, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_ROG_Strix_Radeon_RX_5600_XT_OC_Edition_6GB);
            GPU GPU_Radeon_RX_5600_XT_GAMING_OC_6G = new GPU() { Id = 287, Name = "Radeon RX 5600 XT GAMING OC 6G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 570, SellPrice = 190, LevelUnlock = 26, LevelPercent = 70, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_5600_XT, IsWaterCooled = false, RankingScore = 4727, VRAM = 6, MinCoreFrequency = 1340, BaseCoreFrequency = 1620, OverclockedCoreFrequency = 1800, MaxCoreFrequency = 1900, MinMemFrequency = 900, BaseMemFrequency = 1500, OverclockedMemFrequency = 1850, MaxMemFrequency = 2100, Length = 280, Wattage = 150, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 12, SingleGPUScore = 6819, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 7695, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_Radeon_RX_5600_XT_GAMING_OC_6G);
            GPU GPU_Radeon_RX_5600_XT_WINDFORCE_OC_6G = new GPU() { Id = 288, Name = "Radeon RX 5600 XT WINDFORCE OC 6G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 570, SellPrice = 190, LevelUnlock = 26, LevelPercent = 70, Lighting = null, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_5600_XT, IsWaterCooled = false, RankingScore = 4727, VRAM = 6, MinCoreFrequency = 1340, BaseCoreFrequency = 1620, OverclockedCoreFrequency = 1800, MaxCoreFrequency = 1900, MinMemFrequency = 900, BaseMemFrequency = 1500, OverclockedMemFrequency = 1850, MaxMemFrequency = 2100, Length = 228, Wattage = 150, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 12, SingleGPUScore = 6819, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 7695, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_Radeon_RX_5600_XT_WINDFORCE_OC_6G);
            GPU GPU_Radeon_RX_5600_XT_GAMING_X = new GPU() { Id = 289, Name = "Radeon RX 5600 XT GAMING X", PartType = PartType.GPU, Manufacturer = MSI, Price = 585, SellPrice = 195, LevelUnlock = 26, LevelPercent = 70, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_5600_XT, IsWaterCooled = false, RankingScore = 4872, VRAM = 6, MinCoreFrequency = 1600, BaseCoreFrequency = 1750, OverclockedCoreFrequency = 1800, MaxCoreFrequency = 1900, MinMemFrequency = 900, BaseMemFrequency = 1500, OverclockedMemFrequency = 1850, MaxMemFrequency = 2100, Length = 297, Wattage = 150, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 12, SingleGPUScore = 7017, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 7695, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_Radeon_RX_5600_XT_GAMING_X);
            GPU GPU_Radeon_RX_5700 = new GPU() { Id = 290, Name = "Radeon RX 5700", PartType = PartType.GPU, Manufacturer = AMD, Price = 750, SellPrice = 250, LevelUnlock = 26, LevelPercent = 1, Lighting = Color.Red, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX5700, IsWaterCooled = false, RankingScore = 5370, VRAM = 8, MinCoreFrequency = 1550, BaseCoreFrequency = 1725, OverclockedCoreFrequency = 1800, MaxCoreFrequency = 1900, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1900, MaxMemFrequency = 2000, Length = 268, Wattage = 225, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 7893, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 7925, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_Radeon_RX_5700);
            GPU GPU_ROG_Strix_Radeon_RX_5700_OC_Edition_8GB = new GPU() { Id = 291, Name = "ROG Strix Radeon RX 5700 OC Edition 8GB", PartType = PartType.GPU, Manufacturer = ASUS, Price = 720, SellPrice = 240, LevelUnlock = 26, LevelPercent = 60, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX5700, IsWaterCooled = false, RankingScore = 5377, VRAM = 8, MinCoreFrequency = 1600, BaseCoreFrequency = 1750, OverclockedCoreFrequency = 1800, MaxCoreFrequency = 1900, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1900, MaxMemFrequency = 2000, Length = 305, Wattage = 225, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 7904, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 7925, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_ROG_Strix_Radeon_RX_5700_OC_Edition_8GB);
            GPU GPU_Radeon_RX_5700_GAMING_OC_8G = new GPU() { Id = 292, Name = "Radeon RX 5700 GAMING OC 8G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 685, SellPrice = 228, LevelUnlock = 26, LevelPercent = 70, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX5700, IsWaterCooled = false, RankingScore = 5377, VRAM = 8, MinCoreFrequency = 1600, BaseCoreFrequency = 1750, OverclockedCoreFrequency = 1800, MaxCoreFrequency = 1900, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1900, MaxMemFrequency = 2000, Length = 280, Wattage = 225, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 7904, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 7925, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_Radeon_RX_5700_GAMING_OC_8G);
            GPU GPU_Radeon_RX_5700_EVOKE_GP_OC = new GPU() { Id = 293, Name = "Radeon RX 5700 EVOKE GP OC", PartType = PartType.GPU, Manufacturer = MSI, Price = 685, SellPrice = 228, LevelUnlock = 26, LevelPercent = 1, Lighting = null, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX5700, IsWaterCooled = false, RankingScore = 5377, VRAM = 8, MinCoreFrequency = 1600, BaseCoreFrequency = 1750, OverclockedCoreFrequency = 1800, MaxCoreFrequency = 1900, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1900, MaxMemFrequency = 2000, Length = 254, Wattage = 225, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 11.5, SingleGPUScore = 7904, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 7925, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_Radeon_RX_5700_EVOKE_GP_OC);
            GPU GPU_Radeon_RX_5700_GAMING_X = new GPU() { Id = 294, Name = "Radeon RX 5700 GAMING X", PartType = PartType.GPU, Manufacturer = MSI, Price = 750, SellPrice = 250, LevelUnlock = 26, LevelPercent = 70, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX5700, IsWaterCooled = false, RankingScore = 5370, VRAM = 8, MinCoreFrequency = 1550, BaseCoreFrequency = 1725, OverclockedCoreFrequency = 1800, MaxCoreFrequency = 1900, MinMemFrequency = 1500, BaseMemFrequency = 1750, OverclockedMemFrequency = 1900, MaxMemFrequency = 2000, Length = 297, Wattage = 225, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 7893, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 7925, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_Radeon_RX_5700_GAMING_X);
            GPU GPU_Radeon_RX_5700_XT = new GPU() { Id = 295, Name = "Radeon RX 5700 XT", PartType = PartType.GPU, Manufacturer = AMD, Price = 830, SellPrice = 277, LevelUnlock = 26, LevelPercent = 30, Lighting = Color.Red, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX5700_XT, IsWaterCooled = false, RankingScore = 5944, VRAM = 8, MinCoreFrequency = 1610, BaseCoreFrequency = 1905, OverclockedCoreFrequency = 2075, MaxCoreFrequency = 2200, MinMemFrequency = 1600, BaseMemFrequency = 1750, OverclockedMemFrequency = 1800, MaxMemFrequency = 1900, Length = 272, Wattage = 180, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 8728, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 9028, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_Radeon_RX_5700_XT);
            GPU GPU_ROG_Strix_Radeon_RX_5700_XT_OC_Edition_8GB = new GPU() { Id = 296, Name = "ROG Strix Radeon RX 5700 XT OC Edition 8GB", PartType = PartType.GPU, Manufacturer = ASUS, Price = 840, SellPrice = 280, LevelUnlock = 26, LevelPercent = 80, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX5700_XT, IsWaterCooled = false, RankingScore = 5983, VRAM = 8, MinCoreFrequency = 1970, BaseCoreFrequency = 2035, OverclockedCoreFrequency = 2075, MaxCoreFrequency = 2100, MinMemFrequency = 1600, BaseMemFrequency = 1750, OverclockedMemFrequency = 1800, MaxMemFrequency = 1900, Length = 305, Wattage = 180, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 8784, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 9028, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_ROG_Strix_Radeon_RX_5700_XT_OC_Edition_8GB);
            GPU GPU_AORUS_Radeon_RX_5700_XT_8G = new GPU() { Id = 297, Name = "AORUS Radeon RX 5700 XT 8G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 800, SellPrice = 267, LevelUnlock = 26, LevelPercent = 90, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX5700_XT, IsWaterCooled = false, RankingScore = 5975, VRAM = 8, MinCoreFrequency = 1820, BaseCoreFrequency = 2010, OverclockedCoreFrequency = 2075, MaxCoreFrequency = 2200, MinMemFrequency = 1600, BaseMemFrequency = 1750, OverclockedMemFrequency = 1800, MaxMemFrequency = 1900, Length = 290, Wattage = 180, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 8773, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 9028, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_AORUS_Radeon_RX_5700_XT_8G);
            GPU GPU_Radeon_RX_5700_XT_GAMING_OC_8G = new GPU() { Id = 298, Name = "Radeon RX 5700 XT GAMING OC 8G", PartType = PartType.GPU, Manufacturer = GIGABYTE, Price = 795, SellPrice = 265, LevelUnlock = 26, LevelPercent = 90, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX5700_XT, IsWaterCooled = false, RankingScore = 5944, VRAM = 8, MinCoreFrequency = 1610, BaseCoreFrequency = 1905, OverclockedCoreFrequency = 2075, MaxCoreFrequency = 2200, MinMemFrequency = 1600, BaseMemFrequency = 1750, OverclockedMemFrequency = 1800, MaxMemFrequency = 1900, Length = 280, Wattage = 180, MultiGPU = null, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 8728, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 9028, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_Radeon_RX_5700_XT_GAMING_OC_8G);
            GPU GPU_Radeon_RX_5700_XT_GAMING_X = new GPU() { Id = 299, Name = "Radeon RX 5700 XT GAMING X", PartType = PartType.GPU, Manufacturer = MSI, Price = 830, SellPrice = 277, LevelUnlock = 26, LevelPercent = 90, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX5700_XT, IsWaterCooled = false, RankingScore = 5966, VRAM = 8, MinCoreFrequency = 1760, BaseCoreFrequency = 1980, OverclockedCoreFrequency = 2075, MaxCoreFrequency = 2200, MinMemFrequency = 1600, BaseMemFrequency = 1750, OverclockedMemFrequency = 1800, MaxMemFrequency = 1900, Length = 297, Wattage = 180, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.6, SingleGPUScore = 8760, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 9028, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_Radeon_RX_5700_XT_GAMING_X);
            GPU GPU_Radeon_RX_5700_XT_Mech_OC = new GPU() { Id = 300, Name = "Radeon RX 5700 XT Mech OC", PartType = PartType.GPU, Manufacturer = MSI, Price = 830, SellPrice = 277, LevelUnlock = 26, LevelPercent = 90, Lighting = null, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX5700_XT, IsWaterCooled = false, RankingScore = 5950, VRAM = 8, MinCoreFrequency = 1650, BaseCoreFrequency = 1925, OverclockedCoreFrequency = 2075, MaxCoreFrequency = 2200, MinMemFrequency = 1600, BaseMemFrequency = 1750, OverclockedMemFrequency = 1800, MaxMemFrequency = 1900, Length = 232, Wattage = 180, MultiGPU = null, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Six_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 8736, DualGPUScore = 0, DualGPUPerformanceIncrease = 0, OverclockedSingleGPUScore = 9028, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_Radeon_RX_5700_XT_Mech_OC);
            GPU GPU_Radeon_RX_6700_XT_Phantom_Gaming_D_12GB_OC = new GPU() { Id = 301, Name = "Radeon RX 6700 XT Phantom Gaming D 12GB OC", PartType = PartType.GPU, Manufacturer = ASRock, Price = 1085, SellPrice = 362, LevelUnlock = 33, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_6700_XT, IsWaterCooled = false, RankingScore = 7920, VRAM = 12, MinCoreFrequency = 2444, BaseCoreFrequency = 2622, OverclockedCoreFrequency = 2700, MaxCoreFrequency = 2800, MinMemFrequency = 1700, BaseMemFrequency = 2000, OverclockedMemFrequency = 2150, MaxMemFrequency = 2300, Length = 305, Wattage = 230, MultiGPU = CrossFire, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 11, SingleGPUScore = 11909, DualGPUScore = 23077, DualGPUPerformanceIncrease = 1.93777815097825, OverclockedSingleGPUScore = 12200, OverclockedDualGPUScore = 24597 }; gpus.Add(GPU_Radeon_RX_6700_XT_Phantom_Gaming_D_12GB_OC);
            GPU GPU_Radeon_RX_6800 = new GPU() { Id = 302, Name = "Radeon RX 6800", PartType = PartType.GPU, Manufacturer = AMD, Price = 1315, SellPrice = 438, LevelUnlock = 33, LevelPercent = 1, Lighting = Color.Red, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_6800, IsWaterCooled = false, RankingScore = 8758, VRAM = 16, MinCoreFrequency = 1330, BaseCoreFrequency = 1815, OverclockedCoreFrequency = 2100, MaxCoreFrequency = 2300, MinMemFrequency = 1900, BaseMemFrequency = 2000, OverclockedMemFrequency = 2050, MaxMemFrequency = 2100, Length = 267, Wattage = 250, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 13092, DualGPUScore = 20168, DualGPUPerformanceIncrease = 1.58062880324544, OverclockedSingleGPUScore = 14754, OverclockedDualGPUScore = 25193 }; gpus.Add(GPU_Radeon_RX_6800);
            GPU GPU_Radeon_RX_6800_Phantom_Gaming_D_16G_OC = new GPU() { Id = 303, Name = "Radeon RX 6800 Phantom Gaming D 16G OC", PartType = PartType.GPU, Manufacturer = ASRock, Price = 1190, SellPrice = 397, LevelUnlock = 33, LevelPercent = 1, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_6800, IsWaterCooled = false, RankingScore = 9242, VRAM = 16, MinCoreFrequency = 1760, BaseCoreFrequency = 1980, OverclockedCoreFrequency = 2100, MaxCoreFrequency = 2200, MinMemFrequency = 1900, BaseMemFrequency = 2000, OverclockedMemFrequency = 2050, MaxMemFrequency = 2100, Length = 305, Wattage = 250, MultiGPU = CrossFire, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 13804, DualGPUScore = 21819, DualGPUPerformanceIncrease = 1.54048273754965, OverclockedSingleGPUScore = 14323, OverclockedDualGPUScore = 24191 }; gpus.Add(GPU_Radeon_RX_6800_Phantom_Gaming_D_16G_OC);
            GPU GPU_Radeon_RX_6800_GAMING_TRIO_16G = new GPU() { Id = 304, Name = "Radeon RX 6800 GAMING TRIO 16G", PartType = PartType.GPU, Manufacturer = MSI, Price = 1245, SellPrice = 415, LevelUnlock = 33, LevelPercent = 70, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_6800, IsWaterCooled = false, RankingScore = 8758, VRAM = 16, MinCoreFrequency = 1330, BaseCoreFrequency = 1815, OverclockedCoreFrequency = 2100, MaxCoreFrequency = 2300, MinMemFrequency = 1900, BaseMemFrequency = 2000, OverclockedMemFrequency = 2050, MaxMemFrequency = 2100, Length = 324, Wattage = 250, MultiGPU = CrossFire, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 13092, DualGPUScore = 20168, DualGPUPerformanceIncrease = 1.54048273754965, OverclockedSingleGPUScore = 14323, OverclockedDualGPUScore = 24191 }; gpus.Add(GPU_Radeon_RX_6800_GAMING_TRIO_16G);
            GPU GPU_Radeon_RX_6800_GAMING_X_TRIO_16G = new GPU() { Id = 305, Name = "Radeon RX 6800 GAMING X TRIO 16G", PartType = PartType.GPU, Manufacturer = MSI, Price = 1290, SellPrice = 430, LevelUnlock = 33, LevelPercent = 70, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_6800, IsWaterCooled = false, RankingScore = 9081, VRAM = 16, MinCoreFrequency = 1650, BaseCoreFrequency = 1925, OverclockedCoreFrequency = 2100, MaxCoreFrequency = 2200, MinMemFrequency = 1900, BaseMemFrequency = 2000, OverclockedMemFrequency = 2050, MaxMemFrequency = 2100, Length = 324, Wattage = 250, MultiGPU = CrossFire, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 13567, DualGPUScore = 21270, DualGPUPerformanceIncrease = 1.5677747475492, OverclockedSingleGPUScore = 14323, OverclockedDualGPUScore = 24191 }; gpus.Add(GPU_Radeon_RX_6800_GAMING_X_TRIO_16G);
            GPU GPU_Radeon_RX_6800_XT = new GPU() { Id = 306, Name = "Radeon RX 6800 XT", PartType = PartType.GPU, Manufacturer = AMD, Price = 1575, SellPrice = 525, LevelUnlock = 33, LevelPercent = 20, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_6800_XT, IsWaterCooled = false, RankingScore = 10815, VRAM = 16, MinCoreFrequency = 1430, BaseCoreFrequency = 2015, OverclockedCoreFrequency = 2400, MaxCoreFrequency = 2600, MinMemFrequency = 1700, BaseMemFrequency = 2000, OverclockedMemFrequency = 2150, MaxMemFrequency = 2300, Length = 267, Wattage = 300, MultiGPU = CrossFire, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 16155, DualGPUScore = 19322, DualGPUPerformanceIncrease = 1.38729198184569, OverclockedSingleGPUScore = 17461, OverclockedDualGPUScore = 32655 }; gpus.Add(GPU_Radeon_RX_6800_XT);
            GPU GPU_Radeon_RX_6800_XT_Phantom_Gaming_D_16G_OC = new GPU() { Id = 307, Name = "Radeon RX 6800 XT Phantom Gaming D 16G OC", PartType = PartType.GPU, Manufacturer = ASRock, Price = 1470, SellPrice = 490, LevelUnlock = 33, LevelPercent = 20, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_6800_XT, IsWaterCooled = false, RankingScore = 10947, VRAM = 16, MinCoreFrequency = 1530, BaseCoreFrequency = 2065, OverclockedCoreFrequency = 2400, MaxCoreFrequency = 2600, MinMemFrequency = 1700, BaseMemFrequency = 2000, OverclockedMemFrequency = 2150, MaxMemFrequency = 2300, Length = 330, Wattage = 300, MultiGPU = CrossFire, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 16350, DualGPUScore = 21222, DualGPUPerformanceIncrease = 1.19603837821108, OverclockedSingleGPUScore = 16487, OverclockedDualGPUScore = 23224 }; gpus.Add(GPU_Radeon_RX_6800_XT_Phantom_Gaming_D_16G_OC);
            GPU GPU_Radeon_RX_6800_XT_Taichi_X_16G_OC = new GPU() { Id = 308, Name = "Radeon RX 6800 XT Taichi X 16G OC", PartType = PartType.GPU, Manufacturer = ASRock, Price = 1590, SellPrice = 530, LevelUnlock = 33, LevelPercent = 20, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_6800_XT, IsWaterCooled = false, RankingScore = 11724, VRAM = 16, MinCoreFrequency = 2220, BaseCoreFrequency = 2360, OverclockedCoreFrequency = 2400, MaxCoreFrequency = 2500, MinMemFrequency = 1700, BaseMemFrequency = 2000, OverclockedMemFrequency = 2150, MaxMemFrequency = 2300, Length = 330, Wattage = 300, MultiGPU = CrossFire, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 17499, DualGPUScore = 32309, DualGPUPerformanceIncrease = 1.84633407623293, OverclockedSingleGPUScore = 17659, OverclockedDualGPUScore = 35941 }; gpus.Add(GPU_Radeon_RX_6800_XT_Taichi_X_16G_OC);
            GPU GPU_Radeon_RX_6800_XT_GAMING_TRIO_16G = new GPU() { Id = 309, Name = "Radeon RX 6800 XT GAMING TRIO 16G", PartType = PartType.GPU, Manufacturer = MSI, Price = 1540, SellPrice = 513, LevelUnlock = 33, LevelPercent = 70, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_6800_XT, IsWaterCooled = false, RankingScore = 10815, VRAM = 16, MinCoreFrequency = 1430, BaseCoreFrequency = 2015, OverclockedCoreFrequency = 2400, MaxCoreFrequency = 2600, MinMemFrequency = 1700, BaseMemFrequency = 2000, OverclockedMemFrequency = 2150, MaxMemFrequency = 2300, Length = 324, Wattage = 300, MultiGPU = CrossFire, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 16155, DualGPUScore = 19322, DualGPUPerformanceIncrease = 1.19603837821108, OverclockedSingleGPUScore = 16487, OverclockedDualGPUScore = 23224 }; gpus.Add(GPU_Radeon_RX_6800_XT_GAMING_TRIO_16G);
            GPU GPU_Radeon_RX_6800_XT_GAMING_X_TRIO_16G = new GPU() { Id = 310, Name = "Radeon RX 6800 XT GAMING X TRIO 16G", PartType = PartType.GPU, Manufacturer = MSI, Price = 1550, SellPrice = 517, LevelUnlock = 33, LevelPercent = 70, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_6800_XT, IsWaterCooled = false, RankingScore = 10894, VRAM = 16, MinCoreFrequency = 1490, BaseCoreFrequency = 2045, OverclockedCoreFrequency = 2400, MaxCoreFrequency = 2600, MinMemFrequency = 1700, BaseMemFrequency = 2000, OverclockedMemFrequency = 2150, MaxMemFrequency = 2300, Length = 324, Wattage = 300, MultiGPU = CrossFire, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10.5, SingleGPUScore = 16272, DualGPUScore = 20463, DualGPUPerformanceIncrease = 1.25755899705015, OverclockedSingleGPUScore = 16487, OverclockedDualGPUScore = 23224 }; gpus.Add(GPU_Radeon_RX_6800_XT_GAMING_X_TRIO_16G);
            GPU GPU_Radeon_RX_6800_XT___Corsair_Hydro_Series_XG7_RGB = new GPU() { Id = 311, Name = "Radeon RX 6800 XT | Corsair Hydro Series XG7 RGB", PartType = PartType.GPU, Manufacturer = CORSAIR, Price = 1600, SellPrice = 533, LevelUnlock = 33, LevelPercent = 90, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_6800_XT, IsWaterCooled = true, RankingScore = 10380, VRAM = 16, MinCoreFrequency = 700, BaseCoreFrequency = 1850, OverclockedCoreFrequency = 2558, MaxCoreFrequency = 3000, MinMemFrequency = 1500, BaseMemFrequency = 2000, OverclockedMemFrequency = 2292, MaxMemFrequency = 2500, Length = 263, Wattage = 300, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 9.7, SingleGPUScore = 15512, DualGPUScore = 12949, DualGPUPerformanceIncrease = 0.834773078906653, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_Radeon_RX_6800_XT___Corsair_Hydro_Series_XG7_RGB);
            GPU GPU_Radeon_RX_6900_XT = new GPU() { Id = 312, Name = "Radeon RX 6900 XT", PartType = PartType.GPU, Manufacturer = AMD, Price = 1695, SellPrice = 565, LevelUnlock = 33, LevelPercent = 40, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_6900_XT, IsWaterCooled = false, RankingScore = 11411, VRAM = 16, MinCoreFrequency = 1730, BaseCoreFrequency = 2015, OverclockedCoreFrequency = 2150, MaxCoreFrequency = 2300, MinMemFrequency = 1900, BaseMemFrequency = 2000, OverclockedMemFrequency = 2050, MaxMemFrequency = 2100, Length = 267, Wattage = 300, MultiGPU = CrossFire, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10, SingleGPUScore = 16954, DualGPUScore = 23197, DualGPUPerformanceIncrease = 1.36823168573788, OverclockedSingleGPUScore = 18162, OverclockedDualGPUScore = 29637 }; gpus.Add(GPU_Radeon_RX_6900_XT);
            GPU GPU_Radeon_RX_6900_XT_Phantom_Gaming_D_16G_OC = new GPU() { Id = 313, Name = "Radeon RX 6900 XT Phantom Gaming D 16G OC", PartType = PartType.GPU, Manufacturer = ASRock, Price = 1540, SellPrice = 513, LevelUnlock = 33, LevelPercent = 50, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_6900_XT, IsWaterCooled = false, RankingScore = 11646, VRAM = 16, MinCoreFrequency = 2010, BaseCoreFrequency = 2105, OverclockedCoreFrequency = 2150, MaxCoreFrequency = 2200, MinMemFrequency = 1900, BaseMemFrequency = 2000, OverclockedMemFrequency = 2050, MaxMemFrequency = 2100, Length = 330, Wattage = 300, MultiGPU = CrossFire, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10, SingleGPUScore = 17308, DualGPUScore = 25224, DualGPUPerformanceIncrease = 1.36823168573788, OverclockedSingleGPUScore = 17571, OverclockedDualGPUScore = 26260 }; gpus.Add(GPU_Radeon_RX_6900_XT_Phantom_Gaming_D_16G_OC);
            GPU GPU_Radeon_RX_6900_XT_GAMING_TRIO_16G = new GPU() { Id = 314, Name = "Radeon RX 6900 XT GAMING TRIO 16G", PartType = PartType.GPU, Manufacturer = MSI, Price = 1695, SellPrice = 565, LevelUnlock = 33, LevelPercent = 70, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_6900_XT, IsWaterCooled = false, RankingScore = 11411, VRAM = 16, MinCoreFrequency = 1730, BaseCoreFrequency = 2015, OverclockedCoreFrequency = 2150, MaxCoreFrequency = 2300, MinMemFrequency = 1900, BaseMemFrequency = 2000, OverclockedMemFrequency = 2050, MaxMemFrequency = 2100, Length = 324, Wattage = 300, MultiGPU = CrossFire, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10, SingleGPUScore = 16954, DualGPUScore = 23197, DualGPUPerformanceIncrease = 1.36823168573788, OverclockedSingleGPUScore = 17571, OverclockedDualGPUScore = 26260 }; gpus.Add(GPU_Radeon_RX_6900_XT_GAMING_TRIO_16G);
            GPU GPU_Radeon_RX_6900_XT_GAMING_X_TRIO_16G = new GPU() { Id = 315, Name = "Radeon RX 6900 XT GAMING X TRIO 16G", PartType = PartType.GPU, Manufacturer = MSI, Price = 1730, SellPrice = 577, LevelUnlock = 33, LevelPercent = 70, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_6900_XT, IsWaterCooled = false, RankingScore = 11646, VRAM = 16, MinCoreFrequency = 2010, BaseCoreFrequency = 2105, OverclockedCoreFrequency = 2150, MaxCoreFrequency = 2200, MinMemFrequency = 1900, BaseMemFrequency = 2000, OverclockedMemFrequency = 2050, MaxMemFrequency = 2100, Length = 324, Wattage = 300, MultiGPU = CrossFire, SlotSize = 2.5, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin, Eight_Pin }, ScoreToValueRatio = 10, SingleGPUScore = 17308, DualGPUScore = 25224, DualGPUPerformanceIncrease = 1.45736075803097, OverclockedSingleGPUScore = 17571, OverclockedDualGPUScore = 26260 }; gpus.Add(GPU_Radeon_RX_6900_XT_GAMING_X_TRIO_16G);
            GPU GPU_Radeon_RX_6900_XT___Corsair_Hydro_Series_XG7_RGB = new GPU() { Id = 316, Name = "Radeon RX 6900 XT | Corsair Hydro Series XG7 RGB", PartType = PartType.GPU, Manufacturer = CORSAIR, Price = 1700, SellPrice = 567, LevelUnlock = 33, LevelPercent = 90, Lighting = Color.RGB, ChipsetBrand = GPUChipsetBrand.AMD, GPUChipset = Radeon_RX_6900_XT, IsWaterCooled = true, RankingScore = 11112, VRAM = 16, MinCoreFrequency = 1300, BaseCoreFrequency = 1900, OverclockedCoreFrequency = 2292, MaxCoreFrequency = 2500, MinMemFrequency = 1700, BaseMemFrequency = 2000, OverclockedMemFrequency = 2185, MaxMemFrequency = 2300, Length = 263, Wattage = 300, MultiGPU = CrossFire, SlotSize = 2, PowerConnectors = new List<PowerConnector>() { Eight_Pin, Eight_Pin }, ScoreToValueRatio = 9.7, SingleGPUScore = 16501, DualGPUScore = 20607, DualGPUPerformanceIncrease = 1.24883340403612, OverclockedSingleGPUScore = 0, OverclockedDualGPUScore = 0 }; gpus.Add(GPU_Radeon_RX_6900_XT___Corsair_Hydro_Series_XG7_RGB);
            #endregion
            _context.GPU.AddRange(gpus);
            #region Memory
            List<Memory> memories = new List<Memory>();
            Memory Premier_Series_4_GB_2133_MHz = new Memory() { Id = 1, Name = "Premier Series 4 GB 2133 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 35, SellPrice = 12, LevelUnlock = 2, LevelPercent = 1, Lighting = null, Size = 4, Frequency = 2133, Voltage = 1.2, PricePerGB = 8.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2282 }; memories.Add(Premier_Series_4_GB_2133_MHz);
            Memory Premier_Series_8_GB_2133_MHz = new Memory() { Id = 2, Name = "Premier Series 8 GB 2133 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 60, SellPrice = 20, LevelUnlock = 2, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 2133, Voltage = 1.2, PricePerGB = 7.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2282 }; memories.Add(Premier_Series_8_GB_2133_MHz);
            Memory SPECTRIX_D40_RGB_8_GB_4000_MHz = new Memory() { Id = 3, Name = "SPECTRIX D40 RGB 8 GB 4000 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 150, SellPrice = 50, LevelUnlock = 24, LevelPercent = 20, Lighting = Color.RGB, Size = 8, Frequency = 4000, Voltage = 1.35, PricePerGB = 18.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4280 }; memories.Add(SPECTRIX_D40_RGB_8_GB_4000_MHz);
            Memory SPECTRIX_D40_RGB_8_GB_4133_MHz = new Memory() { Id = 4, Name = "SPECTRIX D40 RGB 8 GB 4133 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 170, SellPrice = 57, LevelUnlock = 24, LevelPercent = 40, Lighting = Color.RGB, Size = 8, Frequency = 4133, Voltage = 1.4, PricePerGB = 21.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4422 }; memories.Add(SPECTRIX_D40_RGB_8_GB_4133_MHz);
            Memory SPECTRIX_D40_RGB_8_GB_4266_MHz = new Memory() { Id = 5, Name = "SPECTRIX D40 RGB 8 GB 4266 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 190, SellPrice = 63, LevelUnlock = 24, LevelPercent = 60, Lighting = Color.RGB, Size = 8, Frequency = 4266, Voltage = 1.4, PricePerGB = 23.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4564 }; memories.Add(SPECTRIX_D40_RGB_8_GB_4266_MHz);
            Memory SPECTRIX_D40_RGB_8_GB_4400_MHz = new Memory() { Id = 6, Name = "SPECTRIX D40 RGB 8 GB 4400 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 230, SellPrice = 77, LevelUnlock = 24, LevelPercent = 80, Lighting = Color.RGB, Size = 8, Frequency = 4400, Voltage = 1.4, PricePerGB = 28.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4708 }; memories.Add(SPECTRIX_D40_RGB_8_GB_4400_MHz);
            Memory SPECTRIX_D41_RGB__Red__8_GB_3000_MHz = new Memory() { Id = 7, Name = "SPECTRIX D41 RGB (Red) 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 110, SellPrice = 37, LevelUnlock = 19, LevelPercent = 20, Lighting = Color.RGB, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(SPECTRIX_D41_RGB__Red__8_GB_3000_MHz);
            Memory SPECTRIX_D41_RGB__Red__8_GB_3200_MHz = new Memory() { Id = 8, Name = "SPECTRIX D41 RGB (Red) 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 120, SellPrice = 40, LevelUnlock = 19, LevelPercent = 50, Lighting = Color.RGB, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(SPECTRIX_D41_RGB__Red__8_GB_3200_MHz);
            Memory SPECTRIX_D41_RGB__Red__8_GB_3600_MHz = new Memory() { Id = 9, Name = "SPECTRIX D41 RGB (Red) 8 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 130, SellPrice = 43, LevelUnlock = 19, LevelPercent = 80, Lighting = Color.RGB, Size = 8, Frequency = 3600, Voltage = 1.35, PricePerGB = 16.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(SPECTRIX_D41_RGB__Red__8_GB_3600_MHz);
            Memory SPECTRIX_D60G_RGB_16_GB_3000_MHz = new Memory() { Id = 10, Name = "SPECTRIX D60G RGB 16 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 200, SellPrice = 67, LevelUnlock = 19, LevelPercent = 25, Lighting = Color.RGB, Size = 16, Frequency = 3000, Voltage = 1.35, PricePerGB = 12.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(SPECTRIX_D60G_RGB_16_GB_3000_MHz);
            Memory SPECTRIX_D60G_RGB_16_GB_3200_MHz = new Memory() { Id = 11, Name = "SPECTRIX D60G RGB 16 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 220, SellPrice = 73, LevelUnlock = 19, LevelPercent = 25, Lighting = Color.RGB, Size = 16, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(SPECTRIX_D60G_RGB_16_GB_3200_MHz);
            Memory SPECTRIX_D60G_RGB_8_GB_3000_MHz = new Memory() { Id = 12, Name = "SPECTRIX D60G RGB 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 110, SellPrice = 37, LevelUnlock = 19, LevelPercent = 25, Lighting = Color.RGB, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(SPECTRIX_D60G_RGB_8_GB_3000_MHz);
            Memory SPECTRIX_D60G_RGB_8_GB_3200_MHz = new Memory() { Id = 13, Name = "SPECTRIX D60G RGB 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 120, SellPrice = 40, LevelUnlock = 19, LevelPercent = 25, Lighting = Color.RGB, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(SPECTRIX_D60G_RGB_8_GB_3200_MHz);
            Memory SPECTRIX_D60G_RGB_8_GB_3600_MHz = new Memory() { Id = 14, Name = "SPECTRIX D60G RGB 8 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 130, SellPrice = 43, LevelUnlock = 19, LevelPercent = 25, Lighting = Color.RGB, Size = 8, Frequency = 3600, Voltage = 1.4, PricePerGB = 16.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(SPECTRIX_D60G_RGB_8_GB_3600_MHz);
            Memory SPECTRIX_D60G_RGB_8_GB_4133_MHz = new Memory() { Id = 15, Name = "SPECTRIX D60G RGB 8 GB 4133 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 170, SellPrice = 57, LevelUnlock = 19, LevelPercent = 25, Lighting = Color.RGB, Size = 8, Frequency = 4133, Voltage = 1.4, PricePerGB = 21.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4422 }; memories.Add(SPECTRIX_D60G_RGB_8_GB_4133_MHz);
            Memory SPECTRIX_D80_RGB_8_GB_3000_MHz = new Memory() { Id = 16, Name = "SPECTRIX D80 RGB 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 110, SellPrice = 37, LevelUnlock = 23, LevelPercent = 10, Lighting = Color.RGB, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(SPECTRIX_D80_RGB_8_GB_3000_MHz);
            Memory SPECTRIX_D80_RGB_8_GB_3200_MHz = new Memory() { Id = 17, Name = "SPECTRIX D80 RGB 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 120, SellPrice = 40, LevelUnlock = 23, LevelPercent = 20, Lighting = Color.RGB, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(SPECTRIX_D80_RGB_8_GB_3200_MHz);
            Memory SPECTRIX_D80_RGB_8_GB_3600_MHz = new Memory() { Id = 18, Name = "SPECTRIX D80 RGB 8 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 130, SellPrice = 43, LevelUnlock = 23, LevelPercent = 50, Lighting = Color.RGB, Size = 8, Frequency = 3600, Voltage = 1.35, PricePerGB = 16.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(SPECTRIX_D80_RGB_8_GB_3600_MHz);
            Memory SPECTRIX_D80_RGB_8_GB_4133_MHz = new Memory() { Id = 19, Name = "SPECTRIX D80 RGB 8 GB 4133 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 170, SellPrice = 57, LevelUnlock = 23, LevelPercent = 80, Lighting = Color.RGB, Size = 8, Frequency = 4133, Voltage = 1.35, PricePerGB = 21.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4422 }; memories.Add(SPECTRIX_D80_RGB_8_GB_4133_MHz);
            Memory XPG_Dazzle__Red_LED__16_GB_2400_MHz = new Memory() { Id = 20, Name = "XPG Dazzle (Red LED) 16 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 135, SellPrice = 45, LevelUnlock = 6, LevelPercent = 1, Lighting = Color.Red, Size = 16, Frequency = 2400, Voltage = 1.2, PricePerGB = 8.4, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(XPG_Dazzle__Red_LED__16_GB_2400_MHz);
            Memory XPG_Dazzle__Red_LED__16_GB_3000_MHz = new Memory() { Id = 21, Name = "XPG Dazzle (Red LED) 16 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 195, SellPrice = 65, LevelUnlock = 6, LevelPercent = 1, Lighting = Color.Red, Size = 16, Frequency = 3000, Voltage = 1.35, PricePerGB = 12.2, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(XPG_Dazzle__Red_LED__16_GB_3000_MHz);
            Memory XPG_Dazzle__Red_LED__8_GB_2400_MHz = new Memory() { Id = 22, Name = "XPG Dazzle (Red LED) 8 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 75, SellPrice = 25, LevelUnlock = 6, LevelPercent = 1, Lighting = Color.Red, Size = 8, Frequency = 2400, Voltage = 1.2, PricePerGB = 9.4, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(XPG_Dazzle__Red_LED__8_GB_2400_MHz);
            Memory XPG_Dazzle__Red_LED__8_GB_3000_MHz = new Memory() { Id = 23, Name = "XPG Dazzle (Red LED) 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 105, SellPrice = 35, LevelUnlock = 6, LevelPercent = 1, Lighting = Color.Red, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 13.1, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(XPG_Dazzle__Red_LED__8_GB_3000_MHz);
            Memory XPG_Flame_16_GB_3000_MHz = new Memory() { Id = 24, Name = "XPG Flame 16 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 190, SellPrice = 63, LevelUnlock = 13, LevelPercent = 1, Lighting = null, Size = 16, Frequency = 3000, Voltage = 1.35, PricePerGB = 11.9, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(XPG_Flame_16_GB_3000_MHz);
            Memory XPG_Flame_8_GB_2666_MHz = new Memory() { Id = 25, Name = "XPG Flame 8 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 80, SellPrice = 27, LevelUnlock = 13, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 2666, Voltage = 1.2, PricePerGB = 10, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(XPG_Flame_8_GB_2666_MHz);
            Memory XPG_Flame_8_GB_3000_MHz = new Memory() { Id = 26, Name = "XPG Flame 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 100, SellPrice = 33, LevelUnlock = 13, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 12.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(XPG_Flame_8_GB_3000_MHz);
            Memory XPG_GAMMIX_D10_4_GB_2400_MHz = new Memory() { Id = 27, Name = "XPG GAMMIX D10 4 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 40, SellPrice = 13, LevelUnlock = 5, LevelPercent = 35, Lighting = null, Size = 4, Frequency = 2400, Voltage = 1.2, PricePerGB = 10, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(XPG_GAMMIX_D10_4_GB_2400_MHz);
            Memory XPG_GAMMIX_D10_4_GB_2666_MHz = new Memory() { Id = 28, Name = "XPG GAMMIX D10 4 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 45, SellPrice = 15, LevelUnlock = 5, LevelPercent = 35, Lighting = null, Size = 4, Frequency = 2666, Voltage = 1.2, PricePerGB = 11.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(XPG_GAMMIX_D10_4_GB_2666_MHz);
            Memory XPG_GAMMIX_D10_8_GB_2400_MHz = new Memory() { Id = 29, Name = "XPG GAMMIX D10 8 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 70, SellPrice = 23, LevelUnlock = 5, LevelPercent = 35, Lighting = null, Size = 8, Frequency = 2400, Voltage = 1.2, PricePerGB = 8.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(XPG_GAMMIX_D10_8_GB_2400_MHz);
            Memory XPG_GAMMIX_D10_8_GB_2666_MHz = new Memory() { Id = 30, Name = "XPG GAMMIX D10 8 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 80, SellPrice = 27, LevelUnlock = 5, LevelPercent = 35, Lighting = null, Size = 8, Frequency = 2666, Voltage = 1.2, PricePerGB = 10, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(XPG_GAMMIX_D10_8_GB_2666_MHz);
            Memory XPG_Z1_8_GB_4000_MHz = new Memory() { Id = 31, Name = "XPG Z1 8 GB 4000 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 140, SellPrice = 47, LevelUnlock = 14, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 4000, Voltage = 1.35, PricePerGB = 17.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4280 }; memories.Add(XPG_Z1_8_GB_4000_MHz);
            Memory XPG_Z1_8_GB_4133_MHz = new Memory() { Id = 32, Name = "XPG Z1 8 GB 4133 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 160, SellPrice = 53, LevelUnlock = 17, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 4133, Voltage = 1.4, PricePerGB = 20, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4422 }; memories.Add(XPG_Z1_8_GB_4133_MHz);
            Memory XPG_Z1_8_GB_4266_MHz = new Memory() { Id = 33, Name = "XPG Z1 8 GB 4266 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 180, SellPrice = 60, LevelUnlock = 22, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 4266, Voltage = 1.4, PricePerGB = 22.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4564 }; memories.Add(XPG_Z1_8_GB_4266_MHz);
            Memory XPG_Z1_8_GB_4400_MHz = new Memory() { Id = 34, Name = "XPG Z1 8 GB 4400 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 220, SellPrice = 73, LevelUnlock = 24, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 4400, Voltage = 1.4, PricePerGB = 27.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4708 }; memories.Add(XPG_Z1_8_GB_4400_MHz);
            Memory XPG_Z1_8_GB_4600_MHz = new Memory() { Id = 35, Name = "XPG Z1 8 GB 4600 MHz", PartType = PartType.Memory, Manufacturer = ADATA, Price = 280, SellPrice = 93, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 4600, Voltage = 1.5, PricePerGB = 35, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4922 }; memories.Add(XPG_Z1_8_GB_4600_MHz);
            Memory CVN_Guardian_DDR4_16_GB_3200_MHz = new Memory() { Id = 36, Name = "CVN Guardian DDR4 16 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Colorful, Price = 220, SellPrice = 73, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, Size = 16, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(CVN_Guardian_DDR4_16_GB_3200_MHz);
            Memory CVN_Guardian_DDR4_8_GB_2666_MHz = new Memory() { Id = 37, Name = "CVN Guardian DDR4 8 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = Colorful, Price = 90, SellPrice = 30, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 2666, Voltage = 1.2, PricePerGB = 11.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(CVN_Guardian_DDR4_8_GB_2666_MHz);
            Memory CVN_Guardian_DDR4_8_GB_3200_MHz = new Memory() { Id = 38, Name = "CVN Guardian DDR4 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Colorful, Price = 120, SellPrice = 40, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(CVN_Guardian_DDR4_8_GB_3200_MHz);
            Memory iGame_Vulcan_DDR4_8_GB_3600_MHz = new Memory() { Id = 39, Name = "iGame Vulcan DDR4 8 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = Colorful, Price = 130, SellPrice = 43, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 3600, Voltage = 1.35, PricePerGB = 16.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(iGame_Vulcan_DDR4_8_GB_3600_MHz);
            Memory iGame_Vulcan_DDR4_8_GB_4266_MHz = new Memory() { Id = 40, Name = "iGame Vulcan DDR4 8 GB 4266 MHz", PartType = PartType.Memory, Manufacturer = Colorful, Price = 190, SellPrice = 63, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 4266, Voltage = 1.4, PricePerGB = 23.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4564 }; memories.Add(iGame_Vulcan_DDR4_8_GB_4266_MHz);
            Memory Dominator_Platinum_16_GB_2400_MHz = new Memory() { Id = 41, Name = "Dominator Platinum 16 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 135, SellPrice = 45, LevelUnlock = 8, LevelPercent = 10, Lighting = Color.White, Size = 16, Frequency = 2400, Voltage = 1.2, PricePerGB = 8.4, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(Dominator_Platinum_16_GB_2400_MHz);
            Memory Dominator_Platinum_16_GB_2666_MHz = new Memory() { Id = 42, Name = "Dominator Platinum 16 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 155, SellPrice = 52, LevelUnlock = 6, LevelPercent = 70, Lighting = Color.White, Size = 16, Frequency = 2666, Voltage = 1.2, PricePerGB = 9.7, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(Dominator_Platinum_16_GB_2666_MHz);
            Memory Dominator_Platinum_16_GB_2800_MHz = new Memory() { Id = 43, Name = "Dominator Platinum 16 GB 2800 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 175, SellPrice = 58, LevelUnlock = 6, LevelPercent = 15, Lighting = Color.White, Size = 16, Frequency = 2800, Voltage = 1.2, PricePerGB = 10.9, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2996 }; memories.Add(Dominator_Platinum_16_GB_2800_MHz);
            Memory Dominator_Platinum_16_GB_3000_MHz = new Memory() { Id = 44, Name = "Dominator Platinum 16 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 195, SellPrice = 65, LevelUnlock = 6, LevelPercent = 75, Lighting = Color.White, Size = 16, Frequency = 3000, Voltage = 1.35, PricePerGB = 12.2, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(Dominator_Platinum_16_GB_3000_MHz);
            Memory Dominator_Platinum_16_GB_3200_MHz = new Memory() { Id = 45, Name = "Dominator Platinum 16 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 215, SellPrice = 72, LevelUnlock = 8, LevelPercent = 50, Lighting = Color.White, Size = 16, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.4, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Dominator_Platinum_16_GB_3200_MHz);
            Memory Dominator_Platinum_4_GB_2666_MHz = new Memory() { Id = 46, Name = "Dominator Platinum 4 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 50, SellPrice = 17, LevelUnlock = 6, LevelPercent = 50, Lighting = Color.White, Size = 4, Frequency = 2666, Voltage = 1.2, PricePerGB = 12.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(Dominator_Platinum_4_GB_2666_MHz);
            Memory Dominator_Platinum_4_GB_3000_MHz = new Memory() { Id = 47, Name = "Dominator Platinum 4 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 60, SellPrice = 20, LevelUnlock = 6, LevelPercent = 30, Lighting = Color.White, Size = 4, Frequency = 3000, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(Dominator_Platinum_4_GB_3000_MHz);
            Memory Dominator_Platinum_4_GB_3200_MHz = new Memory() { Id = 48, Name = "Dominator Platinum 4 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 65, SellPrice = 22, LevelUnlock = 8, LevelPercent = 1, Lighting = Color.White, Size = 4, Frequency = 3200, Voltage = 1.35, PricePerGB = 16.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Dominator_Platinum_4_GB_3200_MHz);
            Memory Dominator_Platinum_4_GB_4000_MHz = new Memory() { Id = 49, Name = "Dominator Platinum 4 GB 4000 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 80, SellPrice = 27, LevelUnlock = 14, LevelPercent = 30, Lighting = Color.White, Size = 4, Frequency = 4000, Voltage = 1.35, PricePerGB = 20, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4280 }; memories.Add(Dominator_Platinum_4_GB_4000_MHz);
            Memory Dominator_Platinum_8_GB_2400_MHz = new Memory() { Id = 50, Name = "Dominator Platinum 8 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 75, SellPrice = 25, LevelUnlock = 6, LevelPercent = 1, Lighting = Color.White, Size = 8, Frequency = 2400, Voltage = 1.2, PricePerGB = 9.4, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(Dominator_Platinum_8_GB_2400_MHz);
            Memory Dominator_Platinum_8_GB_2666_MHz = new Memory() { Id = 51, Name = "Dominator Platinum 8 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 85, SellPrice = 28, LevelUnlock = 6, LevelPercent = 60, Lighting = Color.White, Size = 8, Frequency = 2666, Voltage = 1.2, PricePerGB = 10.6, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(Dominator_Platinum_8_GB_2666_MHz);
            Memory Dominator_Platinum_8_GB_2800_MHz = new Memory() { Id = 52, Name = "Dominator Platinum 8 GB 2800 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 95, SellPrice = 32, LevelUnlock = 6, LevelPercent = 1, Lighting = Color.White, Size = 8, Frequency = 2800, Voltage = 1.2, PricePerGB = 11.9, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2996 }; memories.Add(Dominator_Platinum_8_GB_2800_MHz);
            Memory Dominator_Platinum_8_GB_3000_MHz = new Memory() { Id = 53, Name = "Dominator Platinum 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 105, SellPrice = 35, LevelUnlock = 6, LevelPercent = 60, Lighting = Color.White, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 13.1, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(Dominator_Platinum_8_GB_3000_MHz);
            Memory Dominator_Platinum_8_GB_3200_MHz = new Memory() { Id = 54, Name = "Dominator Platinum 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 115, SellPrice = 38, LevelUnlock = 8, LevelPercent = 1, Lighting = Color.White, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 14.4, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Dominator_Platinum_8_GB_3200_MHz);
            Memory Dominator_Platinum_8_GB_3600_MHz = new Memory() { Id = 55, Name = "Dominator Platinum 8 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 125, SellPrice = 42, LevelUnlock = 10, LevelPercent = 1, Lighting = Color.White, Size = 8, Frequency = 3600, Voltage = 1.35, PricePerGB = 15.6, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Dominator_Platinum_8_GB_3600_MHz);
            Memory Dominator_Platinum_8_GB_3733_MHz = new Memory() { Id = 56, Name = "Dominator Platinum 8 GB 3733 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 135, SellPrice = 45, LevelUnlock = 12, LevelPercent = 1, Lighting = Color.White, Size = 8, Frequency = 3733, Voltage = 1.35, PricePerGB = 16.9, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3994 }; memories.Add(Dominator_Platinum_8_GB_3733_MHz);
            Memory Dominator_Platinum_RGB__Black__16_GB_3200_MHz = new Memory() { Id = 57, Name = "Dominator Platinum RGB (Black) 16 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 220, SellPrice = 73, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, Size = 16, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Dominator_Platinum_RGB__Black__16_GB_3200_MHz);
            Memory Dominator_Platinum_RGB__Black__16_GB_3600_MHz = new Memory() { Id = 58, Name = "Dominator Platinum RGB (Black) 16 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 240, SellPrice = 80, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, Size = 16, Frequency = 3600, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Dominator_Platinum_RGB__Black__16_GB_3600_MHz);
            Memory Dominator_Platinum_RGB__Black__16_GB_4000_MHz = new Memory() { Id = 59, Name = "Dominator Platinum RGB (Black) 16 GB 4000 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 280, SellPrice = 93, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, Size = 16, Frequency = 4000, Voltage = 1.35, PricePerGB = 17.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4280 }; memories.Add(Dominator_Platinum_RGB__Black__16_GB_4000_MHz);
            Memory Dominator_Platinum_RGB__Black__16_GB_4800_MHz = new Memory() { Id = 60, Name = "Dominator Platinum RGB (Black) 16 GB 4800 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 840, SellPrice = 280, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, Size = 16, Frequency = 4800, Voltage = 1.35, PricePerGB = 52.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 5136 }; memories.Add(Dominator_Platinum_RGB__Black__16_GB_4800_MHz);
            Memory Dominator_Platinum_RGB__Black__8_GB_3200_MHz = new Memory() { Id = 61, Name = "Dominator Platinum RGB (Black) 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 120, SellPrice = 40, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Dominator_Platinum_RGB__Black__8_GB_3200_MHz);
            Memory Dominator_Platinum_RGB__Black__8_GB_3600_MHz = new Memory() { Id = 62, Name = "Dominator Platinum RGB (Black) 8 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 130, SellPrice = 43, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 3600, Voltage = 1.35, PricePerGB = 16.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Dominator_Platinum_RGB__Black__8_GB_3600_MHz);
            Memory Dominator_Platinum_RGB__Black__8_GB_4000_MHz = new Memory() { Id = 63, Name = "Dominator Platinum RGB (Black) 8 GB 4000 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 150, SellPrice = 50, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 4000, Voltage = 1.35, PricePerGB = 18.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4280 }; memories.Add(Dominator_Platinum_RGB__Black__8_GB_4000_MHz);
            Memory Dominator_Platinum_RGB__Black__8_GB_4800_MHz = new Memory() { Id = 64, Name = "Dominator Platinum RGB (Black) 8 GB 4800 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 430, SellPrice = 143, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 4800, Voltage = 1.35, PricePerGB = 53.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 5136 }; memories.Add(Dominator_Platinum_RGB__Black__8_GB_4800_MHz);
            Memory Dominator_Platinum_RGB__White__16_GB_3200_MHz = new Memory() { Id = 65, Name = "Dominator Platinum RGB (White) 16 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 220, SellPrice = 73, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, Size = 16, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Dominator_Platinum_RGB__White__16_GB_3200_MHz);
            Memory Dominator_Platinum_RGB__White__16_GB_3600_MHz = new Memory() { Id = 66, Name = "Dominator Platinum RGB (White) 16 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 240, SellPrice = 80, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, Size = 16, Frequency = 3600, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Dominator_Platinum_RGB__White__16_GB_3600_MHz);
            Memory Dominator_Platinum_RGB__White__16_GB_4000_MHz = new Memory() { Id = 67, Name = "Dominator Platinum RGB (White) 16 GB 4000 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 280, SellPrice = 93, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, Size = 16, Frequency = 4000, Voltage = 1.35, PricePerGB = 17.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4280 }; memories.Add(Dominator_Platinum_RGB__White__16_GB_4000_MHz);
            Memory Dominator_Platinum_RGB__White__16_GB_4800_MHz = new Memory() { Id = 68, Name = "Dominator Platinum RGB (White) 16 GB 4800 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 840, SellPrice = 280, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, Size = 16, Frequency = 4800, Voltage = 1.35, PricePerGB = 52.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 5136 }; memories.Add(Dominator_Platinum_RGB__White__16_GB_4800_MHz);
            Memory Dominator_Platinum_RGB__White__8_GB_3200_MHz = new Memory() { Id = 69, Name = "Dominator Platinum RGB (White) 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 120, SellPrice = 40, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Dominator_Platinum_RGB__White__8_GB_3200_MHz);
            Memory Dominator_Platinum_RGB__White__8_GB_3600_MHz = new Memory() { Id = 70, Name = "Dominator Platinum RGB (White) 8 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 130, SellPrice = 43, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 3600, Voltage = 1.35, PricePerGB = 16.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Dominator_Platinum_RGB__White__8_GB_3600_MHz);
            Memory Dominator_Platinum_RGB__White__8_GB_4000_MHz = new Memory() { Id = 71, Name = "Dominator Platinum RGB (White) 8 GB 4000 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 150, SellPrice = 50, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 4000, Voltage = 1.35, PricePerGB = 18.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4280 }; memories.Add(Dominator_Platinum_RGB__White__8_GB_4000_MHz);
            Memory Dominator_Platinum_RGB__White__8_GB_4800_MHz = new Memory() { Id = 72, Name = "Dominator Platinum RGB (White) 8 GB 4800 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 430, SellPrice = 143, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 4800, Voltage = 1.35, PricePerGB = 53.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 5136 }; memories.Add(Dominator_Platinum_RGB__White__8_GB_4800_MHz);
            Memory Dominator_Platinum_Special_Edition_CONTRAST_8_GB_3466_MHz = new Memory() { Id = 73, Name = "Dominator Platinum Special Edition CONTRAST 8 GB 3466 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 123, SellPrice = 41, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.White, Size = 8, Frequency = 3466, Voltage = 1.35, PricePerGB = 15.4, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3708 }; memories.Add(Dominator_Platinum_Special_Edition_CONTRAST_8_GB_3466_MHz);
            Memory Vengeance_LPX__Black__16_GB_2400_MHz = new Memory() { Id = 74, Name = "Vengeance LPX (Black) 16 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 130, SellPrice = 43, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 16, Frequency = 2400, Voltage = 1.35, PricePerGB = 8.1, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(Vengeance_LPX__Black__16_GB_2400_MHz);
            Memory Vengeance_LPX__Black__16_GB_2666_MHz = new Memory() { Id = 75, Name = "Vengeance LPX (Black) 16 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 150, SellPrice = 50, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 16, Frequency = 2666, Voltage = 1.35, PricePerGB = 9.4, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(Vengeance_LPX__Black__16_GB_2666_MHz);
            Memory Vengeance_LPX__Black__16_GB_3200_MHz = new Memory() { Id = 76, Name = "Vengeance LPX (Black) 16 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 210, SellPrice = 70, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 16, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.1, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Vengeance_LPX__Black__16_GB_3200_MHz);
            Memory Vengeance_LPX__Black__16_GB_3600_MHz = new Memory() { Id = 77, Name = "Vengeance LPX (Black) 16 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 230, SellPrice = 77, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 16, Frequency = 3600, Voltage = 1.35, PricePerGB = 14.4, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Vengeance_LPX__Black__16_GB_3600_MHz);
            Memory Vengeance_LPX__Black__32_GB_2666_MHz = new Memory() { Id = 78, Name = "Vengeance LPX (Black) 32 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 285, SellPrice = 95, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 32, Frequency = 2666, Voltage = 1.35, PricePerGB = 8.9, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(Vengeance_LPX__Black__32_GB_2666_MHz);
            Memory Vengeance_LPX__Black__32_GB_3200_MHz = new Memory() { Id = 79, Name = "Vengeance LPX (Black) 32 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 405, SellPrice = 135, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 32, Frequency = 3200, Voltage = 1.35, PricePerGB = 12.7, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Vengeance_LPX__Black__32_GB_3200_MHz);
            Memory Vengeance_LPX__Black__32_GB_3600_MHz = new Memory() { Id = 80, Name = "Vengeance LPX (Black) 32 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 445, SellPrice = 148, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 32, Frequency = 3600, Voltage = 1.35, PricePerGB = 13.9, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Vengeance_LPX__Black__32_GB_3600_MHz);
            Memory Vengeance_LPX__Black__4_GB_2133_MHz = new Memory() { Id = 81, Name = "Vengeance LPX (Black) 4 GB 2133 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 35, SellPrice = 12, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 4, Frequency = 2133, Voltage = 1.35, PricePerGB = 8.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2282 }; memories.Add(Vengeance_LPX__Black__4_GB_2133_MHz);
            Memory Vengeance_LPX__Black__4_GB_2400_MHz = new Memory() { Id = 82, Name = "Vengeance LPX (Black) 4 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 40, SellPrice = 13, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 4, Frequency = 2400, Voltage = 1.35, PricePerGB = 10, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(Vengeance_LPX__Black__4_GB_2400_MHz);
            Memory Vengeance_LPX__Black__4_GB_2666_MHz = new Memory() { Id = 83, Name = "Vengeance LPX (Black) 4 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 45, SellPrice = 15, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 4, Frequency = 2666, Voltage = 1.35, PricePerGB = 11.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(Vengeance_LPX__Black__4_GB_2666_MHz);
            Memory Vengeance_LPX__Black__8_GB_2400_MHz = new Memory() { Id = 84, Name = "Vengeance LPX (Black) 8 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 70, SellPrice = 23, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 2400, Voltage = 1.35, PricePerGB = 8.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(Vengeance_LPX__Black__8_GB_2400_MHz);
            Memory Vengeance_LPX__Black__8_GB_2666_MHz = new Memory() { Id = 85, Name = "Vengeance LPX (Black) 8 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 80, SellPrice = 27, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 2666, Voltage = 1.35, PricePerGB = 10, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(Vengeance_LPX__Black__8_GB_2666_MHz);
            Memory Vengeance_LPX__Black__8_GB_2933_MHz = new Memory() { Id = 86, Name = "Vengeance LPX (Black) 8 GB 2933 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 96, SellPrice = 32, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 2933, Voltage = 1.35, PricePerGB = 12, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3138 }; memories.Add(Vengeance_LPX__Black__8_GB_2933_MHz);
            Memory Vengeance_LPX__Black__8_GB_3200_MHz = new Memory() { Id = 87, Name = "Vengeance LPX (Black) 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 110, SellPrice = 37, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Vengeance_LPX__Black__8_GB_3200_MHz);
            Memory Vengeance_LPX__Black__8_GB_3600_MHz = new Memory() { Id = 88, Name = "Vengeance LPX (Black) 8 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 120, SellPrice = 40, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 3600, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Vengeance_LPX__Black__8_GB_3600_MHz);
            Memory Vengeance_LPX__Black__8_GB_4000_MHz = new Memory() { Id = 89, Name = "Vengeance LPX (Black) 8 GB 4000 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 140, SellPrice = 47, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 4000, Voltage = 1.35, PricePerGB = 17.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4280 }; memories.Add(Vengeance_LPX__Black__8_GB_4000_MHz);
            Memory Vengeance_LPX__Black__8_GB_4333_MHz = new Memory() { Id = 90, Name = "Vengeance LPX (Black) 8 GB 4333 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 200, SellPrice = 67, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 4333, Voltage = 1.35, PricePerGB = 25, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4636 }; memories.Add(Vengeance_LPX__Black__8_GB_4333_MHz);
            Memory Vengeance_LPX__Blue__4_GB_2133_MHz = new Memory() { Id = 91, Name = "Vengeance LPX (Blue) 4 GB 2133 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 35, SellPrice = 12, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 4, Frequency = 2133, Voltage = 1.35, PricePerGB = 8.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2282 }; memories.Add(Vengeance_LPX__Blue__4_GB_2133_MHz);
            Memory Vengeance_LPX__Blue__4_GB_2400_MHz = new Memory() { Id = 92, Name = "Vengeance LPX (Blue) 4 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 40, SellPrice = 13, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 4, Frequency = 2400, Voltage = 1.35, PricePerGB = 10, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(Vengeance_LPX__Blue__4_GB_2400_MHz);
            Memory Vengeance_LPX__Blue__4_GB_2666_MHz = new Memory() { Id = 93, Name = "Vengeance LPX (Blue) 4 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 45, SellPrice = 15, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 4, Frequency = 2666, Voltage = 1.35, PricePerGB = 11.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(Vengeance_LPX__Blue__4_GB_2666_MHz);
            Memory Vengeance_LPX__Blue__4_GB_2800_MHz = new Memory() { Id = 94, Name = "Vengeance LPX (Blue) 4 GB 2800 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 50, SellPrice = 17, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 4, Frequency = 2800, Voltage = 1.35, PricePerGB = 12.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2996 }; memories.Add(Vengeance_LPX__Blue__4_GB_2800_MHz);
            Memory Vengeance_LPX__Blue__4_GB_3000_MHz = new Memory() { Id = 95, Name = "Vengeance LPX (Blue) 4 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 55, SellPrice = 18, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 4, Frequency = 3000, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(Vengeance_LPX__Blue__4_GB_3000_MHz);
            Memory Vengeance_LPX__Blue__8_GB_2400_MHz = new Memory() { Id = 96, Name = "Vengeance LPX (Blue) 8 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 70, SellPrice = 23, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 2400, Voltage = 1.35, PricePerGB = 8.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(Vengeance_LPX__Blue__8_GB_2400_MHz);
            Memory Vengeance_LPX__Blue__8_GB_2666_MHz = new Memory() { Id = 97, Name = "Vengeance LPX (Blue) 8 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 80, SellPrice = 27, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 2666, Voltage = 1.35, PricePerGB = 10, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(Vengeance_LPX__Blue__8_GB_2666_MHz);
            Memory Vengeance_LPX__Blue__8_GB_3000_MHz = new Memory() { Id = 98, Name = "Vengeance LPX (Blue) 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 100, SellPrice = 33, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 12.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(Vengeance_LPX__Blue__8_GB_3000_MHz);
            Memory Vengeance_LPX__Cool_Gray__16_GB_3000_MHz = new Memory() { Id = 99, Name = "Vengeance LPX (Cool Gray) 16 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 190, SellPrice = 63, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 16, Frequency = 3000, Voltage = 1.35, PricePerGB = 11.9, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(Vengeance_LPX__Cool_Gray__16_GB_3000_MHz);
            Memory Vengeance_LPX__Cool_Gray__16_GB_3200_MHz = new Memory() { Id = 100, Name = "Vengeance LPX (Cool Gray) 16 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 210, SellPrice = 70, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 16, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.1, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Vengeance_LPX__Cool_Gray__16_GB_3200_MHz);
            Memory Vengeance_LPX__Cool_Gray__8_GB_3000_MHz = new Memory() { Id = 101, Name = "Vengeance LPX (Cool Gray) 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 100, SellPrice = 33, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 12.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(Vengeance_LPX__Cool_Gray__8_GB_3000_MHz);
            Memory Vengeance_LPX__Cool_Gray__8_GB_3200_MHz = new Memory() { Id = 102, Name = "Vengeance LPX (Cool Gray) 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 110, SellPrice = 37, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Vengeance_LPX__Cool_Gray__8_GB_3200_MHz);
            Memory Vengeance_LPX__Red__16_GB_2400_MHz = new Memory() { Id = 103, Name = "Vengeance LPX (Red) 16 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 130, SellPrice = 43, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 16, Frequency = 2400, Voltage = 1.35, PricePerGB = 8.1, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(Vengeance_LPX__Red__16_GB_2400_MHz);
            Memory Vengeance_LPX__Red__16_GB_2666_MHz = new Memory() { Id = 104, Name = "Vengeance LPX (Red) 16 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 150, SellPrice = 50, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 16, Frequency = 2666, Voltage = 1.35, PricePerGB = 9.4, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(Vengeance_LPX__Red__16_GB_2666_MHz);
            Memory Vengeance_LPX__Red__16_GB_3200_MHz = new Memory() { Id = 105, Name = "Vengeance LPX (Red) 16 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 210, SellPrice = 70, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 16, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.1, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Vengeance_LPX__Red__16_GB_3200_MHz);
            Memory Vengeance_LPX__Red__16_GB_3600_MHz = new Memory() { Id = 106, Name = "Vengeance LPX (Red) 16 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 230, SellPrice = 77, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 16, Frequency = 3600, Voltage = 1.35, PricePerGB = 14.4, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Vengeance_LPX__Red__16_GB_3600_MHz);
            Memory Vengeance_LPX__Red__32_GB_2666_MHz = new Memory() { Id = 107, Name = "Vengeance LPX (Red) 32 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 285, SellPrice = 95, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 32, Frequency = 2666, Voltage = 1.35, PricePerGB = 8.9, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(Vengeance_LPX__Red__32_GB_2666_MHz);
            Memory Vengeance_LPX__Red__32_GB_3200_MHz = new Memory() { Id = 108, Name = "Vengeance LPX (Red) 32 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 405, SellPrice = 135, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 32, Frequency = 3200, Voltage = 1.35, PricePerGB = 12.7, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Vengeance_LPX__Red__32_GB_3200_MHz);
            Memory Vengeance_LPX__Red__32_GB_3600_MHz = new Memory() { Id = 109, Name = "Vengeance LPX (Red) 32 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 445, SellPrice = 148, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 32, Frequency = 3600, Voltage = 1.35, PricePerGB = 13.9, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Vengeance_LPX__Red__32_GB_3600_MHz);
            Memory Vengeance_LPX__Red__4_GB_2133_MHz = new Memory() { Id = 111, Name = "Vengeance LPX (Red) 4 GB 2133 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 35, SellPrice = 12, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 4, Frequency = 2133, Voltage = 1.35, PricePerGB = 8.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2282 }; memories.Add(Vengeance_LPX__Red__4_GB_2133_MHz);
            Memory Vengeance_LPX__Red__4_GB_2400_MHz = new Memory() { Id = 112, Name = "Vengeance LPX (Red) 4 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 40, SellPrice = 13, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 4, Frequency = 2400, Voltage = 1.35, PricePerGB = 10, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(Vengeance_LPX__Red__4_GB_2400_MHz);
            Memory Vengeance_LPX__Red__4_GB_2666_MHz = new Memory() { Id = 113, Name = "Vengeance LPX (Red) 4 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 45, SellPrice = 15, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 4, Frequency = 2666, Voltage = 1.35, PricePerGB = 11.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(Vengeance_LPX__Red__4_GB_2666_MHz);
            Memory Vengeance_LPX__Red__8_GB_2400_MHz = new Memory() { Id = 114, Name = "Vengeance LPX (Red) 8 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 70, SellPrice = 23, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 2400, Voltage = 1.35, PricePerGB = 8.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(Vengeance_LPX__Red__8_GB_2400_MHz);
            Memory Vengeance_LPX__Red__8_GB_2666_MHz = new Memory() { Id = 115, Name = "Vengeance LPX (Red) 8 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 80, SellPrice = 27, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 2666, Voltage = 1.35, PricePerGB = 10, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(Vengeance_LPX__Red__8_GB_2666_MHz);
            Memory Vengeance_LPX__Red__8_GB_2933_MHz = new Memory() { Id = 116, Name = "Vengeance LPX (Red) 8 GB 2933 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 96, SellPrice = 32, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 2933, Voltage = 1.35, PricePerGB = 12, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3138 }; memories.Add(Vengeance_LPX__Red__8_GB_2933_MHz);
            Memory Vengeance_LPX__Red__8_GB_3200_MHz = new Memory() { Id = 117, Name = "Vengeance LPX (Red) 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 110, SellPrice = 37, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Vengeance_LPX__Red__8_GB_3200_MHz);
            Memory Vengeance_LPX__Red__8_GB_3600_MHz = new Memory() { Id = 118, Name = "Vengeance LPX (Red) 8 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 120, SellPrice = 40, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 3600, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Vengeance_LPX__Red__8_GB_3600_MHz);
            Memory Vengeance_LPX__Red__8_GB_4000_MHz = new Memory() { Id = 119, Name = "Vengeance LPX (Red) 8 GB 4000 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 140, SellPrice = 47, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 4000, Voltage = 1.35, PricePerGB = 17.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4280 }; memories.Add(Vengeance_LPX__Red__8_GB_4000_MHz);
            Memory Vengeance_LPX__Red__8_GB_4333_MHz = new Memory() { Id = 120, Name = "Vengeance LPX (Red) 8 GB 4333 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 200, SellPrice = 67, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 4333, Voltage = 1.35, PricePerGB = 25, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4636 }; memories.Add(Vengeance_LPX__Red__8_GB_4333_MHz);
            Memory Vengeance_LPX__White__16_GB_2666_MHz = new Memory() { Id = 121, Name = "Vengeance LPX (White) 16 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 150, SellPrice = 50, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 16, Frequency = 2666, Voltage = 1.35, PricePerGB = 9.4, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(Vengeance_LPX__White__16_GB_2666_MHz);
            Memory Vengeance_LPX__White__16_GB_3000_MHz = new Memory() { Id = 122, Name = "Vengeance LPX (White) 16 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 190, SellPrice = 63, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 16, Frequency = 3000, Voltage = 1.35, PricePerGB = 11.9, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(Vengeance_LPX__White__16_GB_3000_MHz);
            Memory Vengeance_LPX__White__16_GB_3200_MHz = new Memory() { Id = 123, Name = "Vengeance LPX (White) 16 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 210, SellPrice = 70, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 16, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.1, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Vengeance_LPX__White__16_GB_3200_MHz);
            Memory Vengeance_LPX__White__8_GB_2666_MHz = new Memory() { Id = 124, Name = "Vengeance LPX (White) 8 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 80, SellPrice = 27, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 2666, Voltage = 1.35, PricePerGB = 10, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(Vengeance_LPX__White__8_GB_2666_MHz);
            Memory Vengeance_LPX__White__8_GB_3000_MHz = new Memory() { Id = 125, Name = "Vengeance LPX (White) 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 100, SellPrice = 33, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 12.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(Vengeance_LPX__White__8_GB_3000_MHz);
            Memory Vengeance_LPX__White__8_GB_3200_MHz = new Memory() { Id = 126, Name = "Vengeance LPX (White) 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 110, SellPrice = 37, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Vengeance_LPX__White__8_GB_3200_MHz);
            Memory VENGEANCE_RGB_PRO__Black__8_GB_3600_MHz = new Memory() { Id = 127, Name = "VENGEANCE RGB PRO (Black) 8 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 130, SellPrice = 43, LevelUnlock = 22, LevelPercent = 30, Lighting = Color.RGB, Size = 8, Frequency = 3600, Voltage = 1.35, PricePerGB = 16.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(VENGEANCE_RGB_PRO__Black__8_GB_3600_MHz);
            Memory VENGEANCE_RGB_PRO__Black__8_GB_4000_MHz = new Memory() { Id = 128, Name = "VENGEANCE RGB PRO (Black) 8 GB 4000 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 150, SellPrice = 50, LevelUnlock = 22, LevelPercent = 45, Lighting = Color.RGB, Size = 8, Frequency = 4000, Voltage = 1.35, PricePerGB = 18.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4280 }; memories.Add(VENGEANCE_RGB_PRO__Black__8_GB_4000_MHz);
            Memory VENGEANCE_RGB_PRO__Black__8_GB_4266_MHz = new Memory() { Id = 129, Name = "VENGEANCE RGB PRO (Black) 8 GB 4266 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 190, SellPrice = 63, LevelUnlock = 22, LevelPercent = 45, Lighting = Color.RGB, Size = 8, Frequency = 4266, Voltage = 1.35, PricePerGB = 23.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4564 }; memories.Add(VENGEANCE_RGB_PRO__Black__8_GB_4266_MHz);
            Memory VENGEANCE_RGB_PRO__Black__8_GB_4700_MHz = new Memory() { Id = 130, Name = "VENGEANCE RGB PRO (Black) 8 GB 4700 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 370, SellPrice = 123, LevelUnlock = 29, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 4700, Voltage = 1.45, PricePerGB = 46.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 5029 }; memories.Add(VENGEANCE_RGB_PRO__Black__8_GB_4700_MHz);
            Memory VENGEANCE_RGB_PRO__White__8_GB_2666_MHz = new Memory() { Id = 131, Name = "VENGEANCE RGB PRO (White) 8 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 90, SellPrice = 30, LevelUnlock = 22, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 2666, Voltage = 1.2, PricePerGB = 11.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(VENGEANCE_RGB_PRO__White__8_GB_2666_MHz);
            Memory VENGEANCE_RGB_PRO__White__8_GB_3000_MHz = new Memory() { Id = 132, Name = "VENGEANCE RGB PRO (White) 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 110, SellPrice = 37, LevelUnlock = 22, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(VENGEANCE_RGB_PRO__White__8_GB_3000_MHz);
            Memory VENGEANCE_RGB_PRO__White__8_GB_3200_MHz = new Memory() { Id = 133, Name = "VENGEANCE RGB PRO (White) 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 120, SellPrice = 40, LevelUnlock = 22, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(VENGEANCE_RGB_PRO__White__8_GB_3200_MHz);
            Memory VENGEANCE_RGB_PRO__White__8_GB_3600_MHz = new Memory() { Id = 134, Name = "VENGEANCE RGB PRO (White) 8 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = CORSAIR, Price = 130, SellPrice = 43, LevelUnlock = 22, LevelPercent = 30, Lighting = Color.RGB, Size = 8, Frequency = 3600, Voltage = 1.35, PricePerGB = 16.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(VENGEANCE_RGB_PRO__White__8_GB_3600_MHz);
            Memory MOTIV8OR_4_GB_2400_MHz = new Memory() { Id = 135, Name = "MOTIV8OR 4 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = DFL, Price = 40, SellPrice = 13, LevelUnlock = 1, LevelPercent = 1, Lighting = null, Size = 4, Frequency = 2400, Voltage = 1.2, PricePerGB = 10, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(MOTIV8OR_4_GB_2400_MHz);
            Memory MOTIV8OR_8_GB_2400_MHz = new Memory() { Id = 136, Name = "MOTIV8OR 8 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = DFL, Price = 70, SellPrice = 23, LevelUnlock = 1, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 2400, Voltage = 1.2, PricePerGB = 8.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(MOTIV8OR_8_GB_2400_MHz);
            Memory Flare_X_8_GB_2400_MHz = new Memory() { Id = 137, Name = "Flare X 8 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 70, SellPrice = 23, LevelUnlock = 2, LevelPercent = 90, Lighting = null, Size = 8, Frequency = 2400, Voltage = 1.2, PricePerGB = 8.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(Flare_X_8_GB_2400_MHz);
            Memory Flare_X_8_GB_3200_MHz = new Memory() { Id = 138, Name = "Flare X 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 110, SellPrice = 37, LevelUnlock = 7, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Flare_X_8_GB_3200_MHz);
            Memory FORTIS_8_GB_2133_MHz = new Memory() { Id = 139, Name = "FORTIS 8 GB 2133 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 60, SellPrice = 20, LevelUnlock = 2, LevelPercent = 50, Lighting = null, Size = 8, Frequency = 2133, Voltage = 1.2, PricePerGB = 7.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2282 }; memories.Add(FORTIS_8_GB_2133_MHz);
            Memory FORTIS_8_GB_2400_MHz = new Memory() { Id = 140, Name = "FORTIS 8 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 70, SellPrice = 23, LevelUnlock = 2, LevelPercent = 50, Lighting = null, Size = 8, Frequency = 2400, Voltage = 1.2, PricePerGB = 8.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(FORTIS_8_GB_2400_MHz);
            Memory Ripjaws_4__Black__8_GB_2800_MHz = new Memory() { Id = 141, Name = "Ripjaws 4 (Black) 8 GB 2800 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 90, SellPrice = 30, LevelUnlock = 4, LevelPercent = 70, Lighting = null, Size = 8, Frequency = 2800, Voltage = 1.2, PricePerGB = 11.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2996 }; memories.Add(Ripjaws_4__Black__8_GB_2800_MHz);
            Memory Ripjaws_4__Black__8_GB_3200_MHz = new Memory() { Id = 142, Name = "Ripjaws 4 (Black) 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 110, SellPrice = 37, LevelUnlock = 7, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Ripjaws_4__Black__8_GB_3200_MHz);
            Memory Ripjaws_4__Blue__8_GB_3000_MHz = new Memory() { Id = 143, Name = "Ripjaws 4 (Blue) 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 100, SellPrice = 33, LevelUnlock = 7, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 12.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(Ripjaws_4__Blue__8_GB_3000_MHz);
            Memory Ripjaws_4__Red__8_GB_3000_MHz = new Memory() { Id = 144, Name = "Ripjaws 4 (Red) 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 100, SellPrice = 33, LevelUnlock = 7, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 12.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(Ripjaws_4__Red__8_GB_3000_MHz);
            Memory Ripjaws_V__Black__16_GB_3200_MHz = new Memory() { Id = 145, Name = "Ripjaws V (Black) 16 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 210, SellPrice = 70, LevelUnlock = 7, LevelPercent = 40, Lighting = null, Size = 16, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.1, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Ripjaws_V__Black__16_GB_3200_MHz);
            Memory Ripjaws_V__Black__16_GB_3400_MHz = new Memory() { Id = 146, Name = "Ripjaws V (Black) 16 GB 3400 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 222, SellPrice = 74, LevelUnlock = 9, LevelPercent = 1, Lighting = null, Size = 16, Frequency = 3400, Voltage = 1.35, PricePerGB = 13.9, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3638 }; memories.Add(Ripjaws_V__Black__16_GB_3400_MHz);
            Memory Ripjaws_V__Black__8_GB_3200_MHz = new Memory() { Id = 147, Name = "Ripjaws V (Black) 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 110, SellPrice = 37, LevelUnlock = 7, LevelPercent = 40, Lighting = null, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Ripjaws_V__Black__8_GB_3200_MHz);
            Memory Ripjaws_V__Black__8_GB_3600_MHz = new Memory() { Id = 148, Name = "Ripjaws V (Black) 8 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 120, SellPrice = 40, LevelUnlock = 11, LevelPercent = 40, Lighting = null, Size = 8, Frequency = 3600, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Ripjaws_V__Black__8_GB_3600_MHz);
            Memory Ripjaws_V__Red__16_GB_3400_MHz = new Memory() { Id = 149, Name = "Ripjaws V (Red) 16 GB 3400 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 222, SellPrice = 74, LevelUnlock = 9, LevelPercent = 1, Lighting = null, Size = 16, Frequency = 3400, Voltage = 1.35, PricePerGB = 13.9, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3638 }; memories.Add(Ripjaws_V__Red__16_GB_3400_MHz);
            Memory Ripjaws_V__Red__8_GB_3600_MHz = new Memory() { Id = 150, Name = "Ripjaws V (Red) 8 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 120, SellPrice = 40, LevelUnlock = 11, LevelPercent = 40, Lighting = null, Size = 8, Frequency = 3600, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Ripjaws_V__Red__8_GB_3600_MHz);
            Memory Sniper_X__Black__8_GB_3400_MHz = new Memory() { Id = 151, Name = "Sniper X (Black) 8 GB 3400 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 116, SellPrice = 39, LevelUnlock = 9, LevelPercent = 80, Lighting = null, Size = 8, Frequency = 3400, Voltage = 1.35, PricePerGB = 14.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3638 }; memories.Add(Sniper_X__Black__8_GB_3400_MHz);
            Memory Sniper_X__Black__8_GB_3600_MHz = new Memory() { Id = 152, Name = "Sniper X (Black) 8 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 120, SellPrice = 40, LevelUnlock = 11, LevelPercent = 80, Lighting = null, Size = 8, Frequency = 3600, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Sniper_X__Black__8_GB_3600_MHz);
            Memory Sniper_X__Silver__8_GB_3200_MHz = new Memory() { Id = 153, Name = "Sniper X (Silver) 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 110, SellPrice = 37, LevelUnlock = 7, LevelPercent = 80, Lighting = null, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Sniper_X__Silver__8_GB_3200_MHz);
            Memory Sniper_X__Silver__8_GB_3600_MHz = new Memory() { Id = 154, Name = "Sniper X (Silver) 8 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 120, SellPrice = 40, LevelUnlock = 11, LevelPercent = 80, Lighting = null, Size = 8, Frequency = 3600, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Sniper_X__Silver__8_GB_3600_MHz);
            Memory Trident_Z__Black__16_GB_4000_MHz = new Memory() { Id = 155, Name = "Trident Z (Black) 16 GB 4000 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 270, SellPrice = 90, LevelUnlock = 15, LevelPercent = 1, Lighting = null, Size = 16, Frequency = 4000, Voltage = 1.35, PricePerGB = 16.9, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4280 }; memories.Add(Trident_Z__Black__16_GB_4000_MHz);
            Memory Trident_Z__Black__8_GB_4400_MHz = new Memory() { Id = 156, Name = "Trident Z (Black) 8 GB 4400 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 220, SellPrice = 73, LevelUnlock = 25, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 4400, Voltage = 1.4, PricePerGB = 27.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4708 }; memories.Add(Trident_Z__Black__8_GB_4400_MHz);
            Memory Trident_Z__Black__8_GB_4500_MHz = new Memory() { Id = 157, Name = "Trident Z (Black) 8 GB 4500 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 252, SellPrice = 84, LevelUnlock = 27, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 4500, Voltage = 1.45, PricePerGB = 31.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4815 }; memories.Add(Trident_Z__Black__8_GB_4500_MHz);
            Memory Trident_Z__Silver__16_GB_4000_MHz = new Memory() { Id = 158, Name = "Trident Z (Silver) 16 GB 4000 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 270, SellPrice = 90, LevelUnlock = 15, LevelPercent = 1, Lighting = null, Size = 16, Frequency = 4000, Voltage = 1.35, PricePerGB = 16.9, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4280 }; memories.Add(Trident_Z__Silver__16_GB_4000_MHz);
            Memory Trident_Z__Silver__8_GB_4000_MHz = new Memory() { Id = 159, Name = "Trident Z (Silver) 8 GB 4000 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 140, SellPrice = 47, LevelUnlock = 15, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 4000, Voltage = 1.35, PricePerGB = 17.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4280 }; memories.Add(Trident_Z__Silver__8_GB_4000_MHz);
            Memory Trident_Z__Silver__8_GB_4500_MHz = new Memory() { Id = 160, Name = "Trident Z (Silver) 8 GB 4500 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 252, SellPrice = 84, LevelUnlock = 27, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 4500, Voltage = 1.45, PricePerGB = 31.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4815 }; memories.Add(Trident_Z__Silver__8_GB_4500_MHz);
            Memory Trident_Z_Neo_16_GB_3200_MHz = new Memory() { Id = 161, Name = "Trident Z Neo 16 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 220, SellPrice = 73, LevelUnlock = 10, LevelPercent = 40, Lighting = Color.RGB, Size = 16, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Trident_Z_Neo_16_GB_3200_MHz);
            Memory Trident_Z_Neo_32_GB_3200_MHz = new Memory() { Id = 162, Name = "Trident Z Neo 32 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 415, SellPrice = 138, LevelUnlock = 10, LevelPercent = 40, Lighting = Color.RGB, Size = 32, Frequency = 3200, Voltage = 1.35, PricePerGB = 13, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Trident_Z_Neo_32_GB_3200_MHz);
            Memory Trident_Z_Neo_8_GB_3200_MHz = new Memory() { Id = 163, Name = "Trident Z Neo 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 120, SellPrice = 40, LevelUnlock = 10, LevelPercent = 40, Lighting = Color.RGB, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Trident_Z_Neo_8_GB_3200_MHz);
            Memory Trident_Z_RGB_16_GB_3200_MHz = new Memory() { Id = 164, Name = "Trident Z RGB 16 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 220, SellPrice = 73, LevelUnlock = 14, LevelPercent = 60, Lighting = Color.RGB, Size = 16, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Trident_Z_RGB_16_GB_3200_MHz);
            Memory Trident_Z_RGB_16_GB_3866_MHz = new Memory() { Id = 165, Name = "Trident Z RGB 16 GB 3866 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 272, SellPrice = 91, LevelUnlock = 13, LevelPercent = 1, Lighting = Color.RGB, Size = 16, Frequency = 3866, Voltage = 1.35, PricePerGB = 17, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4136 }; memories.Add(Trident_Z_RGB_16_GB_3866_MHz);
            Memory Trident_Z_RGB_8_GB_3000_MHz = new Memory() { Id = 166, Name = "Trident Z RGB 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 110, SellPrice = 37, LevelUnlock = 14, LevelPercent = 60, Lighting = Color.RGB, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(Trident_Z_RGB_8_GB_3000_MHz);
            Memory Trident_Z_RGB_8_GB_3200_MHz = new Memory() { Id = 167, Name = "Trident Z RGB 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 120, SellPrice = 40, LevelUnlock = 14, LevelPercent = 60, Lighting = Color.RGB, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Trident_Z_RGB_8_GB_3200_MHz);
            Memory Trident_Z_RGB_8_GB_3600_MHz = new Memory() { Id = 168, Name = "Trident Z RGB 8 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 130, SellPrice = 43, LevelUnlock = 14, LevelPercent = 60, Lighting = Color.RGB, Size = 8, Frequency = 3600, Voltage = 1.35, PricePerGB = 16.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Trident_Z_RGB_8_GB_3600_MHz);
            Memory Trident_Z_RGB_8_GB_4000_MHz = new Memory() { Id = 169, Name = "Trident Z RGB 8 GB 4000 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 150, SellPrice = 50, LevelUnlock = 15, LevelPercent = 40, Lighting = Color.RGB, Size = 8, Frequency = 4000, Voltage = 1.35, PricePerGB = 18.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4280 }; memories.Add(Trident_Z_RGB_8_GB_4000_MHz);
            Memory Trident_Z_RGB_8_GB_4400_MHz = new Memory() { Id = 170, Name = "Trident Z RGB 8 GB 4400 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 230, SellPrice = 77, LevelUnlock = 25, LevelPercent = 40, Lighting = Color.RGB, Size = 8, Frequency = 4400, Voltage = 1.4, PricePerGB = 28.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4708 }; memories.Add(Trident_Z_RGB_8_GB_4400_MHz);
            Memory Trident_Z_RGB_8_GB_4800_MHz = new Memory() { Id = 171, Name = "Trident Z RGB 8 GB 4800 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 430, SellPrice = 143, LevelUnlock = 30, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 4800, Voltage = 1.5, PricePerGB = 53.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 5136 }; memories.Add(Trident_Z_RGB_8_GB_4800_MHz);
            Memory Trident_Z_Royal__Gold__16_GB_3200_MHz = new Memory() { Id = 172, Name = "Trident Z Royal (Gold) 16 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 220, SellPrice = 73, LevelUnlock = 10, LevelPercent = 60, Lighting = Color.RGB, Size = 16, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Trident_Z_Royal__Gold__16_GB_3200_MHz);
            Memory Trident_Z_Royal__Gold__16_GB_4266_MHz = new Memory() { Id = 173, Name = "Trident Z Royal (Gold) 16 GB 4266 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 360, SellPrice = 120, LevelUnlock = 25, LevelPercent = 10, Lighting = Color.RGB, Size = 16, Frequency = 4266, Voltage = 1.2, PricePerGB = 22.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4564 }; memories.Add(Trident_Z_Royal__Gold__16_GB_4266_MHz);
            Memory Trident_Z_Royal__Gold__32_GB_3200_MHz = new Memory() { Id = 174, Name = "Trident Z Royal (Gold) 32 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 415, SellPrice = 138, LevelUnlock = 10, LevelPercent = 60, Lighting = Color.RGB, Size = 32, Frequency = 3200, Voltage = 1.35, PricePerGB = 13, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Trident_Z_Royal__Gold__32_GB_3200_MHz);
            Memory Trident_Z_Royal__Gold__8_GB_3200_MHz = new Memory() { Id = 175, Name = "Trident Z Royal (Gold) 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 120, SellPrice = 40, LevelUnlock = 10, LevelPercent = 60, Lighting = Color.RGB, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Trident_Z_Royal__Gold__8_GB_3200_MHz);
            Memory Trident_Z_Royal__Silver__16_GB_3200_MHz = new Memory() { Id = 176, Name = "Trident Z Royal (Silver) 16 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 220, SellPrice = 73, LevelUnlock = 10, LevelPercent = 60, Lighting = Color.RGB, Size = 16, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Trident_Z_Royal__Silver__16_GB_3200_MHz);
            Memory Trident_Z_Royal__Silver__16_GB_4266_MHz = new Memory() { Id = 177, Name = "Trident Z Royal (Silver) 16 GB 4266 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 360, SellPrice = 120, LevelUnlock = 25, LevelPercent = 10, Lighting = Color.RGB, Size = 16, Frequency = 4266, Voltage = 1.2, PricePerGB = 22.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4564 }; memories.Add(Trident_Z_Royal__Silver__16_GB_4266_MHz);
            Memory Trident_Z_Royal__Silver__32_GB_3200_MHz = new Memory() { Id = 178, Name = "Trident Z Royal (Silver) 32 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 415, SellPrice = 138, LevelUnlock = 10, LevelPercent = 60, Lighting = Color.RGB, Size = 32, Frequency = 3200, Voltage = 1.35, PricePerGB = 13, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Trident_Z_Royal__Silver__32_GB_3200_MHz);
            Memory Trident_Z_Royal__Silver__8_GB_3200_MHz = new Memory() { Id = 179, Name = "Trident Z Royal (Silver) 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 120, SellPrice = 40, LevelUnlock = 10, LevelPercent = 60, Lighting = Color.RGB, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Trident_Z_Royal__Silver__8_GB_3200_MHz);
            Memory Trident_Z_Royal_Elite_DDR4_Gold_16_GB_3600_MHz = new Memory() { Id = 180, Name = "Trident Z Royal Elite DDR4 Gold 16 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 240, SellPrice = 80, LevelUnlock = 34, LevelPercent = 10, Lighting = Color.RGB, Size = 16, Frequency = 3600, Voltage = 1.2, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Trident_Z_Royal_Elite_DDR4_Gold_16_GB_3600_MHz);
            Memory Trident_Z_Royal_Elite_DDR4_Gold_16_GB_4000_MHz = new Memory() { Id = 181, Name = "Trident Z Royal Elite DDR4 Gold 16 GB 4000 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 280, SellPrice = 93, LevelUnlock = 34, LevelPercent = 10, Lighting = Color.RGB, Size = 16, Frequency = 4000, Voltage = 1.2, PricePerGB = 17.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4280 }; memories.Add(Trident_Z_Royal_Elite_DDR4_Gold_16_GB_4000_MHz);
            Memory Trident_Z_Royal_Elite_DDR4_Gold_16_GB_4266_MHz = new Memory() { Id = 182, Name = "Trident Z Royal Elite DDR4 Gold 16 GB 4266 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 360, SellPrice = 120, LevelUnlock = 34, LevelPercent = 10, Lighting = Color.RGB, Size = 16, Frequency = 4266, Voltage = 1.2, PricePerGB = 22.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4564 }; memories.Add(Trident_Z_Royal_Elite_DDR4_Gold_16_GB_4266_MHz);
            Memory Trident_Z_Royal_Elite_DDR4_Gold_16_GB_4800_MHz = new Memory() { Id = 183, Name = "Trident Z Royal Elite DDR4 Gold 16 GB 4800 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 840, SellPrice = 280, LevelUnlock = 34, LevelPercent = 10, Lighting = Color.RGB, Size = 16, Frequency = 4800, Voltage = 1.2, PricePerGB = 52.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 5136 }; memories.Add(Trident_Z_Royal_Elite_DDR4_Gold_16_GB_4800_MHz);
            Memory Trident_Z_Royal_Elite_DDR4_Gold_32_GB_4266_MHz = new Memory() { Id = 184, Name = "Trident Z Royal Elite DDR4 Gold 32 GB 4266 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 695, SellPrice = 232, LevelUnlock = 34, LevelPercent = 10, Lighting = Color.RGB, Size = 32, Frequency = 4266, Voltage = 1.2, PricePerGB = 21.7, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4564 }; memories.Add(Trident_Z_Royal_Elite_DDR4_Gold_32_GB_4266_MHz);
            Memory Trident_Z_Royal_Elite_DDR4_Gold_8_GB_3600_MHz = new Memory() { Id = 185, Name = "Trident Z Royal Elite DDR4 Gold 8 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 130, SellPrice = 43, LevelUnlock = 34, LevelPercent = 10, Lighting = Color.RGB, Size = 8, Frequency = 3600, Voltage = 1.2, PricePerGB = 16.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Trident_Z_Royal_Elite_DDR4_Gold_8_GB_3600_MHz);
            Memory Trident_Z_Royal_Elite_DDR4_Gold_8_GB_4000_MHz = new Memory() { Id = 186, Name = "Trident Z Royal Elite DDR4 Gold 8 GB 4000 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 150, SellPrice = 50, LevelUnlock = 34, LevelPercent = 10, Lighting = Color.RGB, Size = 8, Frequency = 4000, Voltage = 1.2, PricePerGB = 18.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4280 }; memories.Add(Trident_Z_Royal_Elite_DDR4_Gold_8_GB_4000_MHz);
            Memory Trident_Z_Royal_Elite_DDR4_Silver_16_GB_3600_MHz = new Memory() { Id = 187, Name = "Trident Z Royal Elite DDR4 Silver 16 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 240, SellPrice = 80, LevelUnlock = 34, LevelPercent = 10, Lighting = Color.RGB, Size = 16, Frequency = 3600, Voltage = 1.2, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Trident_Z_Royal_Elite_DDR4_Silver_16_GB_3600_MHz);
            Memory Trident_Z_Royal_Elite_DDR4_Silver_16_GB_4000_MHz = new Memory() { Id = 188, Name = "Trident Z Royal Elite DDR4 Silver 16 GB 4000 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 280, SellPrice = 93, LevelUnlock = 34, LevelPercent = 10, Lighting = Color.RGB, Size = 16, Frequency = 4000, Voltage = 1.2, PricePerGB = 17.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4280 }; memories.Add(Trident_Z_Royal_Elite_DDR4_Silver_16_GB_4000_MHz);
            Memory Trident_Z_Royal_Elite_DDR4_Silver_16_GB_4266_MHz = new Memory() { Id = 189, Name = "Trident Z Royal Elite DDR4 Silver 16 GB 4266 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 360, SellPrice = 120, LevelUnlock = 34, LevelPercent = 10, Lighting = Color.RGB, Size = 16, Frequency = 4266, Voltage = 1.2, PricePerGB = 22.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4564 }; memories.Add(Trident_Z_Royal_Elite_DDR4_Silver_16_GB_4266_MHz);
            Memory Trident_Z_Royal_Elite_DDR4_Silver_16_GB_4800_MHz = new Memory() { Id = 190, Name = "Trident Z Royal Elite DDR4 Silver 16 GB 4800 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 840, SellPrice = 280, LevelUnlock = 34, LevelPercent = 10, Lighting = Color.RGB, Size = 16, Frequency = 4800, Voltage = 1.2, PricePerGB = 52.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 5136 }; memories.Add(Trident_Z_Royal_Elite_DDR4_Silver_16_GB_4800_MHz);
            Memory Trident_Z_Royal_Elite_DDR4_Silver_32_GB_4266_MHz = new Memory() { Id = 191, Name = "Trident Z Royal Elite DDR4 Silver 32 GB 4266 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 695, SellPrice = 232, LevelUnlock = 34, LevelPercent = 10, Lighting = Color.RGB, Size = 32, Frequency = 4266, Voltage = 1.2, PricePerGB = 21.7, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4564 }; memories.Add(Trident_Z_Royal_Elite_DDR4_Silver_32_GB_4266_MHz);
            Memory Trident_Z_Royal_Elite_DDR4_Silver_8_GB_3600_MHz = new Memory() { Id = 192, Name = "Trident Z Royal Elite DDR4 Silver 8 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 130, SellPrice = 43, LevelUnlock = 34, LevelPercent = 10, Lighting = Color.RGB, Size = 8, Frequency = 3600, Voltage = 1.2, PricePerGB = 16.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Trident_Z_Royal_Elite_DDR4_Silver_8_GB_3600_MHz);
            Memory Trident_Z_Royal_Elite_DDR4_Silver_8_GB_4000_MHz = new Memory() { Id = 193, Name = "Trident Z Royal Elite DDR4 Silver 8 GB 4000 MHz", PartType = PartType.Memory, Manufacturer = G_SKILL, Price = 150, SellPrice = 50, LevelUnlock = 34, LevelPercent = 10, Lighting = Color.RGB, Size = 8, Frequency = 4000, Voltage = 1.2, PricePerGB = 18.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4280 }; memories.Add(Trident_Z_Royal_Elite_DDR4_Silver_8_GB_4000_MHz);
            Memory AORUS_RGB_8_GB_3200_MHz = new Memory() { Id = 194, Name = "AORUS RGB 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = GIGABYTE, Price = 120, SellPrice = 40, LevelUnlock = 14, LevelPercent = 90, Lighting = Color.RGB, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(AORUS_RGB_8_GB_3200_MHz);
            Memory Memory_8_GB_2666_MHz = new Memory() { Id = 195, Name = "Memory 8 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = GIGABYTE, Price = 80, SellPrice = 27, LevelUnlock = 14, LevelPercent = 50, Lighting = null, Size = 8, Frequency = 2666, Voltage = 1.35, PricePerGB = 10, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(Memory_8_GB_2666_MHz);
            Memory Fury_DDR4_RGB_16_GB_2400_MHz = new Memory() { Id = 196, Name = "Fury DDR4 RGB 16 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = HyperX, Price = 140, SellPrice = 47, LevelUnlock = 12, LevelPercent = 33, Lighting = Color.RGB, Size = 16, Frequency = 2400, Voltage = 1.2, PricePerGB = 8.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(Fury_DDR4_RGB_16_GB_2400_MHz);
            Memory Fury_DDR4_RGB_16_GB_2666_MHz = new Memory() { Id = 197, Name = "Fury DDR4 RGB 16 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = HyperX, Price = 160, SellPrice = 53, LevelUnlock = 12, LevelPercent = 33, Lighting = Color.RGB, Size = 16, Frequency = 2666, Voltage = 1.2, PricePerGB = 10, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(Fury_DDR4_RGB_16_GB_2666_MHz);
            Memory Fury_DDR4_RGB_16_GB_3000_MHz = new Memory() { Id = 198, Name = "Fury DDR4 RGB 16 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = HyperX, Price = 200, SellPrice = 67, LevelUnlock = 12, LevelPercent = 33, Lighting = Color.RGB, Size = 16, Frequency = 3000, Voltage = 1.2, PricePerGB = 12.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(Fury_DDR4_RGB_16_GB_3000_MHz);
            Memory Fury_DDR4_RGB_16_GB_3200_MHz = new Memory() { Id = 199, Name = "Fury DDR4 RGB 16 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = HyperX, Price = 220, SellPrice = 73, LevelUnlock = 12, LevelPercent = 33, Lighting = Color.RGB, Size = 16, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Fury_DDR4_RGB_16_GB_3200_MHz);
            Memory Fury_DDR4_RGB_16_GB_3466_MHz = new Memory() { Id = 200, Name = "Fury DDR4 RGB 16 GB 3466 MHz", PartType = PartType.Memory, Manufacturer = HyperX, Price = 236, SellPrice = 79, LevelUnlock = 12, LevelPercent = 33, Lighting = Color.RGB, Size = 16, Frequency = 3466, Voltage = 1.35, PricePerGB = 14.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3708 }; memories.Add(Fury_DDR4_RGB_16_GB_3466_MHz);
            Memory Fury_DDR4_RGB_16_GB_3600_MHz = new Memory() { Id = 201, Name = "Fury DDR4 RGB 16 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = HyperX, Price = 240, SellPrice = 80, LevelUnlock = 12, LevelPercent = 33, Lighting = Color.RGB, Size = 16, Frequency = 3600, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Fury_DDR4_RGB_16_GB_3600_MHz);
            Memory Fury_DDR4_RGB_16_GB_3733_MHz = new Memory() { Id = 202, Name = "Fury DDR4 RGB 16 GB 3733 MHz", PartType = PartType.Memory, Manufacturer = HyperX, Price = 260, SellPrice = 87, LevelUnlock = 12, LevelPercent = 33, Lighting = Color.RGB, Size = 16, Frequency = 3733, Voltage = 1.35, PricePerGB = 16.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3994 }; memories.Add(Fury_DDR4_RGB_16_GB_3733_MHz);
            Memory Fury_DDR4_RGB_32_GB_2400_MHz = new Memory() { Id = 203, Name = "Fury DDR4 RGB 32 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = HyperX, Price = 255, SellPrice = 85, LevelUnlock = 12, LevelPercent = 33, Lighting = Color.RGB, Size = 32, Frequency = 2400, Voltage = 1.2, PricePerGB = 8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(Fury_DDR4_RGB_32_GB_2400_MHz);
            Memory Fury_DDR4_RGB_32_GB_2666_MHz = new Memory() { Id = 204, Name = "Fury DDR4 RGB 32 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = HyperX, Price = 295, SellPrice = 98, LevelUnlock = 12, LevelPercent = 33, Lighting = Color.RGB, Size = 32, Frequency = 2666, Voltage = 1.2, PricePerGB = 9.2, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(Fury_DDR4_RGB_32_GB_2666_MHz);
            Memory Fury_DDR4_RGB_32_GB_3000_MHz = new Memory() { Id = 205, Name = "Fury DDR4 RGB 32 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = HyperX, Price = 375, SellPrice = 125, LevelUnlock = 12, LevelPercent = 33, Lighting = Color.RGB, Size = 32, Frequency = 3000, Voltage = 1.2, PricePerGB = 11.7, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(Fury_DDR4_RGB_32_GB_3000_MHz);
            Memory Fury_DDR4_RGB_32_GB_3200_MHz = new Memory() { Id = 206, Name = "Fury DDR4 RGB 32 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = HyperX, Price = 415, SellPrice = 138, LevelUnlock = 12, LevelPercent = 33, Lighting = Color.RGB, Size = 32, Frequency = 3200, Voltage = 1.35, PricePerGB = 13, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Fury_DDR4_RGB_32_GB_3200_MHz);
            Memory Fury_DDR4_RGB_32_GB_3466_MHz = new Memory() { Id = 207, Name = "Fury DDR4 RGB 32 GB 3466 MHz", PartType = PartType.Memory, Manufacturer = HyperX, Price = 447, SellPrice = 149, LevelUnlock = 12, LevelPercent = 33, Lighting = Color.RGB, Size = 32, Frequency = 3466, Voltage = 1.35, PricePerGB = 14, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3708 }; memories.Add(Fury_DDR4_RGB_32_GB_3466_MHz);
            Memory Fury_DDR4_RGB_32_GB_3600_MHz = new Memory() { Id = 208, Name = "Fury DDR4 RGB 32 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = HyperX, Price = 455, SellPrice = 152, LevelUnlock = 12, LevelPercent = 33, Lighting = Color.RGB, Size = 32, Frequency = 3600, Voltage = 1.35, PricePerGB = 14.2, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Fury_DDR4_RGB_32_GB_3600_MHz);
            Memory Fury_DDR4_RGB_8_GB_2400_MHz = new Memory() { Id = 209, Name = "Fury DDR4 RGB 8 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = HyperX, Price = 80, SellPrice = 27, LevelUnlock = 12, LevelPercent = 33, Lighting = Color.RGB, Size = 8, Frequency = 2400, Voltage = 1.2, PricePerGB = 10, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(Fury_DDR4_RGB_8_GB_2400_MHz);
            Memory Fury_DDR4_RGB_8_GB_2666_MHz = new Memory() { Id = 210, Name = "Fury DDR4 RGB 8 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = HyperX, Price = 90, SellPrice = 30, LevelUnlock = 12, LevelPercent = 33, Lighting = Color.RGB, Size = 8, Frequency = 2666, Voltage = 1.2, PricePerGB = 11.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(Fury_DDR4_RGB_8_GB_2666_MHz);
            Memory Fury_DDR4_RGB_8_GB_3000_MHz = new Memory() { Id = 211, Name = "Fury DDR4 RGB 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = HyperX, Price = 110, SellPrice = 37, LevelUnlock = 12, LevelPercent = 33, Lighting = Color.RGB, Size = 8, Frequency = 3000, Voltage = 1.2, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(Fury_DDR4_RGB_8_GB_3000_MHz);
            Memory Fury_DDR4_RGB_8_GB_3200_MHz = new Memory() { Id = 212, Name = "Fury DDR4 RGB 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = HyperX, Price = 120, SellPrice = 40, LevelUnlock = 12, LevelPercent = 33, Lighting = Color.RGB, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Fury_DDR4_RGB_8_GB_3200_MHz);
            Memory Fury_DDR4_RGB_8_GB_3466_MHz = new Memory() { Id = 213, Name = "Fury DDR4 RGB 8 GB 3466 MHz", PartType = PartType.Memory, Manufacturer = HyperX, Price = 128, SellPrice = 43, LevelUnlock = 12, LevelPercent = 33, Lighting = Color.RGB, Size = 8, Frequency = 3466, Voltage = 1.35, PricePerGB = 16, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3708 }; memories.Add(Fury_DDR4_RGB_8_GB_3466_MHz);
            Memory Fury_DDR4_RGB_8_GB_3600_MHz = new Memory() { Id = 214, Name = "Fury DDR4 RGB 8 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = HyperX, Price = 130, SellPrice = 43, LevelUnlock = 12, LevelPercent = 33, Lighting = Color.RGB, Size = 8, Frequency = 3600, Voltage = 1.35, PricePerGB = 16.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Fury_DDR4_RGB_8_GB_3600_MHz);
            Memory Fury_DDR4_RGB_8_GB_3733_MHz = new Memory() { Id = 215, Name = "Fury DDR4 RGB 8 GB 3733 MHz", PartType = PartType.Memory, Manufacturer = HyperX, Price = 140, SellPrice = 47, LevelUnlock = 12, LevelPercent = 33, Lighting = Color.RGB, Size = 8, Frequency = 3733, Voltage = 1.35, PricePerGB = 17.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3994 }; memories.Add(Fury_DDR4_RGB_8_GB_3733_MHz);
            Memory Predator_DDR4_16_GB_3000_MHz = new Memory() { Id = 216, Name = "Predator DDR4 16 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = HyperX, Price = 200, SellPrice = 67, LevelUnlock = 15, LevelPercent = 65, Lighting = Color.RGB, Size = 16, Frequency = 3000, Voltage = 1.35, PricePerGB = 12.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(Predator_DDR4_16_GB_3000_MHz);
            Memory Predator_DDR4_16_GB_3200_MHz = new Memory() { Id = 217, Name = "Predator DDR4 16 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = HyperX, Price = 220, SellPrice = 73, LevelUnlock = 15, LevelPercent = 65, Lighting = Color.RGB, Size = 16, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Predator_DDR4_16_GB_3200_MHz);
            Memory Predator_DDR4_8_GB_2933_MHz = new Memory() { Id = 218, Name = "Predator DDR4 8 GB 2933 MHz", PartType = PartType.Memory, Manufacturer = HyperX, Price = 106, SellPrice = 35, LevelUnlock = 15, LevelPercent = 65, Lighting = Color.RGB, Size = 8, Frequency = 2933, Voltage = 1.35, PricePerGB = 13.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3138 }; memories.Add(Predator_DDR4_8_GB_2933_MHz);
            Memory Predator_DDR4_8_GB_3000_MHz = new Memory() { Id = 219, Name = "Predator DDR4 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = HyperX, Price = 110, SellPrice = 37, LevelUnlock = 15, LevelPercent = 65, Lighting = Color.RGB, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(Predator_DDR4_8_GB_3000_MHz);
            Memory Predator_DDR4_8_GB_3200_MHz = new Memory() { Id = 220, Name = "Predator DDR4 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = HyperX, Price = 120, SellPrice = 40, LevelUnlock = 15, LevelPercent = 65, Lighting = Color.RGB, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Predator_DDR4_8_GB_3200_MHz);
            Memory Predator_DDR4_8_GB_3600_MHz = new Memory() { Id = 221, Name = "Predator DDR4 8 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = HyperX, Price = 130, SellPrice = 43, LevelUnlock = 15, LevelPercent = 65, Lighting = Color.RGB, Size = 8, Frequency = 3600, Voltage = 1.35, PricePerGB = 16.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Predator_DDR4_8_GB_3600_MHz);
            Memory Predator_DDR4_8_GB_4000_MHz = new Memory() { Id = 222, Name = "Predator DDR4 8 GB 4000 MHz", PartType = PartType.Memory, Manufacturer = HyperX, Price = 150, SellPrice = 50, LevelUnlock = 15, LevelPercent = 65, Lighting = Color.RGB, Size = 8, Frequency = 4000, Voltage = 1.35, PricePerGB = 18.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4280 }; memories.Add(Predator_DDR4_8_GB_4000_MHz);
            Memory Value_Supreme_2_GB_2133_MHz = new Memory() { Id = 223, Name = "Value Supreme 2 GB 2133 MHz", PartType = PartType.Memory, Manufacturer = Mortoni, Price = 20, SellPrice = 7, LevelUnlock = 1, LevelPercent = 1, Lighting = null, Size = 2, Frequency = 2133, Voltage = 1.3, PricePerGB = 10, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2282 }; memories.Add(Value_Supreme_2_GB_2133_MHz);
            Memory Value_Supreme_4_GB_2133_MHz = new Memory() { Id = 224, Name = "Value Supreme 4 GB 2133 MHz", PartType = PartType.Memory, Manufacturer = Mortoni, Price = 35, SellPrice = 12, LevelUnlock = 1, LevelPercent = 1, Lighting = null, Size = 4, Frequency = 2133, Voltage = 1.3, PricePerGB = 8.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2282 }; memories.Add(Value_Supreme_4_GB_2133_MHz);
            Memory Viper_LED__Red_LED__4_GB_3000_MHz = new Memory() { Id = 225, Name = "Viper LED (Red LED) 4 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 60, SellPrice = 20, LevelUnlock = 21, LevelPercent = 20, Lighting = Color.Red, Size = 4, Frequency = 3000, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(Viper_LED__Red_LED__4_GB_3000_MHz);
            Memory Viper_LED__Red_LED__8_GB_2400_MHz = new Memory() { Id = 226, Name = "Viper LED (Red LED) 8 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 75, SellPrice = 25, LevelUnlock = 21, LevelPercent = 1, Lighting = Color.Red, Size = 8, Frequency = 2400, Voltage = 1.2, PricePerGB = 9.4, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(Viper_LED__Red_LED__8_GB_2400_MHz);
            Memory Viper_LED__Red_LED__8_GB_2666_MHz = new Memory() { Id = 227, Name = "Viper LED (Red LED) 8 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 85, SellPrice = 28, LevelUnlock = 21, LevelPercent = 1, Lighting = Color.Red, Size = 8, Frequency = 2666, Voltage = 1.2, PricePerGB = 10.6, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(Viper_LED__Red_LED__8_GB_2666_MHz);
            Memory Viper_LED__Red_LED__8_GB_3000_MHz = new Memory() { Id = 228, Name = "Viper LED (Red LED) 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 105, SellPrice = 35, LevelUnlock = 21, LevelPercent = 20, Lighting = Color.Red, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 13.1, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(Viper_LED__Red_LED__8_GB_3000_MHz);
            Memory Viper_LED__White_LED__8_GB_2400_MHz = new Memory() { Id = 229, Name = "Viper LED (White LED) 8 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 75, SellPrice = 25, LevelUnlock = 21, LevelPercent = 1, Lighting = Color.White, Size = 8, Frequency = 2400, Voltage = 1.2, PricePerGB = 9.4, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(Viper_LED__White_LED__8_GB_2400_MHz);
            Memory Viper_LED__White_LED__8_GB_3200_MHz = new Memory() { Id = 230, Name = "Viper LED (White LED) 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 115, SellPrice = 38, LevelUnlock = 21, LevelPercent = 40, Lighting = Color.White, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 14.4, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Viper_LED__White_LED__8_GB_3200_MHz);
            Memory Viper_LED__White_LED__8_GB_3600_MHz = new Memory() { Id = 231, Name = "Viper LED (White LED) 8 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 125, SellPrice = 42, LevelUnlock = 21, LevelPercent = 1, Lighting = Color.White, Size = 8, Frequency = 3600, Voltage = 1.35, PricePerGB = 15.6, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Viper_LED__White_LED__8_GB_3600_MHz);
            Memory Viper_RGB__Black__8_GB_2666_MHz = new Memory() { Id = 232, Name = "Viper RGB (Black) 8 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 90, SellPrice = 30, LevelUnlock = 21, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 2666, Voltage = 1.2, PricePerGB = 11.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(Viper_RGB__Black__8_GB_2666_MHz);
            Memory Viper_RGB__Black__8_GB_3000_MHz = new Memory() { Id = 233, Name = "Viper RGB (Black) 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 110, SellPrice = 37, LevelUnlock = 21, LevelPercent = 20, Lighting = Color.RGB, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(Viper_RGB__Black__8_GB_3000_MHz);
            Memory Viper_RGB__Black__8_GB_3200_MHz = new Memory() { Id = 234, Name = "Viper RGB (Black) 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 120, SellPrice = 40, LevelUnlock = 21, LevelPercent = 40, Lighting = Color.RGB, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Viper_RGB__Black__8_GB_3200_MHz);
            Memory Viper_RGB__Black__8_GB_3600_MHz = new Memory() { Id = 235, Name = "Viper RGB (Black) 8 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 130, SellPrice = 43, LevelUnlock = 21, LevelPercent = 60, Lighting = Color.RGB, Size = 8, Frequency = 3600, Voltage = 1.35, PricePerGB = 16.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Viper_RGB__Black__8_GB_3600_MHz);
            Memory Viper_RGB__Black__8_GB_4133_MHz = new Memory() { Id = 236, Name = "Viper RGB (Black) 8 GB 4133 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 170, SellPrice = 57, LevelUnlock = 21, LevelPercent = 80, Lighting = Color.RGB, Size = 8, Frequency = 4133, Voltage = 1.4, PricePerGB = 21.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4422 }; memories.Add(Viper_RGB__Black__8_GB_4133_MHz);
            Memory Viper_RGB__White__8_GB_2666_MHz = new Memory() { Id = 237, Name = "Viper RGB (White) 8 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 90, SellPrice = 30, LevelUnlock = 21, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 2666, Voltage = 1.2, PricePerGB = 11.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(Viper_RGB__White__8_GB_2666_MHz);
            Memory Viper_RGB__White__8_GB_3000_MHz = new Memory() { Id = 238, Name = "Viper RGB (White) 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 110, SellPrice = 37, LevelUnlock = 21, LevelPercent = 20, Lighting = Color.RGB, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(Viper_RGB__White__8_GB_3000_MHz);
            Memory Viper_RGB__White__8_GB_3200_MHz = new Memory() { Id = 239, Name = "Viper RGB (White) 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 120, SellPrice = 40, LevelUnlock = 21, LevelPercent = 40, Lighting = Color.RGB, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Viper_RGB__White__8_GB_3200_MHz);
            Memory Viper_Steel_RGB_16_GB_3200_MHz = new Memory() { Id = 240, Name = "Viper Steel RGB 16 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 220, SellPrice = 73, LevelUnlock = 32, LevelPercent = 1, Lighting = Color.RGB, Size = 16, Frequency = 3200, Voltage = 1.45, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Viper_Steel_RGB_16_GB_3200_MHz);
            Memory Viper_Steel_RGB_16_GB_3600_MHz = new Memory() { Id = 241, Name = "Viper Steel RGB 16 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 240, SellPrice = 80, LevelUnlock = 32, LevelPercent = 1, Lighting = Color.RGB, Size = 16, Frequency = 3600, Voltage = 1.45, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Viper_Steel_RGB_16_GB_3600_MHz);
            Memory Viper_Steel_RGB_32_GB_3200_MHz = new Memory() { Id = 242, Name = "Viper Steel RGB 32 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 415, SellPrice = 138, LevelUnlock = 32, LevelPercent = 1, Lighting = Color.RGB, Size = 32, Frequency = 3200, Voltage = 1.45, PricePerGB = 13, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Viper_Steel_RGB_32_GB_3200_MHz);
            Memory Viper_Steel_RGB_32_GB_3600_MHz = new Memory() { Id = 243, Name = "Viper Steel RGB 32 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 455, SellPrice = 152, LevelUnlock = 32, LevelPercent = 1, Lighting = Color.RGB, Size = 32, Frequency = 3600, Voltage = 1.45, PricePerGB = 14.2, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Viper_Steel_RGB_32_GB_3600_MHz);
            Memory Viper_Steel_RGB_8_GB_3200_MHz = new Memory() { Id = 244, Name = "Viper Steel RGB 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 120, SellPrice = 40, LevelUnlock = 32, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 3200, Voltage = 1.45, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Viper_Steel_RGB_8_GB_3200_MHz);
            Memory Viper_Steel_RGB_8_GB_3600_MHz = new Memory() { Id = 245, Name = "Viper Steel RGB 8 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 130, SellPrice = 43, LevelUnlock = 32, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 3600, Voltage = 1.45, PricePerGB = 16.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Viper_Steel_RGB_8_GB_3600_MHz);
            Memory Viper_Steel_Series_16_GB_3000_MHz = new Memory() { Id = 246, Name = "Viper Steel Series 16 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 190, SellPrice = 63, LevelUnlock = 26, LevelPercent = 70, Lighting = null, Size = 16, Frequency = 3000, Voltage = 1.35, PricePerGB = 11.9, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(Viper_Steel_Series_16_GB_3000_MHz);
            Memory Viper_Steel_Series_16_GB_3200_MHz = new Memory() { Id = 247, Name = "Viper Steel Series 16 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 210, SellPrice = 70, LevelUnlock = 26, LevelPercent = 70, Lighting = null, Size = 16, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.1, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Viper_Steel_Series_16_GB_3200_MHz);
            Memory Viper_Steel_Series_4_GB_3200_MHz = new Memory() { Id = 248, Name = "Viper Steel Series 4 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 60, SellPrice = 20, LevelUnlock = 26, LevelPercent = 70, Lighting = null, Size = 4, Frequency = 3200, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Viper_Steel_Series_4_GB_3200_MHz);
            Memory Viper_Steel_Series_8_GB_3000_MHz = new Memory() { Id = 249, Name = "Viper Steel Series 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 100, SellPrice = 33, LevelUnlock = 26, LevelPercent = 70, Lighting = null, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 12.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(Viper_Steel_Series_8_GB_3000_MHz);
            Memory Viper_Steel_Series_8_GB_3200_MHz = new Memory() { Id = 250, Name = "Viper Steel Series 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 110, SellPrice = 37, LevelUnlock = 26, LevelPercent = 70, Lighting = null, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(Viper_Steel_Series_8_GB_3200_MHz);
            Memory Viper_Steel_Series_8_GB_3400_MHz = new Memory() { Id = 251, Name = "Viper Steel Series 8 GB 3400 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 116, SellPrice = 39, LevelUnlock = 26, LevelPercent = 70, Lighting = null, Size = 8, Frequency = 3400, Voltage = 1.35, PricePerGB = 14.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3638 }; memories.Add(Viper_Steel_Series_8_GB_3400_MHz);
            Memory Viper_Steel_Series_8_GB_3600_MHz = new Memory() { Id = 252, Name = "Viper Steel Series 8 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 120, SellPrice = 40, LevelUnlock = 26, LevelPercent = 70, Lighting = null, Size = 8, Frequency = 3600, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(Viper_Steel_Series_8_GB_3600_MHz);
            Memory Viper_Steel_Series_8_GB_3733_MHz = new Memory() { Id = 253, Name = "Viper Steel Series 8 GB 3733 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 130, SellPrice = 43, LevelUnlock = 26, LevelPercent = 70, Lighting = null, Size = 8, Frequency = 3733, Voltage = 1.35, PricePerGB = 16.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3994 }; memories.Add(Viper_Steel_Series_8_GB_3733_MHz);
            Memory Viper_Steel_Series_8_GB_3866_MHz = new Memory() { Id = 254, Name = "Viper Steel Series 8 GB 3866 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 136, SellPrice = 45, LevelUnlock = 26, LevelPercent = 70, Lighting = null, Size = 8, Frequency = 3866, Voltage = 1.35, PricePerGB = 17, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4136 }; memories.Add(Viper_Steel_Series_8_GB_3866_MHz);
            Memory Viper_Steel_Series_8_GB_4000_MHz = new Memory() { Id = 255, Name = "Viper Steel Series 8 GB 4000 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 140, SellPrice = 47, LevelUnlock = 26, LevelPercent = 70, Lighting = null, Size = 8, Frequency = 4000, Voltage = 1.35, PricePerGB = 17.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4280 }; memories.Add(Viper_Steel_Series_8_GB_4000_MHz);
            Memory Viper_Steel_Series_8_GB_4133_MHz = new Memory() { Id = 256, Name = "Viper Steel Series 8 GB 4133 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 160, SellPrice = 53, LevelUnlock = 26, LevelPercent = 70, Lighting = null, Size = 8, Frequency = 4133, Voltage = 1.35, PricePerGB = 20, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4422 }; memories.Add(Viper_Steel_Series_8_GB_4133_MHz);
            Memory Viper_Steel_Series_8_GB_4400_MHz = new Memory() { Id = 257, Name = "Viper Steel Series 8 GB 4400 MHz", PartType = PartType.Memory, Manufacturer = Patriot, Price = 220, SellPrice = 73, LevelUnlock = 26, LevelPercent = 70, Lighting = null, Size = 8, Frequency = 4400, Voltage = 1.45, PricePerGB = 27.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4708 }; memories.Add(Viper_Steel_Series_8_GB_4400_MHz);
            Memory TITAN_2_GB_2133_MHz = new Memory() { Id = 258, Name = "TITAN 2 GB 2133 MHz", PartType = PartType.Memory, Manufacturer = Shean, Price = 20, SellPrice = 7, LevelUnlock = 1, LevelPercent = 1, Lighting = null, Size = 2, Frequency = 2133, Voltage = 1.2, PricePerGB = 10, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2282 }; memories.Add(TITAN_2_GB_2133_MHz);
            Memory TITAN_4_GB_2133_MHz = new Memory() { Id = 259, Name = "TITAN 4 GB 2133 MHz", PartType = PartType.Memory, Manufacturer = Shean, Price = 35, SellPrice = 12, LevelUnlock = 1, LevelPercent = 1, Lighting = null, Size = 4, Frequency = 2133, Voltage = 1.2, PricePerGB = 8.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2282 }; memories.Add(TITAN_4_GB_2133_MHz);
            Memory TITAN_XL_8_GB_2133_MHz = new Memory() { Id = 260, Name = "TITAN XL 8 GB 2133 MHz", PartType = PartType.Memory, Manufacturer = Shean, Price = 60, SellPrice = 20, LevelUnlock = 1, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 2133, Voltage = 1.2, PricePerGB = 7.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2282 }; memories.Add(TITAN_XL_8_GB_2133_MHz);
            Memory DARK_PRO_DDR4__Red__4_GB_3000_MHz = new Memory() { Id = 261, Name = "DARK PRO DDR4 (Red) 4 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 55, SellPrice = 18, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Size = 4, Frequency = 3000, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(DARK_PRO_DDR4__Red__4_GB_3000_MHz);
            Memory DARK_PRO_DDR4__Red__4_GB_3200_MHz = new Memory() { Id = 262, Name = "DARK PRO DDR4 (Red) 4 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 60, SellPrice = 20, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Size = 4, Frequency = 3200, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(DARK_PRO_DDR4__Red__4_GB_3200_MHz);
            Memory DARK_PRO_DDR4__Red__4_GB_3333_MHz = new Memory() { Id = 263, Name = "DARK PRO DDR4 (Red) 4 GB 3333 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 62, SellPrice = 21, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Size = 4, Frequency = 3333, Voltage = 1.35, PricePerGB = 15.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3566 }; memories.Add(DARK_PRO_DDR4__Red__4_GB_3333_MHz);
            Memory DARK_PRO_DDR4__Red__8_GB_3000_MHz = new Memory() { Id = 264, Name = "DARK PRO DDR4 (Red) 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 100, SellPrice = 33, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 12.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(DARK_PRO_DDR4__Red__8_GB_3000_MHz);
            Memory DARK_PRO_DDR4__Red__8_GB_3200_MHz = new Memory() { Id = 265, Name = "DARK PRO DDR4 (Red) 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 110, SellPrice = 37, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(DARK_PRO_DDR4__Red__8_GB_3200_MHz);
            Memory DARK_PRO_DDR4__Red__8_GB_3333_MHz = new Memory() { Id = 266, Name = "DARK PRO DDR4 (Red) 8 GB 3333 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 114, SellPrice = 38, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 3333, Voltage = 1.35, PricePerGB = 14.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3566 }; memories.Add(DARK_PRO_DDR4__Red__8_GB_3333_MHz);
            Memory DARK_PRO_DDR4__Red__8_GB_3466_MHz = new Memory() { Id = 267, Name = "DARK PRO DDR4 (Red) 8 GB 3466 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 118, SellPrice = 39, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 3466, Voltage = 1.35, PricePerGB = 14.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3708 }; memories.Add(DARK_PRO_DDR4__Red__8_GB_3466_MHz);
            Memory DARK_PRO_DDR4_4_GB_3000_MHz = new Memory() { Id = 268, Name = "DARK PRO DDR4 4 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 55, SellPrice = 18, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Size = 4, Frequency = 3000, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(DARK_PRO_DDR4_4_GB_3000_MHz);
            Memory DARK_PRO_DDR4_4_GB_3200_MHz = new Memory() { Id = 269, Name = "DARK PRO DDR4 4 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 60, SellPrice = 20, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Size = 4, Frequency = 3200, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(DARK_PRO_DDR4_4_GB_3200_MHz);
            Memory DARK_PRO_DDR4_4_GB_3333_MHz = new Memory() { Id = 270, Name = "DARK PRO DDR4 4 GB 3333 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 62, SellPrice = 21, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Size = 4, Frequency = 3333, Voltage = 1.35, PricePerGB = 15.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3566 }; memories.Add(DARK_PRO_DDR4_4_GB_3333_MHz);
            Memory DARK_PRO_DDR4_8_GB_3000_MHz = new Memory() { Id = 271, Name = "DARK PRO DDR4 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 100, SellPrice = 33, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 12.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(DARK_PRO_DDR4_8_GB_3000_MHz);
            Memory DARK_PRO_DDR4_8_GB_3200_MHz = new Memory() { Id = 272, Name = "DARK PRO DDR4 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 110, SellPrice = 37, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(DARK_PRO_DDR4_8_GB_3200_MHz);
            Memory DARK_PRO_DDR4_8_GB_3333_MHz = new Memory() { Id = 273, Name = "DARK PRO DDR4 8 GB 3333 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 114, SellPrice = 38, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 3333, Voltage = 1.35, PricePerGB = 14.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3566 }; memories.Add(DARK_PRO_DDR4_8_GB_3333_MHz);
            Memory DARK_PRO_DDR4_8_GB_3466_MHz = new Memory() { Id = 274, Name = "DARK PRO DDR4 8 GB 3466 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 118, SellPrice = 39, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 3466, Voltage = 1.35, PricePerGB = 14.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3708 }; memories.Add(DARK_PRO_DDR4_8_GB_3466_MHz);
            Memory T_Force_DARK__Red__16_GB_2400_MHz = new Memory() { Id = 275, Name = "T-Force DARK (Red) 16 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 130, SellPrice = 43, LevelUnlock = 2, LevelPercent = 1, Lighting = null, Size = 16, Frequency = 2400, Voltage = 1.2, PricePerGB = 8.1, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(T_Force_DARK__Red__16_GB_2400_MHz);
            Memory T_Force_DARK__Red__16_GB_3000_MHz = new Memory() { Id = 276, Name = "T-Force DARK (Red) 16 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 190, SellPrice = 63, LevelUnlock = 6, LevelPercent = 50, Lighting = null, Size = 16, Frequency = 3000, Voltage = 1.35, PricePerGB = 11.9, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(T_Force_DARK__Red__16_GB_3000_MHz);
            Memory T_Force_DARK__Red__4_GB_2400_MHz = new Memory() { Id = 277, Name = "T-Force DARK (Red) 4 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 40, SellPrice = 13, LevelUnlock = 2, LevelPercent = 1, Lighting = null, Size = 4, Frequency = 2400, Voltage = 1.2, PricePerGB = 10, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(T_Force_DARK__Red__4_GB_2400_MHz);
            Memory T_Force_DARK__Red__4_GB_2666_MHz = new Memory() { Id = 278, Name = "T-Force DARK (Red) 4 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 45, SellPrice = 15, LevelUnlock = 2, LevelPercent = 1, Lighting = null, Size = 4, Frequency = 2666, Voltage = 1.2, PricePerGB = 11.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(T_Force_DARK__Red__4_GB_2666_MHz);
            Memory T_Force_DARK__Red__4_GB_2800_MHz = new Memory() { Id = 279, Name = "T-Force DARK (Red) 4 GB 2800 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 50, SellPrice = 17, LevelUnlock = 4, LevelPercent = 1, Lighting = null, Size = 4, Frequency = 2800, Voltage = 1.2, PricePerGB = 12.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2996 }; memories.Add(T_Force_DARK__Red__4_GB_2800_MHz);
            Memory T_Force_DARK__Red__8_GB_2400_MHz = new Memory() { Id = 280, Name = "T-Force DARK (Red) 8 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 70, SellPrice = 23, LevelUnlock = 2, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 2400, Voltage = 1.2, PricePerGB = 8.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(T_Force_DARK__Red__8_GB_2400_MHz);
            Memory T_Force_DARK__Red__8_GB_2666_MHz = new Memory() { Id = 281, Name = "T-Force DARK (Red) 8 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 80, SellPrice = 27, LevelUnlock = 2, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 2666, Voltage = 1.2, PricePerGB = 10, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(T_Force_DARK__Red__8_GB_2666_MHz);
            Memory T_Force_DARK__Red__8_GB_3000_MHz = new Memory() { Id = 282, Name = "T-Force DARK (Red) 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 100, SellPrice = 33, LevelUnlock = 6, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 12.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(T_Force_DARK__Red__8_GB_3000_MHz);
            Memory T_Force_DARK__Silver__16_GB_2666_MHz = new Memory() { Id = 283, Name = "T-Force DARK (Silver) 16 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 150, SellPrice = 50, LevelUnlock = 2, LevelPercent = 50, Lighting = null, Size = 16, Frequency = 2666, Voltage = 1.2, PricePerGB = 9.4, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(T_Force_DARK__Silver__16_GB_2666_MHz);
            Memory T_Force_DARK__Silver__16_GB_2800_MHz = new Memory() { Id = 284, Name = "T-Force DARK (Silver) 16 GB 2800 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 170, SellPrice = 57, LevelUnlock = 4, LevelPercent = 50, Lighting = null, Size = 16, Frequency = 2800, Voltage = 1.2, PricePerGB = 10.6, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2996 }; memories.Add(T_Force_DARK__Silver__16_GB_2800_MHz);
            Memory T_Force_DARK__Silver__16_GB_3000_MHz = new Memory() { Id = 285, Name = "T-Force DARK (Silver) 16 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 190, SellPrice = 63, LevelUnlock = 6, LevelPercent = 50, Lighting = null, Size = 16, Frequency = 3000, Voltage = 1.35, PricePerGB = 11.9, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(T_Force_DARK__Silver__16_GB_3000_MHz);
            Memory T_Force_DARK__Silver__4_GB_2400_MHz = new Memory() { Id = 286, Name = "T-Force DARK (Silver) 4 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 40, SellPrice = 13, LevelUnlock = 2, LevelPercent = 1, Lighting = null, Size = 4, Frequency = 2400, Voltage = 1.2, PricePerGB = 10, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(T_Force_DARK__Silver__4_GB_2400_MHz);
            Memory T_Force_DARK__Silver__4_GB_3000_MHz = new Memory() { Id = 287, Name = "T-Force DARK (Silver) 4 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 55, SellPrice = 18, LevelUnlock = 6, LevelPercent = 1, Lighting = null, Size = 4, Frequency = 3000, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(T_Force_DARK__Silver__4_GB_3000_MHz);
            Memory T_Force_DARK__Silver__8_GB_2400_MHz = new Memory() { Id = 288, Name = "T-Force DARK (Silver) 8 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 70, SellPrice = 23, LevelUnlock = 2, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 2400, Voltage = 1.2, PricePerGB = 8.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(T_Force_DARK__Silver__8_GB_2400_MHz);
            Memory T_Force_DARK__Silver__8_GB_2666_MHz = new Memory() { Id = 289, Name = "T-Force DARK (Silver) 8 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 80, SellPrice = 27, LevelUnlock = 2, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 2666, Voltage = 1.2, PricePerGB = 10, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(T_Force_DARK__Silver__8_GB_2666_MHz);
            Memory T_Force_DARK__Silver__8_GB_3000_MHz = new Memory() { Id = 290, Name = "T-Force DARK (Silver) 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 100, SellPrice = 33, LevelUnlock = 6, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 12.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(T_Force_DARK__Silver__8_GB_3000_MHz);
            Memory T_Force_Delta_II_RGB_Series__Black__4_GB_2400_MHz = new Memory() { Id = 291, Name = "T-Force Delta II RGB Series (Black) 4 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 50, SellPrice = 17, LevelUnlock = 14, LevelPercent = 1, Lighting = Color.RGB, Size = 4, Frequency = 2400, Voltage = 1.2, PricePerGB = 12.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(T_Force_Delta_II_RGB_Series__Black__4_GB_2400_MHz);
            Memory T_Force_Delta_II_RGB_Series__Black__4_GB_3000_MHz = new Memory() { Id = 292, Name = "T-Force Delta II RGB Series (Black) 4 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 65, SellPrice = 22, LevelUnlock = 14, LevelPercent = 33, Lighting = Color.RGB, Size = 4, Frequency = 3000, Voltage = 1.35, PricePerGB = 16.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(T_Force_Delta_II_RGB_Series__Black__4_GB_3000_MHz);
            Memory T_Force_Delta_II_RGB_Series__Black__8_GB_2400_MHz = new Memory() { Id = 293, Name = "T-Force Delta II RGB Series (Black) 8 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 80, SellPrice = 27, LevelUnlock = 14, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 2400, Voltage = 1.2, PricePerGB = 10, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(T_Force_Delta_II_RGB_Series__Black__8_GB_2400_MHz);
            Memory T_Force_Delta_II_RGB_Series__Black__8_GB_3000_MHz = new Memory() { Id = 294, Name = "T-Force Delta II RGB Series (Black) 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 110, SellPrice = 37, LevelUnlock = 14, LevelPercent = 66, Lighting = Color.RGB, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(T_Force_Delta_II_RGB_Series__Black__8_GB_3000_MHz);
            Memory T_Force_Delta_II_RGB_Series__White__4_GB_2400_MHz = new Memory() { Id = 295, Name = "T-Force Delta II RGB Series (White) 4 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 50, SellPrice = 17, LevelUnlock = 14, LevelPercent = 1, Lighting = Color.RGB, Size = 4, Frequency = 2400, Voltage = 1.2, PricePerGB = 12.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(T_Force_Delta_II_RGB_Series__White__4_GB_2400_MHz);
            Memory T_Force_Delta_II_RGB_Series__White__8_GB_2400_MHz = new Memory() { Id = 296, Name = "T-Force Delta II RGB Series (White) 8 GB 2400 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 80, SellPrice = 27, LevelUnlock = 14, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 2400, Voltage = 1.2, PricePerGB = 10, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2568 }; memories.Add(T_Force_Delta_II_RGB_Series__White__8_GB_2400_MHz);
            Memory T_Force_Delta_II_RGB_Series__White__8_GB_2666_MHz = new Memory() { Id = 297, Name = "T-Force Delta II RGB Series (White) 8 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 90, SellPrice = 30, LevelUnlock = 14, LevelPercent = 33, Lighting = Color.RGB, Size = 8, Frequency = 2666, Voltage = 1.2, PricePerGB = 11.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(T_Force_Delta_II_RGB_Series__White__8_GB_2666_MHz);
            Memory T_Force_Delta_II_RGB_Series__White__8_GB_3000_MHz = new Memory() { Id = 298, Name = "T-Force Delta II RGB Series (White) 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 110, SellPrice = 37, LevelUnlock = 14, LevelPercent = 66, Lighting = Color.RGB, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(T_Force_Delta_II_RGB_Series__White__8_GB_3000_MHz);
            Memory T_Force_Night_Hawk__Blue_LED__16_GB_3000_MHz = new Memory() { Id = 299, Name = "T-Force Night Hawk (Blue LED) 16 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 195, SellPrice = 65, LevelUnlock = 11, LevelPercent = 33, Lighting = Color.Blue, Size = 16, Frequency = 3000, Voltage = 1.35, PricePerGB = 12.2, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(T_Force_Night_Hawk__Blue_LED__16_GB_3000_MHz);
            Memory T_Force_Night_Hawk__Blue_LED__16_GB_3200_MHz = new Memory() { Id = 300, Name = "T-Force Night Hawk (Blue LED) 16 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 215, SellPrice = 72, LevelUnlock = 12, LevelPercent = 66, Lighting = Color.Blue, Size = 16, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.4, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(T_Force_Night_Hawk__Blue_LED__16_GB_3200_MHz);
            Memory T_Force_Night_Hawk__Blue_LED__8_GB_3000_MHz = new Memory() { Id = 301, Name = "T-Force Night Hawk (Blue LED) 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 105, SellPrice = 35, LevelUnlock = 11, LevelPercent = 33, Lighting = Color.Blue, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 13.1, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(T_Force_Night_Hawk__Blue_LED__8_GB_3000_MHz);
            Memory T_Force_Night_Hawk__Blue_LED__8_GB_3200_MHz = new Memory() { Id = 302, Name = "T-Force Night Hawk (Blue LED) 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 115, SellPrice = 38, LevelUnlock = 12, LevelPercent = 66, Lighting = Color.Blue, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 14.4, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(T_Force_Night_Hawk__Blue_LED__8_GB_3200_MHz);
            Memory T_Force_Night_Hawk__Red_LED__16_GB_3000_MHz = new Memory() { Id = 303, Name = "T-Force Night Hawk (Red LED) 16 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 195, SellPrice = 65, LevelUnlock = 11, LevelPercent = 33, Lighting = Color.Red, Size = 16, Frequency = 3000, Voltage = 1.35, PricePerGB = 12.2, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(T_Force_Night_Hawk__Red_LED__16_GB_3000_MHz);
            Memory T_Force_Night_Hawk__Red_LED__16_GB_3200_MHz = new Memory() { Id = 304, Name = "T-Force Night Hawk (Red LED) 16 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 215, SellPrice = 72, LevelUnlock = 12, LevelPercent = 66, Lighting = Color.Red, Size = 16, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.4, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(T_Force_Night_Hawk__Red_LED__16_GB_3200_MHz);
            Memory T_Force_Night_Hawk__Red_LED__8_GB_3000_MHz = new Memory() { Id = 305, Name = "T-Force Night Hawk (Red LED) 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 105, SellPrice = 35, LevelUnlock = 11, LevelPercent = 33, Lighting = Color.Red, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 13.1, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(T_Force_Night_Hawk__Red_LED__8_GB_3000_MHz);
            Memory T_Force_Night_Hawk__Red_LED__8_GB_3200_MHz = new Memory() { Id = 306, Name = "T-Force Night Hawk (Red LED) 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 115, SellPrice = 38, LevelUnlock = 12, LevelPercent = 66, Lighting = Color.Red, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 14.4, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(T_Force_Night_Hawk__Red_LED__8_GB_3200_MHz);
            Memory T_Force_Night_Hawk__White_LED__16_GB_3000_MHz = new Memory() { Id = 307, Name = "T-Force Night Hawk (White LED) 16 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 195, SellPrice = 65, LevelUnlock = 11, LevelPercent = 33, Lighting = Color.White, Size = 16, Frequency = 3000, Voltage = 1.35, PricePerGB = 12.2, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(T_Force_Night_Hawk__White_LED__16_GB_3000_MHz);
            Memory T_Force_Night_Hawk__White_LED__16_GB_3200_MHz = new Memory() { Id = 308, Name = "T-Force Night Hawk (White LED) 16 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 215, SellPrice = 72, LevelUnlock = 12, LevelPercent = 66, Lighting = Color.White, Size = 16, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.4, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(T_Force_Night_Hawk__White_LED__16_GB_3200_MHz);
            Memory T_Force_Night_Hawk__White_LED__8_GB_3000_MHz = new Memory() { Id = 309, Name = "T-Force Night Hawk (White LED) 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 105, SellPrice = 35, LevelUnlock = 11, LevelPercent = 33, Lighting = Color.White, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 13.1, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(T_Force_Night_Hawk__White_LED__8_GB_3000_MHz);
            Memory T_Force_Night_Hawk__White_LED__8_GB_3200_MHz = new Memory() { Id = 310, Name = "T-Force Night Hawk (White LED) 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 115, SellPrice = 38, LevelUnlock = 12, LevelPercent = 66, Lighting = Color.White, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 14.4, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(T_Force_Night_Hawk__White_LED__8_GB_3200_MHz);
            Memory T_Force_Night_Hawk_RGB__Black__8_GB_3000_MHz = new Memory() { Id = 311, Name = "T-Force Night Hawk RGB (Black) 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 110, SellPrice = 37, LevelUnlock = 15, LevelPercent = 90, Lighting = Color.RGB, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(T_Force_Night_Hawk_RGB__Black__8_GB_3000_MHz);
            Memory T_Force_Night_Hawk_RGB__White__8_GB_3000_MHz = new Memory() { Id = 312, Name = "T-Force Night Hawk RGB (White) 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 110, SellPrice = 37, LevelUnlock = 15, LevelPercent = 90, Lighting = Color.RGB, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(T_Force_Night_Hawk_RGB__White__8_GB_3000_MHz);
            Memory T_Force_Xtreem_ARGB_DDR4_GAMING_8_GB_3200_MHz = new Memory() { Id = 313, Name = "T-Force Xtreem ARGB DDR4 GAMING 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 120, SellPrice = 40, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(T_Force_Xtreem_ARGB_DDR4_GAMING_8_GB_3200_MHz);
            Memory T_Force_Xtreem_ARGB_DDR4_GAMING_8_GB_3600_MHz = new Memory() { Id = 314, Name = "T-Force Xtreem ARGB DDR4 GAMING 8 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 130, SellPrice = 43, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 3600, Voltage = 1.35, PricePerGB = 16.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(T_Force_Xtreem_ARGB_DDR4_GAMING_8_GB_3600_MHz);
            Memory T_Force_Xtreem_ARGB_DDR4_GAMING_8_GB_4000_MHz = new Memory() { Id = 315, Name = "T-Force Xtreem ARGB DDR4 GAMING 8 GB 4000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 150, SellPrice = 50, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 4000, Voltage = 1.35, PricePerGB = 18.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4280 }; memories.Add(T_Force_Xtreem_ARGB_DDR4_GAMING_8_GB_4000_MHz);
            Memory XCALIBUR_RGB_DDR4_16_GB_3200_MHz = new Memory() { Id = 316, Name = "XCALIBUR RGB DDR4 16 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 220, SellPrice = 73, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, Size = 16, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(XCALIBUR_RGB_DDR4_16_GB_3200_MHz);
            Memory XCALIBUR_RGB_DDR4_16_GB_3600_MHz = new Memory() { Id = 317, Name = "XCALIBUR RGB DDR4 16 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 240, SellPrice = 80, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, Size = 16, Frequency = 3600, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(XCALIBUR_RGB_DDR4_16_GB_3600_MHz);
            Memory XCALIBUR_RGB_DDR4_16_GB_4000_MHz = new Memory() { Id = 318, Name = "XCALIBUR RGB DDR4 16 GB 4000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 280, SellPrice = 93, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, Size = 16, Frequency = 4000, Voltage = 1.35, PricePerGB = 17.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4280 }; memories.Add(XCALIBUR_RGB_DDR4_16_GB_4000_MHz);
            Memory XCALIBUR_RGB_DDR4_32_GB_3200_MHz = new Memory() { Id = 319, Name = "XCALIBUR RGB DDR4 32 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 415, SellPrice = 138, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, Size = 32, Frequency = 3200, Voltage = 1.35, PricePerGB = 13, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(XCALIBUR_RGB_DDR4_32_GB_3200_MHz);
            Memory XCALIBUR_RGB_DDR4_32_GB_3600_MHz = new Memory() { Id = 320, Name = "XCALIBUR RGB DDR4 32 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 455, SellPrice = 152, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, Size = 32, Frequency = 3600, Voltage = 1.35, PricePerGB = 14.2, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(XCALIBUR_RGB_DDR4_32_GB_3600_MHz);
            Memory XCALIBUR_RGB_DDR4_32_GB_4000_MHz = new Memory() { Id = 321, Name = "XCALIBUR RGB DDR4 32 GB 4000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 535, SellPrice = 178, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, Size = 32, Frequency = 4000, Voltage = 1.35, PricePerGB = 16.7, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4280 }; memories.Add(XCALIBUR_RGB_DDR4_32_GB_4000_MHz);
            Memory XCALIBUR_RGB_DDR4_8_GB_3200_MHz = new Memory() { Id = 322, Name = "XCALIBUR RGB DDR4 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 120, SellPrice = 40, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(XCALIBUR_RGB_DDR4_8_GB_3200_MHz);
            Memory XCALIBUR_RGB_DDR4_8_GB_3600_MHz = new Memory() { Id = 323, Name = "XCALIBUR RGB DDR4 8 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 130, SellPrice = 43, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 3600, Voltage = 1.35, PricePerGB = 16.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(XCALIBUR_RGB_DDR4_8_GB_3600_MHz);
            Memory XCALIBUR_RGB_DDR4_8_GB_4000_MHz = new Memory() { Id = 324, Name = "XCALIBUR RGB DDR4 8 GB 4000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 150, SellPrice = 50, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 4000, Voltage = 1.35, PricePerGB = 18.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4280 }; memories.Add(XCALIBUR_RGB_DDR4_8_GB_4000_MHz);
            Memory XCALIBUR_RGB_DDR4_Special_Edition_16_GB_3200_MHz = new Memory() { Id = 325, Name = "XCALIBUR RGB DDR4 Special Edition 16 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 220, SellPrice = 73, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, Size = 16, Frequency = 3200, Voltage = 1.35, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(XCALIBUR_RGB_DDR4_Special_Edition_16_GB_3200_MHz);
            Memory XCALIBUR_RGB_DDR4_Special_Edition_16_GB_3600_MHz = new Memory() { Id = 326, Name = "XCALIBUR RGB DDR4 Special Edition 16 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 240, SellPrice = 80, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, Size = 16, Frequency = 3600, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(XCALIBUR_RGB_DDR4_Special_Edition_16_GB_3600_MHz);
            Memory XCALIBUR_RGB_DDR4_Special_Edition_16_GB_4000_MHz = new Memory() { Id = 327, Name = "XCALIBUR RGB DDR4 Special Edition 16 GB 4000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 280, SellPrice = 93, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, Size = 16, Frequency = 4000, Voltage = 1.35, PricePerGB = 17.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4280 }; memories.Add(XCALIBUR_RGB_DDR4_Special_Edition_16_GB_4000_MHz);
            Memory XCALIBUR_RGB_DDR4_Special_Edition_32_GB_3200_MHz = new Memory() { Id = 328, Name = "XCALIBUR RGB DDR4 Special Edition 32 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 415, SellPrice = 138, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, Size = 32, Frequency = 3200, Voltage = 1.35, PricePerGB = 13, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(XCALIBUR_RGB_DDR4_Special_Edition_32_GB_3200_MHz);
            Memory XCALIBUR_RGB_DDR4_Special_Edition_32_GB_3600_MHz = new Memory() { Id = 329, Name = "XCALIBUR RGB DDR4 Special Edition 32 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 455, SellPrice = 152, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, Size = 32, Frequency = 3600, Voltage = 1.35, PricePerGB = 14.2, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(XCALIBUR_RGB_DDR4_Special_Edition_32_GB_3600_MHz);
            Memory XCALIBUR_RGB_DDR4_Special_Edition_32_GB_4000_MHz = new Memory() { Id = 330, Name = "XCALIBUR RGB DDR4 Special Edition 32 GB 4000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 535, SellPrice = 178, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, Size = 32, Frequency = 4000, Voltage = 1.35, PricePerGB = 16.7, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4280 }; memories.Add(XCALIBUR_RGB_DDR4_Special_Edition_32_GB_4000_MHz);
            Memory XCALIBUR_RGB_DDR4_Special_Edition_8_GB_3200_MHz = new Memory() { Id = 331, Name = "XCALIBUR RGB DDR4 Special Edition 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 120, SellPrice = 40, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 3200, Voltage = 1.35, PricePerGB = 15, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(XCALIBUR_RGB_DDR4_Special_Edition_8_GB_3200_MHz);
            Memory XCALIBUR_RGB_DDR4_Special_Edition_8_GB_3600_MHz = new Memory() { Id = 332, Name = "XCALIBUR RGB DDR4 Special Edition 8 GB 3600 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 130, SellPrice = 43, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 3600, Voltage = 1.35, PricePerGB = 16.3, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3852 }; memories.Add(XCALIBUR_RGB_DDR4_Special_Edition_8_GB_3600_MHz);
            Memory XCALIBUR_RGB_DDR4_Special_Edition_8_GB_4000_MHz = new Memory() { Id = 333, Name = "XCALIBUR RGB DDR4 Special Edition 8 GB 4000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 150, SellPrice = 50, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, Size = 8, Frequency = 4000, Voltage = 1.35, PricePerGB = 18.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 4280 }; memories.Add(XCALIBUR_RGB_DDR4_Special_Edition_8_GB_4000_MHz);
            Memory ZEUS_DDR4_GAMING_16_GB_2666_MHz = new Memory() { Id = 334, Name = "ZEUS DDR4 GAMING 16 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 150, SellPrice = 50, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Size = 16, Frequency = 2666, Voltage = 1.2, PricePerGB = 9.4, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(ZEUS_DDR4_GAMING_16_GB_2666_MHz);
            Memory ZEUS_DDR4_GAMING_16_GB_3000_MHz = new Memory() { Id = 335, Name = "ZEUS DDR4 GAMING 16 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 190, SellPrice = 63, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Size = 16, Frequency = 3000, Voltage = 1.35, PricePerGB = 11.9, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(ZEUS_DDR4_GAMING_16_GB_3000_MHz);
            Memory ZEUS_DDR4_GAMING_16_GB_3200_MHz = new Memory() { Id = 336, Name = "ZEUS DDR4 GAMING 16 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 210, SellPrice = 70, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Size = 16, Frequency = 3200, Voltage = 1.2, PricePerGB = 13.1, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(ZEUS_DDR4_GAMING_16_GB_3200_MHz);
            Memory ZEUS_DDR4_GAMING_32_GB_2666_MHz = new Memory() { Id = 337, Name = "ZEUS DDR4 GAMING 32 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 285, SellPrice = 95, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Size = 32, Frequency = 2666, Voltage = 1.2, PricePerGB = 8.9, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(ZEUS_DDR4_GAMING_32_GB_2666_MHz);
            Memory ZEUS_DDR4_GAMING_32_GB_3000_MHz = new Memory() { Id = 338, Name = "ZEUS DDR4 GAMING 32 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 365, SellPrice = 122, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Size = 32, Frequency = 3000, Voltage = 1.35, PricePerGB = 11.4, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(ZEUS_DDR4_GAMING_32_GB_3000_MHz);
            Memory ZEUS_DDR4_GAMING_32_GB_3200_MHz = new Memory() { Id = 339, Name = "ZEUS DDR4 GAMING 32 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 405, SellPrice = 135, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Size = 32, Frequency = 3200, Voltage = 1.2, PricePerGB = 12.7, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(ZEUS_DDR4_GAMING_32_GB_3200_MHz);
            Memory ZEUS_DDR4_GAMING_8_GB_2666_MHz = new Memory() { Id = 340, Name = "ZEUS DDR4 GAMING 8 GB 2666 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 80, SellPrice = 27, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 2666, Voltage = 1.2, PricePerGB = 10, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 2852 }; memories.Add(ZEUS_DDR4_GAMING_8_GB_2666_MHz);
            Memory ZEUS_DDR4_GAMING_8_GB_3000_MHz = new Memory() { Id = 341, Name = "ZEUS DDR4 GAMING 8 GB 3000 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 100, SellPrice = 33, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 3000, Voltage = 1.35, PricePerGB = 12.5, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3210 }; memories.Add(ZEUS_DDR4_GAMING_8_GB_3000_MHz);
            Memory ZEUS_DDR4_GAMING_8_GB_3200_MHz = new Memory() { Id = 342, Name = "ZEUS DDR4 GAMING 8 GB 3200 MHz", PartType = PartType.Memory, Manufacturer = Team_Group, Price = 110, SellPrice = 37, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Size = 8, Frequency = 3200, Voltage = 1.2, PricePerGB = 13.8, OverclockedBaseVoltage = 1.65, OverclockedBaseFrequency = 3424 }; memories.Add(ZEUS_DDR4_GAMING_8_GB_3200_MHz);
            #endregion
            _context.Memory.AddRange(memories);
            #region Motherboard
            List<Motherboard> motherboards = new List<Motherboard>();
            Motherboard B450_Steel_Legend = new Motherboard() { Id = 1, Name = "B450 Steel Legend", PartType = PartType.Motherboard, Manufacturer = ASRock, Price = 110, SellPrice = 37, LevelUnlock = 18, LevelPercent = 40, Lighting = Color.RGB, MoboChipset = B450, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 3466, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; B450_Steel_Legend.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(B450_Steel_Legend);
            Motherboard B450M_Steel_Legend = new Motherboard() { Id = 2, Name = "B450M Steel Legend", PartType = PartType.Motherboard, Manufacturer = ASRock, Price = 90, SellPrice = 30, LevelUnlock = 18, LevelPercent = 40, Lighting = Color.RGB, MoboChipset = B450, CPUSocket = AM4, Size = Micro_ATX, MaxRamSpeed = 3466, DualGPUMaxSlotSize = 2, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 2, RamSlots = 4, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; B450M_Steel_Legend.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(B450M_Steel_Legend);
            Motherboard B550_Pro4 = new Motherboard() { Id = 3, Name = "B550 Pro4", PartType = PartType.Motherboard, Manufacturer = ASRock, Price = 115, SellPrice = 38, LevelUnlock = 32, LevelPercent = 60, Lighting = Color.RGB, MoboChipset = B550, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 4733, DualGPUMaxSlotSize = 4, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; B550_Pro4.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(B550_Pro4);
            Motherboard B550M_ITX_ac = new Motherboard() { Id = 4, Name = "B550M-ITX/ac", PartType = PartType.Motherboard, Manufacturer = ASRock, Price = 260, SellPrice = 87, LevelUnlock = 32, LevelPercent = 60, Lighting = null, MoboChipset = B550, CPUSocket = AM4, Size = Mini_ITX, MaxRamSpeed = 4733, DualGPUMaxSlotSize = 0, Overclockable = true, M2Slots = 1, M2SlotsSupportingHeatsinks = 0, RamSlots = 2, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; motherboards.Add(B550M_ITX_ac);
            Motherboard TRX40_Taichi = new Motherboard() { Id = 5, Name = "TRX40 Taichi", PartType = PartType.Motherboard, Manufacturer = ASRock, Price = 500, SellPrice = 167, LevelUnlock = 31, LevelPercent = 60, Lighting = Color.RGB, MoboChipset = TRX40, CPUSocket = sTRX4, Size = S_ATX, MaxRamSpeed = 4666, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 8, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; TRX40_Taichi.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(TRX40_Taichi);
            Motherboard X570_Extreme4 = new Motherboard() { Id = 6, Name = "X570 Extreme4", PartType = PartType.Motherboard, Manufacturer = ASRock, Price = 240, SellPrice = 80, LevelUnlock = 30, LevelPercent = 60, Lighting = Color.RGB, MoboChipset = X570, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 4666, DualGPUMaxSlotSize = 4, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; X570_Extreme4.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(X570_Extreme4);
            Motherboard X570_Pro4 = new Motherboard() { Id = 7, Name = "X570 Pro4", PartType = PartType.Motherboard, Manufacturer = ASRock, Price = 170, SellPrice = 57, LevelUnlock = 30, LevelPercent = 60, Lighting = null, MoboChipset = X570, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 4666, DualGPUMaxSlotSize = 4, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 2, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; X570_Pro4.MultiGPUs.AddRange(new[] { CrossFire }); motherboards.Add(X570_Pro4);
            Motherboard Z390_Extreme_4 = new Motherboard() { Id = 8, Name = "Z390 Extreme 4", PartType = PartType.Motherboard, Manufacturer = ASRock, Price = 180, SellPrice = 60, LevelUnlock = 21, LevelPercent = 30, Lighting = Color.RGB, MoboChipset = Z390, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 4333, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; Z390_Extreme_4.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(Z390_Extreme_4);
            Motherboard Z390_Phantom_Gaming_4 = new Motherboard() { Id = 9, Name = "Z390 Phantom Gaming 4", PartType = PartType.Motherboard, Manufacturer = ASRock, Price = 140, SellPrice = 47, LevelUnlock = 21, LevelPercent = 30, Lighting = null, MoboChipset = Z390, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 4300, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; Z390_Phantom_Gaming_4.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(Z390_Phantom_Gaming_4);
            Motherboard Z390_Phantom_Gaming_6 = new Motherboard() { Id = 10, Name = "Z390 Phantom Gaming 6", PartType = PartType.Motherboard, Manufacturer = ASRock, Price = 195, SellPrice = 65, LevelUnlock = 21, LevelPercent = 60, Lighting = Color.RGB, MoboChipset = Z390, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 4300, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; Z390_Phantom_Gaming_6.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(Z390_Phantom_Gaming_6);
            Motherboard Z390_Phantom_Gaming_9 = new Motherboard() { Id = 11, Name = "Z390 Phantom Gaming 9", PartType = PartType.Motherboard, Manufacturer = ASRock, Price = 270, SellPrice = 90, LevelUnlock = 21, LevelPercent = 30, Lighting = Color.RGB, MoboChipset = Z390, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 4266, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 2, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; Z390_Phantom_Gaming_9.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(Z390_Phantom_Gaming_9);
            Motherboard Z390_Phantom_Gaming_ITX_ac = new Motherboard() { Id = 12, Name = "Z390 Phantom Gaming ITX/ac", PartType = PartType.Motherboard, Manufacturer = ASRock, Price = 190, SellPrice = 63, LevelUnlock = 26, LevelPercent = 40, Lighting = Color.RGB, MoboChipset = Z390, CPUSocket = LGA_1151__Coffee_Lake_, Size = Mini_ITX, MaxRamSpeed = 4500, DualGPUMaxSlotSize = 0, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 2, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; motherboards.Add(Z390_Phantom_Gaming_ITX_ac);
            Motherboard Z390_Phantom_Gaming_SLI_ac = new Motherboard() { Id = 13, Name = "Z390 Phantom Gaming SLI/ac", PartType = PartType.Motherboard, Manufacturer = ASRock, Price = 170, SellPrice = 57, LevelUnlock = 20, LevelPercent = 40, Lighting = Color.RGB, MoboChipset = Z390, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 4300, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; Z390_Phantom_Gaming_SLI_ac.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(Z390_Phantom_Gaming_SLI_ac);
            Motherboard Z390_Pro4 = new Motherboard() { Id = 14, Name = "Z390 Pro4", PartType = PartType.Motherboard, Manufacturer = ASRock, Price = 135, SellPrice = 45, LevelUnlock = 20, LevelPercent = 80, Lighting = null, MoboChipset = Z390, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 4300, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 2, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; Z390_Pro4.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(Z390_Pro4);
            Motherboard Z390_Taichi = new Motherboard() { Id = 15, Name = "Z390 Taichi", PartType = PartType.Motherboard, Manufacturer = ASRock, Price = 240, SellPrice = 80, LevelUnlock = 22, LevelPercent = 60, Lighting = Color.RGB, MoboChipset = Z390, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 4200, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 2, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; Z390_Taichi.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(Z390_Taichi);
            Motherboard Z390_Taichi_Ultimate = new Motherboard() { Id = 16, Name = "Z390 Taichi Ultimate", PartType = PartType.Motherboard, Manufacturer = ASRock, Price = 300, SellPrice = 100, LevelUnlock = 22, LevelPercent = 60, Lighting = Color.RGB, MoboChipset = Z390, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 4200, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 2, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; Z390_Taichi_Ultimate.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(Z390_Taichi_Ultimate);
            Motherboard Z390M_Pro4 = new Motherboard() { Id = 17, Name = "Z390M Pro4", PartType = PartType.Motherboard, Manufacturer = ASRock, Price = 135, SellPrice = 45, LevelUnlock = 22, LevelPercent = 30, Lighting = null, MoboChipset = Z390, CPUSocket = LGA_1151__Coffee_Lake_, Size = Micro_ATX, MaxRamSpeed = 4300, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; Z390M_Pro4.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(Z390M_Pro4);
            Motherboard Z390M_ITX_ac = new Motherboard() { Id = 18, Name = "Z390M-ITX/ac", PartType = PartType.Motherboard, Manufacturer = ASRock, Price = 150, SellPrice = 50, LevelUnlock = 22, LevelPercent = 30, Lighting = null, MoboChipset = Z390, CPUSocket = LGA_1151__Coffee_Lake_, Size = Mini_ITX, MaxRamSpeed = 4000, DualGPUMaxSlotSize = 0, Overclockable = true, M2Slots = 1, M2SlotsSupportingHeatsinks = 1, RamSlots = 2, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; motherboards.Add(Z390M_ITX_ac);
            Motherboard Z590_Phantom_Gaming_4 = new Motherboard() { Id = 19, Name = "Z590 Phantom Gaming 4", PartType = PartType.Motherboard, Manufacturer = ASRock, Price = 170, SellPrice = 57, LevelUnlock = 34, LevelPercent = 60, Lighting = null, MoboChipset = Z590, CPUSocket = LGA_1200, Size = S_ATX, MaxRamSpeed = 4800, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 3, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; Z590_Phantom_Gaming_4.MultiGPUs.AddRange(new[] { CrossFire }); motherboards.Add(Z590_Phantom_Gaming_4);
            Motherboard Z590M_Phantom_Gaming_4 = new Motherboard() { Id = 20, Name = "Z590M Phantom Gaming 4", PartType = PartType.Motherboard, Manufacturer = ASRock, Price = 150, SellPrice = 50, LevelUnlock = 34, LevelPercent = 60, Lighting = null, MoboChipset = Z590, CPUSocket = LGA_1200, Size = Micro_ATX, MaxRamSpeed = 4800, DualGPUMaxSlotSize = 0, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 2, RamSlots = 4, SATASlots = 2, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; motherboards.Add(Z590M_Phantom_Gaming_4);
            Motherboard Z590M_ITX_ax = new Motherboard() { Id = 21, Name = "Z590M-ITX/ax", PartType = PartType.Motherboard, Manufacturer = ASRock, Price = 290, SellPrice = 97, LevelUnlock = 34, LevelPercent = 60, Lighting = null, MoboChipset = Z590, CPUSocket = LGA_1200, Size = Mini_ITX, MaxRamSpeed = 5066, DualGPUMaxSlotSize = 0, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 2, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; motherboards.Add(Z590M_ITX_ax);
            Motherboard PRIME_X299_DELUXE = new Motherboard() { Id = 22, Name = "PRIME X299-DELUXE", PartType = PartType.Motherboard, Manufacturer = ASUS, Price = 450, SellPrice = 150, LevelUnlock = 24, LevelPercent = 25, Lighting = Color.RGB, MoboChipset = X299, CPUSocket = LGA_2066, Size = S_ATX, MaxRamSpeed = 4133, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 1, M2SlotsSupportingHeatsinks = 0, RamSlots = 8, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2400, MinRamSpeed = 2133 }; PRIME_X299_DELUXE.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(PRIME_X299_DELUXE);
            Motherboard PRIME_X470_PRO = new Motherboard() { Id = 23, Name = "PRIME X470-PRO", PartType = PartType.Motherboard, Manufacturer = ASUS, Price = 165, SellPrice = 55, LevelUnlock = 18, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = X470, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 3600, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; PRIME_X470_PRO.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(PRIME_X470_PRO);
            Motherboard PRIME_Z370_A = new Motherboard() { Id = 24, Name = "PRIME Z370-A", PartType = PartType.Motherboard, Manufacturer = ASUS, Price = 170, SellPrice = 57, LevelUnlock = 15, LevelPercent = 30, Lighting = Color.RGB, MoboChipset = Z370, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 4000, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; PRIME_Z370_A.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(PRIME_Z370_A);
            Motherboard ROG_Crosshair_VII_Hero__WI_FI_ = new Motherboard() { Id = 25, Name = "ROG Crosshair VII Hero (WI-FI)", PartType = PartType.Motherboard, Manufacturer = ASUS, Price = 275, SellPrice = 92, LevelUnlock = 20, LevelPercent = 30, Lighting = Color.RGB, MoboChipset = X470, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 3600, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; ROG_Crosshair_VII_Hero__WI_FI_.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(ROG_Crosshair_VII_Hero__WI_FI_);
            Motherboard ROG_Maximus_X_Apex = new Motherboard() { Id = 26, Name = "ROG Maximus X Apex", PartType = PartType.Motherboard, Manufacturer = ASUS, Price = 400, SellPrice = 133, LevelUnlock = 27, LevelPercent = 50, Lighting = Color.RGB, MoboChipset = Z370, CPUSocket = LGA_1151__Coffee_Lake_, Size = E_ATX, MaxRamSpeed = 4500, DualGPUMaxSlotSize = 4, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 2, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; ROG_Maximus_X_Apex.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(ROG_Maximus_X_Apex);
            Motherboard ROG_Maximus_X_Code = new Motherboard() { Id = 27, Name = "ROG Maximus X Code", PartType = PartType.Motherboard, Manufacturer = ASUS, Price = 280, SellPrice = 93, LevelUnlock = 21, LevelPercent = 50, Lighting = Color.RGB, MoboChipset = Z370, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 4133, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 1, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; ROG_Maximus_X_Code.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(ROG_Maximus_X_Code);
            Motherboard ROG_Maximus_X_Formula = new Motherboard() { Id = 28, Name = "ROG Maximus X Formula", PartType = PartType.Motherboard, Manufacturer = ASUS, Price = 350, SellPrice = 117, LevelUnlock = 21, LevelPercent = 80, Lighting = Color.RGB, MoboChipset = Z370, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 4133, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; ROG_Maximus_X_Formula.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(ROG_Maximus_X_Formula);
            Motherboard ROG_Maximus_X_Hero__Wi_Fi_AC_ = new Motherboard() { Id = 29, Name = "ROG Maximus X Hero (Wi-Fi AC)", PartType = PartType.Motherboard, Manufacturer = ASUS, Price = 260, SellPrice = 87, LevelUnlock = 20, LevelPercent = 40, Lighting = Color.RGB, MoboChipset = Z370, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 4133, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; ROG_Maximus_X_Hero__Wi_Fi_AC_.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(ROG_Maximus_X_Hero__Wi_Fi_AC_);
            Motherboard ROG_Rampage_VI_Apex = new Motherboard() { Id = 30, Name = "ROG Rampage VI Apex", PartType = PartType.Motherboard, Manufacturer = ASUS, Price = 600, SellPrice = 200, LevelUnlock = 24, LevelPercent = 40, Lighting = Color.RGB, MoboChipset = X299, CPUSocket = LGA_2066, Size = E_ATX, MaxRamSpeed = 4133, DualGPUMaxSlotSize = 4, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2400, MinRamSpeed = 2133 }; ROG_Rampage_VI_Apex.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(ROG_Rampage_VI_Apex);
            Motherboard ROG_Rampage_VI_Extreme = new Motherboard() { Id = 31, Name = "ROG Rampage VI Extreme", PartType = PartType.Motherboard, Manufacturer = ASUS, Price = 640, SellPrice = 213, LevelUnlock = 25, LevelPercent = 30, Lighting = Color.RGB, MoboChipset = X299, CPUSocket = LGA_2066, Size = E_ATX, MaxRamSpeed = 4200, DualGPUMaxSlotSize = 4, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 1, RamSlots = 8, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2400, MinRamSpeed = 2133 }; ROG_Rampage_VI_Extreme.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(ROG_Rampage_VI_Extreme);
            Motherboard ROG_Strix_B550_E_Gaming = new Motherboard() { Id = 32, Name = "ROG Strix B550-E Gaming", PartType = PartType.Motherboard, Manufacturer = ASUS, Price = 280, SellPrice = 93, LevelUnlock = 32, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = B550, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 4600, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; ROG_Strix_B550_E_Gaming.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(ROG_Strix_B550_E_Gaming);
            Motherboard ROG_Strix_B550_F_Gaming_Wifi = new Motherboard() { Id = 33, Name = "ROG Strix B550-F Gaming Wifi", PartType = PartType.Motherboard, Manufacturer = ASUS, Price = 210, SellPrice = 70, LevelUnlock = 32, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = B550, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 4600, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; ROG_Strix_B550_F_Gaming_Wifi.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(ROG_Strix_B550_F_Gaming_Wifi);
            Motherboard ROG_Strix_TRX40_E_Gaming = new Motherboard() { Id = 34, Name = "ROG Strix TRX40-E Gaming", PartType = PartType.Motherboard, Manufacturer = ASUS, Price = 550, SellPrice = 183, LevelUnlock = 31, LevelPercent = 30, Lighting = Color.RGB, MoboChipset = TRX40, CPUSocket = sTRX4, Size = E_ATX, MaxRamSpeed = 4666, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 8, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; ROG_Strix_TRX40_E_Gaming.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(ROG_Strix_TRX40_E_Gaming);
            Motherboard ROG_Strix_X299_E_Gaming = new Motherboard() { Id = 35, Name = "ROG Strix X299-E Gaming", PartType = PartType.Motherboard, Manufacturer = ASUS, Price = 300, SellPrice = 100, LevelUnlock = 24, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = X299, CPUSocket = LGA_2066, Size = S_ATX, MaxRamSpeed = 4133, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 1, M2SlotsSupportingHeatsinks = 0, RamSlots = 8, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2400, MinRamSpeed = 2133 }; ROG_Strix_X299_E_Gaming.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(ROG_Strix_X299_E_Gaming);
            Motherboard ROG_Strix_X399_E_Gaming = new Motherboard() { Id = 36, Name = "ROG Strix X399-E Gaming", PartType = PartType.Motherboard, Manufacturer = ASUS, Price = 310, SellPrice = 103, LevelUnlock = 22, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = X399, CPUSocket = TR4, Size = E_ATX, MaxRamSpeed = 3600, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 1, M2SlotsSupportingHeatsinks = 0, RamSlots = 8, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; ROG_Strix_X399_E_Gaming.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(ROG_Strix_X399_E_Gaming);
            Motherboard ROG_Strix_X470_F_Gaming = new Motherboard() { Id = 37, Name = "ROG Strix X470-F Gaming", PartType = PartType.Motherboard, Manufacturer = ASUS, Price = 190, SellPrice = 63, LevelUnlock = 18, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = X470, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 3600, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; ROG_Strix_X470_F_Gaming.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(ROG_Strix_X470_F_Gaming);
            Motherboard ROG_Strix_X470_I_Gaming = new Motherboard() { Id = 38, Name = "ROG Strix X470-I Gaming", PartType = PartType.Motherboard, Manufacturer = ASUS, Price = 210, SellPrice = 70, LevelUnlock = 18, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = X470, CPUSocket = AM4, Size = Mini_ITX, MaxRamSpeed = 3600, DualGPUMaxSlotSize = 0, Overclockable = true, M2Slots = 1, M2SlotsSupportingHeatsinks = 0, RamSlots = 2, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; motherboards.Add(ROG_Strix_X470_I_Gaming);
            Motherboard ROG_Strix_X570_I_Gaming = new Motherboard() { Id = 39, Name = "ROG Strix X570-I Gaming", PartType = PartType.Motherboard, Manufacturer = ASUS, Price = 250, SellPrice = 83, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = X570, CPUSocket = AM4, Size = Mini_ITX, MaxRamSpeed = 4800, DualGPUMaxSlotSize = 0, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 2, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; motherboards.Add(ROG_Strix_X570_I_Gaming);
            Motherboard ROG_Strix_Z370_E_Gaming = new Motherboard() { Id = 40, Name = "ROG Strix Z370-E Gaming", PartType = PartType.Motherboard, Manufacturer = ASUS, Price = 210, SellPrice = 70, LevelUnlock = 17, LevelPercent = 65, Lighting = Color.RGB, MoboChipset = Z370, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 4000, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; ROG_Strix_Z370_E_Gaming.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(ROG_Strix_Z370_E_Gaming);
            Motherboard ROG_Strix_Z370_G_Gaming__Wi_Fi_AC_ = new Motherboard() { Id = 41, Name = "ROG Strix Z370-G Gaming (Wi-Fi AC)", PartType = PartType.Motherboard, Manufacturer = ASUS, Price = 185, SellPrice = 62, LevelUnlock = 17, LevelPercent = 15, Lighting = Color.RGB, MoboChipset = Z370, CPUSocket = LGA_1151__Coffee_Lake_, Size = Micro_ATX, MaxRamSpeed = 4000, DualGPUMaxSlotSize = 2, Overclockable = true, M2Slots = 1, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; ROG_Strix_Z370_G_Gaming__Wi_Fi_AC_.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(ROG_Strix_Z370_G_Gaming__Wi_Fi_AC_);
            Motherboard ROG_Strix_Z370_I_Gaming = new Motherboard() { Id = 42, Name = "ROG Strix Z370-I Gaming", PartType = PartType.Motherboard, Manufacturer = ASUS, Price = 200, SellPrice = 67, LevelUnlock = 25, LevelPercent = 50, Lighting = Color.RGB, MoboChipset = Z370, CPUSocket = LGA_1151__Coffee_Lake_, Size = Mini_ITX, MaxRamSpeed = 4333, DualGPUMaxSlotSize = 0, Overclockable = true, M2Slots = 1, M2SlotsSupportingHeatsinks = 0, RamSlots = 2, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; motherboards.Add(ROG_Strix_Z370_I_Gaming);
            Motherboard ROG_ZENITH_EXTREME = new Motherboard() { Id = 43, Name = "ROG ZENITH EXTREME", PartType = PartType.Motherboard, Manufacturer = ASUS, Price = 470, SellPrice = 157, LevelUnlock = 23, LevelPercent = 60, Lighting = Color.RGB, MoboChipset = X399, CPUSocket = TR4, Size = E_ATX, MaxRamSpeed = 3600, DualGPUMaxSlotSize = 4, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 1, RamSlots = 8, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; ROG_ZENITH_EXTREME.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(ROG_ZENITH_EXTREME);
            Motherboard ROG_ZENITH_II_Extreme_Alpha = new Motherboard() { Id = 44, Name = "ROG ZENITH II Extreme Alpha", PartType = PartType.Motherboard, Manufacturer = ASUS, Price = 850, SellPrice = 283, LevelUnlock = 31, LevelPercent = 30, Lighting = Color.RGB, MoboChipset = TRX40, CPUSocket = sTRX4, Size = E_ATX, MaxRamSpeed = 4733, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 4, M2SlotsSupportingHeatsinks = 1, RamSlots = 8, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; ROG_ZENITH_II_Extreme_Alpha.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(ROG_ZENITH_II_Extreme_Alpha);
            Motherboard TUF_X299_MARK_1 = new Motherboard() { Id = 45, Name = "TUF X299 MARK 1", PartType = PartType.Motherboard, Manufacturer = ASUS, Price = 340, SellPrice = 113, LevelUnlock = 24, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = X299, CPUSocket = LGA_2066, Size = S_ATX, MaxRamSpeed = 4133, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 1, M2SlotsSupportingHeatsinks = 0, RamSlots = 8, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2400, MinRamSpeed = 2133 }; TUF_X299_MARK_1.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(TUF_X299_MARK_1);
            Motherboard TUF_Z370_PLUS_GAMING = new Motherboard() { Id = 46, Name = "TUF Z370-PLUS GAMING", PartType = PartType.Motherboard, Manufacturer = ASUS, Price = 165, SellPrice = 55, LevelUnlock = 15, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = Z370, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 4000, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; TUF_Z370_PLUS_GAMING.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(TUF_Z370_PLUS_GAMING);
            Motherboard TUF_Z370_PRO_GAMING = new Motherboard() { Id = 47, Name = "TUF Z370-PRO GAMING", PartType = PartType.Motherboard, Manufacturer = ASUS, Price = 155, SellPrice = 52, LevelUnlock = 15, LevelPercent = 1, Lighting = null, MoboChipset = Z370, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 4000, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 2, RamSlots = 4, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; TUF_Z370_PRO_GAMING.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(TUF_Z370_PRO_GAMING);
            Motherboard CVN_B365M_GAMING_PRO_V20 = new Motherboard() { Id = 48, Name = "CVN B365M GAMING PRO V20", PartType = PartType.Motherboard, Manufacturer = Colorful, Price = 105, SellPrice = 35, LevelUnlock = 20, LevelPercent = 1, Lighting = null, MoboChipset = B365, CPUSocket = LGA_1151__Coffee_Lake_, Size = Micro_ATX, MaxRamSpeed = 2666, DualGPUMaxSlotSize = 0, Overclockable = false, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; motherboards.Add(CVN_B365M_GAMING_PRO_V20);
            Motherboard CVN_X570_GAMING_PRO_V14 = new Motherboard() { Id = 49, Name = "CVN X570 GAMING PRO V14", PartType = PartType.Motherboard, Manufacturer = Colorful, Price = 360, SellPrice = 120, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = X570, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 4000, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; CVN_X570_GAMING_PRO_V14.MultiGPUs.AddRange(new[] { CrossFire }); motherboards.Add(CVN_X570_GAMING_PRO_V14);
            Motherboard CVN_Z390M_GAMING_PRO_V20 = new Motherboard() { Id = 50, Name = "CVN Z390M GAMING PRO V20", PartType = PartType.Motherboard, Manufacturer = Colorful, Price = 140, SellPrice = 47, LevelUnlock = 21, LevelPercent = 60, Lighting = null, MoboChipset = Z390, CPUSocket = LGA_1151__Coffee_Lake_, Size = Micro_ATX, MaxRamSpeed = 3200, DualGPUMaxSlotSize = 0, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; motherboards.Add(CVN_Z390M_GAMING_PRO_V20);
            Motherboard iGame_Z390_Vulcan_X_V20 = new Motherboard() { Id = 51, Name = "iGame Z390 Vulcan X V20", PartType = PartType.Motherboard, Manufacturer = Colorful, Price = 260, SellPrice = 87, LevelUnlock = 21, LevelPercent = 40, Lighting = Color.RGB, MoboChipset = Z390, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 4000, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; iGame_Z390_Vulcan_X_V20.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(iGame_Z390_Vulcan_X_V20);
            Motherboard A320M_4TUNE_X = new Motherboard() { Id = 52, Name = "A320M 4TUNE X", PartType = PartType.Motherboard, Manufacturer = DFL, Price = 190, SellPrice = 63, LevelUnlock = 3, LevelPercent = 1, Lighting = null, MoboChipset = A320, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 3733, DualGPUMaxSlotSize = 0, Overclockable = false, M2Slots = 0, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2133, MinRamSpeed = 2133 }; motherboards.Add(A320M_4TUNE_X);
            Motherboard H170_4TUNE_X = new Motherboard() { Id = 53, Name = "H170 4TUNE X", PartType = PartType.Motherboard, Manufacturer = DFL, Price = 190, SellPrice = 63, LevelUnlock = 1, LevelPercent = 1, Lighting = null, MoboChipset = H170, CPUSocket = LGA_1151__Skylake_, Size = S_ATX, MaxRamSpeed = 3000, DualGPUMaxSlotSize = 0, Overclockable = false, M2Slots = 0, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2133, MinRamSpeed = 2133 }; motherboards.Add(H170_4TUNE_X);
            Motherboard X299_DARK = new Motherboard() { Id = 54, Name = "X299 DARK", PartType = PartType.Motherboard, Manufacturer = EVGA, Price = 500, SellPrice = 167, LevelUnlock = 30, LevelPercent = 60, Lighting = null, MoboChipset = X299, CPUSocket = LGA_2066, Size = E_ATX, MaxRamSpeed = 4000, DualGPUMaxSlotSize = 4, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2400, MinRamSpeed = 2400 }; X299_DARK.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(X299_DARK);
            Motherboard X299_FTW_K = new Motherboard() { Id = 55, Name = "X299 FTW K", PartType = PartType.Motherboard, Manufacturer = EVGA, Price = 200, SellPrice = 67, LevelUnlock = 30, LevelPercent = 20, Lighting = Color.RGB, MoboChipset = X299, CPUSocket = LGA_2066, Size = E_ATX, MaxRamSpeed = 4000, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 2, RamSlots = 8, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2400, MinRamSpeed = 2400 }; X299_FTW_K.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(X299_FTW_K);
            Motherboard X299_Micro = new Motherboard() { Id = 56, Name = "X299 Micro", PartType = PartType.Motherboard, Manufacturer = EVGA, Price = 120, SellPrice = 40, LevelUnlock = 30, LevelPercent = 60, Lighting = null, MoboChipset = X299, CPUSocket = LGA_2066, Size = Micro_ATX, MaxRamSpeed = 4000, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 1, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2400, MinRamSpeed = 2400 }; X299_Micro.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(X299_Micro);
            Motherboard Z270_Classified_K = new Motherboard() { Id = 57, Name = "Z270 Classified K", PartType = PartType.Motherboard, Manufacturer = EVGA, Price = 300, SellPrice = 100, LevelUnlock = 9, LevelPercent = 59, Lighting = null, MoboChipset = Z270, CPUSocket = LGA_1151__Kaby_Lake_, Size = E_ATX, MaxRamSpeed = 3600, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 2, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2400, MinRamSpeed = 2133 }; Z270_Classified_K.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(Z270_Classified_K);
            Motherboard Z270_FTW_K = new Motherboard() { Id = 58, Name = "Z270 FTW K", PartType = PartType.Motherboard, Manufacturer = EVGA, Price = 240, SellPrice = 80, LevelUnlock = 7, LevelPercent = 50, Lighting = Color.Red, MoboChipset = Z270, CPUSocket = LGA_1151__Kaby_Lake_, Size = S_ATX, MaxRamSpeed = 3600, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 2, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2400, MinRamSpeed = 2133 }; Z270_FTW_K.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(Z270_FTW_K);
            Motherboard Z370_FTW = new Motherboard() { Id = 59, Name = "Z370 FTW", PartType = PartType.Motherboard, Manufacturer = EVGA, Price = 200, SellPrice = 67, LevelUnlock = 19, LevelPercent = 30, Lighting = null, MoboChipset = Z370, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 4133, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 2, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; Z370_FTW.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(Z370_FTW);
            Motherboard Z490_DARK = new Motherboard() { Id = 60, Name = "Z490 DARK", PartType = PartType.Motherboard, Manufacturer = EVGA, Price = 600, SellPrice = 200, LevelUnlock = 32, LevelPercent = 90, Lighting = null, MoboChipset = Z490, CPUSocket = LGA_1200, Size = E_ATX, MaxRamSpeed = 4800, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 2, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2933, MinRamSpeed = 2400 }; Z490_DARK.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(Z490_DARK);
            Motherboard Z490_FTW_WIFI = new Motherboard() { Id = 61, Name = "Z490 FTW WIFI", PartType = PartType.Motherboard, Manufacturer = EVGA, Price = 450, SellPrice = 150, LevelUnlock = 32, LevelPercent = 90, Lighting = Color.RGB, MoboChipset = Z490, CPUSocket = LGA_1200, Size = S_ATX, MaxRamSpeed = 4400, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 2, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2933, MinRamSpeed = 2400 }; Z490_FTW_WIFI.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(Z490_FTW_WIFI);
            Motherboard B360_AORUS_GAMING_3 = new Motherboard() { Id = 62, Name = "B360 AORUS GAMING 3", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 120, SellPrice = 40, LevelUnlock = 15, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = B360, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 2666, DualGPUMaxSlotSize = 3, Overclockable = false, M2Slots = 1, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; B360_AORUS_GAMING_3.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(B360_AORUS_GAMING_3);
            Motherboard B360M_AORUS_GAMING_3 = new Motherboard() { Id = 63, Name = "B360M AORUS GAMING 3", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 160, SellPrice = 53, LevelUnlock = 16, LevelPercent = 10, Lighting = Color.RGB, MoboChipset = B360, CPUSocket = LGA_1151__Coffee_Lake_, Size = Micro_ATX, MaxRamSpeed = 2666, DualGPUMaxSlotSize = 3, Overclockable = false, M2Slots = 2, M2SlotsSupportingHeatsinks = 2, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; B360M_AORUS_GAMING_3.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(B360M_AORUS_GAMING_3);
            Motherboard B360N_AORUS_GAMING_WIFI = new Motherboard() { Id = 64, Name = "B360N AORUS GAMING WIFI", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 120, SellPrice = 40, LevelUnlock = 16, LevelPercent = 20, Lighting = Color.RGB, MoboChipset = B360, CPUSocket = LGA_1151__Coffee_Lake_, Size = Mini_ITX, MaxRamSpeed = 2666, DualGPUMaxSlotSize = 0, Overclockable = false, M2Slots = 1, M2SlotsSupportingHeatsinks = 0, RamSlots = 2, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; motherboards.Add(B360N_AORUS_GAMING_WIFI);
            Motherboard B450_AORUS_M = new Motherboard() { Id = 65, Name = "B450 AORUS M", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 85, SellPrice = 28, LevelUnlock = 18, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = B450, CPUSocket = AM4, Size = Micro_ATX, MaxRamSpeed = 3200, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 1, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; B450_AORUS_M.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(B450_AORUS_M);
            Motherboard GA_AB350_Gaming_3 = new Motherboard() { Id = 66, Name = "GA-AB350-Gaming 3", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 110, SellPrice = 37, LevelUnlock = 7, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = B350, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 3200, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 1, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 2400, MinRamSpeed = 2133 }; GA_AB350_Gaming_3.MultiGPUs.AddRange(new[] { CrossFire }); motherboards.Add(GA_AB350_Gaming_3);
            Motherboard GA_AB350M_Gaming_3 = new Motherboard() { Id = 67, Name = "GA-AB350M-Gaming 3", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 85, SellPrice = 28, LevelUnlock = 7, LevelPercent = 15, Lighting = null, MoboChipset = B350, CPUSocket = AM4, Size = Micro_ATX, MaxRamSpeed = 3200, DualGPUMaxSlotSize = 0, Overclockable = true, M2Slots = 1, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2400, MinRamSpeed = 2133 }; motherboards.Add(GA_AB350M_Gaming_3);
            Motherboard GA_AX370_Gaming_5 = new Motherboard() { Id = 68, Name = "GA-AX370-Gaming 5", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 185, SellPrice = 62, LevelUnlock = 7, LevelPercent = 25, Lighting = Color.RGB, MoboChipset = X370, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 3200, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 1, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2400, MinRamSpeed = 2133 }; GA_AX370_Gaming_5.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(GA_AX370_Gaming_5);
            Motherboard GA_AX370_Gaming_K7 = new Motherboard() { Id = 69, Name = "GA-AX370-Gaming K7", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 210, SellPrice = 70, LevelUnlock = 7, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = X370, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 3600, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 1, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2400, MinRamSpeed = 2133 }; GA_AX370_Gaming_K7.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(GA_AX370_Gaming_K7);
            Motherboard GA_B250M_Gaming_5 = new Motherboard() { Id = 70, Name = "GA-B250M-Gaming 5", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 170, SellPrice = 57, LevelUnlock = 4, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = B250, CPUSocket = LGA_1151__Kaby_Lake_, Size = Micro_ATX, MaxRamSpeed = 2400, DualGPUMaxSlotSize = 2, Overclockable = false, M2Slots = 1, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2400, MinRamSpeed = 2133 }; GA_B250M_Gaming_5.MultiGPUs.AddRange(new[] { CrossFire }); motherboards.Add(GA_B250M_Gaming_5);
            Motherboard GA_Z270X_Gaming_8 = new Motherboard() { Id = 71, Name = "GA-Z270X-Gaming 8", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 430, SellPrice = 143, LevelUnlock = 19, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = Z270, CPUSocket = LGA_1151__Kaby_Lake_, Size = S_ATX, MaxRamSpeed = 4133, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 2, RamSlots = 4, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 2400, MinRamSpeed = 2133 }; GA_Z270X_Gaming_8.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(GA_Z270X_Gaming_8);
            Motherboard H370_AORUS_GAMING_3 = new Motherboard() { Id = 72, Name = "H370 AORUS GAMING 3", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 140, SellPrice = 47, LevelUnlock = 16, LevelPercent = 60, Lighting = Color.RGB, MoboChipset = H370, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 2666, DualGPUMaxSlotSize = 3, Overclockable = false, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; H370_AORUS_GAMING_3.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(H370_AORUS_GAMING_3);
            Motherboard TRX40_AORUS_MASTER__rev__1_0_ = new Motherboard() { Id = 73, Name = "TRX40 AORUS MASTER (rev. 1.0)", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 500, SellPrice = 167, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = TRX40, CPUSocket = sTRX4, Size = E_ATX, MaxRamSpeed = 4400, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 0, RamSlots = 8, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; TRX40_AORUS_MASTER__rev__1_0_.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(TRX40_AORUS_MASTER__rev__1_0_);
            Motherboard TRX40_AORUS_PRO_WIFI__rev__1_0_ = new Motherboard() { Id = 74, Name = "TRX40 AORUS PRO WIFI (rev. 1.0)", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 400, SellPrice = 133, LevelUnlock = 31, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = TRX40, CPUSocket = sTRX4, Size = S_ATX, MaxRamSpeed = 4400, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 0, RamSlots = 8, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; TRX40_AORUS_PRO_WIFI__rev__1_0_.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(TRX40_AORUS_PRO_WIFI__rev__1_0_);
            Motherboard TRX40_AORUS_XTREME__rev__1_0_ = new Motherboard() { Id = 75, Name = "TRX40 AORUS XTREME (rev. 1.0)", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 850, SellPrice = 283, LevelUnlock = 31, LevelPercent = 60, Lighting = Color.RGB, MoboChipset = TRX40, CPUSocket = sTRX4, Size = XL_ATX, MaxRamSpeed = 4400, DualGPUMaxSlotSize = 2, Overclockable = true, M2Slots = 4, M2SlotsSupportingHeatsinks = 0, RamSlots = 8, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; TRX40_AORUS_XTREME__rev__1_0_.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(TRX40_AORUS_XTREME__rev__1_0_);
            Motherboard TRX40_DESIGNARE__rev__1_0_ = new Motherboard() { Id = 76, Name = "TRX40 DESIGNARE (rev. 1.0)", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 630, SellPrice = 210, LevelUnlock = 31, LevelPercent = 30, Lighting = Color.RGB, MoboChipset = TRX40, CPUSocket = sTRX4, Size = XL_ATX, MaxRamSpeed = 4400, DualGPUMaxSlotSize = 2, Overclockable = true, M2Slots = 4, M2SlotsSupportingHeatsinks = 0, RamSlots = 8, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; TRX40_DESIGNARE__rev__1_0_.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(TRX40_DESIGNARE__rev__1_0_);
            Motherboard X299_AORUS_Gaming_9 = new Motherboard() { Id = 77, Name = "X299 AORUS Gaming 9", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 400, SellPrice = 133, LevelUnlock = 28, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = X299, CPUSocket = LGA_2066, Size = S_ATX, MaxRamSpeed = 4400, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 0, RamSlots = 8, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2400, MinRamSpeed = 2133 }; X299_AORUS_Gaming_9.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(X299_AORUS_Gaming_9);
            Motherboard X299_DESIGNARE_EX = new Motherboard() { Id = 78, Name = "X299 DESIGNARE EX", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 330, SellPrice = 110, LevelUnlock = 29, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = X299, CPUSocket = LGA_2066, Size = S_ATX, MaxRamSpeed = 4400, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 0, RamSlots = 8, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2400, MinRamSpeed = 2133 }; X299_DESIGNARE_EX.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(X299_DESIGNARE_EX);
            Motherboard X399_AORUS_Gaming_7 = new Motherboard() { Id = 79, Name = "X399 AORUS Gaming 7", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 390, SellPrice = 130, LevelUnlock = 22, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = X399, CPUSocket = TR4, Size = S_ATX, MaxRamSpeed = 3600, DualGPUMaxSlotSize = 4, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 3, RamSlots = 8, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; X399_AORUS_Gaming_7.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(X399_AORUS_Gaming_7);
            Motherboard X399_DESIGNARE_EX = new Motherboard() { Id = 80, Name = "X399 DESIGNARE EX", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 400, SellPrice = 133, LevelUnlock = 23, LevelPercent = 40, Lighting = Color.RGB, MoboChipset = X399, CPUSocket = TR4, Size = S_ATX, MaxRamSpeed = 3600, DualGPUMaxSlotSize = 4, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 2, RamSlots = 8, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; X399_DESIGNARE_EX.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(X399_DESIGNARE_EX);
            Motherboard X470_AORUS_GAMING_7_WIFI = new Motherboard() { Id = 81, Name = "X470 AORUS GAMING 7 WIFI", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 240, SellPrice = 80, LevelUnlock = 19, LevelPercent = 60, Lighting = Color.RGB, MoboChipset = X470, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 3600, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 2, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; X470_AORUS_GAMING_7_WIFI.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(X470_AORUS_GAMING_7_WIFI);
            Motherboard X570_AORUS_ELITE_WIFI__rev_1_0_ = new Motherboard() { Id = 82, Name = "X570 AORUS ELITE WIFI (rev 1.0)", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 210, SellPrice = 70, LevelUnlock = 30, LevelPercent = 30, Lighting = Color.RGB, MoboChipset = X570, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 4000, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; X570_AORUS_ELITE_WIFI__rev_1_0_.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(X570_AORUS_ELITE_WIFI__rev_1_0_);
            Motherboard X570_AORUS_MASTER__rev_1_0_ = new Motherboard() { Id = 83, Name = "X570 AORUS MASTER (rev 1.0)", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 360, SellPrice = 120, LevelUnlock = 30, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = X570, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 4400, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; X570_AORUS_MASTER__rev_1_0_.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(X570_AORUS_MASTER__rev_1_0_);
            Motherboard X570_AORUS_PRO_WIFI__rev_1_0_ = new Motherboard() { Id = 84, Name = "X570 AORUS PRO WIFI (rev 1.0)", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 270, SellPrice = 90, LevelUnlock = 30, LevelPercent = 15, Lighting = Color.RGB, MoboChipset = X570, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 4400, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; X570_AORUS_PRO_WIFI__rev_1_0_.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(X570_AORUS_PRO_WIFI__rev_1_0_);
            Motherboard X570_AORUS_ULTRA__rev_1_0_ = new Motherboard() { Id = 85, Name = "X570 AORUS ULTRA (rev 1.0)", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 300, SellPrice = 100, LevelUnlock = 30, LevelPercent = 30, Lighting = Color.RGB, MoboChipset = X570, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 4400, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; X570_AORUS_ULTRA__rev_1_0_.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(X570_AORUS_ULTRA__rev_1_0_);
            Motherboard X570_AORUS_XTREME_rev_1_0_ = new Motherboard() { Id = 86, Name = "X570 AORUS XTREME(rev 1.0)", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 700, SellPrice = 233, LevelUnlock = 30, LevelPercent = 25, Lighting = Color.RGB, MoboChipset = X570, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 4400, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; X570_AORUS_XTREME_rev_1_0_.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(X570_AORUS_XTREME_rev_1_0_);
            Motherboard X570_Gaming_X = new Motherboard() { Id = 87, Name = "X570 Gaming X", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 170, SellPrice = 57, LevelUnlock = 30, LevelPercent = 1, Lighting = null, MoboChipset = X570, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 4400, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; X570_Gaming_X.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(X570_Gaming_X);
            Motherboard X570I_AORUS_PRO_WIFI__rev_1_0_ = new Motherboard() { Id = 88, Name = "X570I AORUS PRO WIFI (rev 1.0)", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 220, SellPrice = 73, LevelUnlock = 30, LevelPercent = 15, Lighting = Color.RGB, MoboChipset = X570, CPUSocket = AM4, Size = Mini_ITX, MaxRamSpeed = 4400, DualGPUMaxSlotSize = 0, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 2, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; motherboards.Add(X570I_AORUS_PRO_WIFI__rev_1_0_);
            Motherboard Z370_AORUS_Gaming_7 = new Motherboard() { Id = 89, Name = "Z370 AORUS Gaming 7", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 250, SellPrice = 83, LevelUnlock = 20, LevelPercent = 20, Lighting = Color.RGB, MoboChipset = Z370, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 4133, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 3, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; Z370_AORUS_Gaming_7.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(Z370_AORUS_Gaming_7);
            Motherboard Z370_AORUS_Ultra_Gaming = new Motherboard() { Id = 90, Name = "Z370 AORUS Ultra Gaming", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 170, SellPrice = 57, LevelUnlock = 16, LevelPercent = 20, Lighting = Color.RGB, MoboChipset = Z370, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 4000, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 2, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; Z370_AORUS_Ultra_Gaming.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(Z370_AORUS_Ultra_Gaming);
            Motherboard Z490_AORUS_XTREME = new Motherboard() { Id = 91, Name = "Z490 AORUS XTREME", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 800, SellPrice = 267, LevelUnlock = 34, LevelPercent = 10, Lighting = Color.RGB, MoboChipset = Z490, CPUSocket = LGA_1200, Size = E_ATX, MaxRamSpeed = 5000, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2933, MinRamSpeed = 2133 }; Z490_AORUS_XTREME.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(Z490_AORUS_XTREME);
            Motherboard Z490_AORUS_XTREME_WATERFORCE = new Motherboard() { Id = 92, Name = "Z490 AORUS XTREME WATERFORCE", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 1250, SellPrice = 417, LevelUnlock = 34, LevelPercent = 10, Lighting = Color.RGB, MoboChipset = Z490, CPUSocket = LGA_1200, Size = E_ATX, MaxRamSpeed = 5000, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = true, DefaultRamSpeed = 2933, MinRamSpeed = 2133 }; Z490_AORUS_XTREME_WATERFORCE.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(Z490_AORUS_XTREME_WATERFORCE);
            Motherboard Z590_AORUS_ULTRA = new Motherboard() { Id = 93, Name = "Z590 AORUS ULTRA", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 400, SellPrice = 133, LevelUnlock = 34, LevelPercent = 10, Lighting = null, MoboChipset = Z590, CPUSocket = LGA_1200, Size = S_ATX, MaxRamSpeed = 5400, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2933, MinRamSpeed = 2133 }; Z590_AORUS_ULTRA.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(Z590_AORUS_ULTRA);
            Motherboard Z590_AORUS_XTREME_WATERFORCE = new Motherboard() { Id = 94, Name = "Z590 AORUS XTREME WATERFORCE", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 2000, SellPrice = 667, LevelUnlock = 34, LevelPercent = 10, Lighting = Color.RGB, MoboChipset = Z590, CPUSocket = LGA_1200, Size = E_ATX, MaxRamSpeed = 5400, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = true, DefaultRamSpeed = 2933, MinRamSpeed = 2133 }; Z590_AORUS_XTREME_WATERFORCE.MultiGPUs.AddRange(new[] { CrossFire }); motherboards.Add(Z590_AORUS_XTREME_WATERFORCE);
            Motherboard Z590_VISION_G = new Motherboard() { Id = 95, Name = "Z590 VISION G", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 280, SellPrice = 93, LevelUnlock = 34, LevelPercent = 10, Lighting = null, MoboChipset = Z590, CPUSocket = LGA_1200, Size = S_ATX, MaxRamSpeed = 4800, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 4, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2933, MinRamSpeed = 2133 }; Z590_VISION_G.MultiGPUs.AddRange(new[] { CrossFire }); motherboards.Add(Z590_VISION_G);
            Motherboard Z590I_VISION_D = new Motherboard() { Id = 96, Name = "Z590I VISION D", PartType = PartType.Motherboard, Manufacturer = GIGABYTE, Price = 390, SellPrice = 130, LevelUnlock = 34, LevelPercent = 10, Lighting = null, MoboChipset = Z590, CPUSocket = LGA_1200, Size = Mini_ITX, MaxRamSpeed = 4600, DualGPUMaxSlotSize = 0, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 2, RamSlots = 2, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 2933, MinRamSpeed = 2133 }; motherboards.Add(Z590I_VISION_D);
            Motherboard A320M_Mtech_plus = new Motherboard() { Id = 97, Name = "A320M Mtech plus", PartType = PartType.Motherboard, Manufacturer = Mortoni, Price = 150, SellPrice = 50, LevelUnlock = 3, LevelPercent = 1, Lighting = null, MoboChipset = A320, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 3600, DualGPUMaxSlotSize = 0, Overclockable = false, M2Slots = 0, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2133, MinRamSpeed = 2133 }; motherboards.Add(A320M_Mtech_plus);
            Motherboard H170_Mtech = new Motherboard() { Id = 98, Name = "H170 Mtech", PartType = PartType.Motherboard, Manufacturer = Mortoni, Price = 100, SellPrice = 33, LevelUnlock = 1, LevelPercent = 1, Lighting = null, MoboChipset = H170, CPUSocket = LGA_1151__Skylake_, Size = S_ATX, MaxRamSpeed = 2666, DualGPUMaxSlotSize = 0, Overclockable = false, M2Slots = 0, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2133, MinRamSpeed = 2133 }; motherboards.Add(H170_Mtech);
            Motherboard H170_Mtech_plus = new Motherboard() { Id = 99, Name = "H170 Mtech plus", PartType = PartType.Motherboard, Manufacturer = Mortoni, Price = 150, SellPrice = 50, LevelUnlock = 1, LevelPercent = 1, Lighting = null, MoboChipset = H170, CPUSocket = LGA_1151__Skylake_, Size = S_ATX, MaxRamSpeed = 2800, DualGPUMaxSlotSize = 0, Overclockable = false, M2Slots = 0, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2133, MinRamSpeed = 2133 }; motherboards.Add(H170_Mtech_plus);
            Motherboard B450_TOMAHAWK = new Motherboard() { Id = 100, Name = "B450 TOMAHAWK", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 150, SellPrice = 50, LevelUnlock = 19, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = B450, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 3466, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 1, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2400, MinRamSpeed = 1866 }; B450_TOMAHAWK.MultiGPUs.AddRange(new[] { CrossFire }); motherboards.Add(B450_TOMAHAWK);
            Motherboard B450I_GAMING_PLUS_AC = new Motherboard() { Id = 101, Name = "B450I GAMING PLUS AC", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 180, SellPrice = 60, LevelUnlock = 20, LevelPercent = 60, Lighting = null, MoboChipset = B450, CPUSocket = AM4, Size = Mini_ITX, MaxRamSpeed = 3466, DualGPUMaxSlotSize = 0, Overclockable = true, M2Slots = 1, M2SlotsSupportingHeatsinks = 0, RamSlots = 2, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 2400, MinRamSpeed = 1866 }; motherboards.Add(B450I_GAMING_PLUS_AC);
            Motherboard B450M_Mortar_Max = new Motherboard() { Id = 102, Name = "B450M Mortar Max", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 200, SellPrice = 67, LevelUnlock = 18, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = B450, CPUSocket = AM4, Size = Micro_ATX, MaxRamSpeed = 4133, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 2, RamSlots = 4, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; B450M_Mortar_Max.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(B450M_Mortar_Max);
            Motherboard Creator_TRX40 = new Motherboard() { Id = 103, Name = "Creator TRX40", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 700, SellPrice = 233, LevelUnlock = 32, LevelPercent = 80, Lighting = Color.RGB, MoboChipset = TRX40, CPUSocket = sTRX4, Size = E_ATX, MaxRamSpeed = 4666, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 0, RamSlots = 8, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; Creator_TRX40.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(Creator_TRX40);
            Motherboard MAG_B460_TOMAHAWK = new Motherboard() { Id = 104, Name = "MAG B460 TOMAHAWK", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 140, SellPrice = 47, LevelUnlock = 32, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = B460, CPUSocket = LGA_1200, Size = S_ATX, MaxRamSpeed = 2933, DualGPUMaxSlotSize = 3, Overclockable = false, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2933, MinRamSpeed = 2133 }; MAG_B460_TOMAHAWK.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(MAG_B460_TOMAHAWK);
            Motherboard MAG_B460M_BAZOOKA = new Motherboard() { Id = 105, Name = "MAG B460M BAZOOKA", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 105, SellPrice = 35, LevelUnlock = 32, LevelPercent = 1, Lighting = null, MoboChipset = B460, CPUSocket = LGA_1200, Size = Micro_ATX, MaxRamSpeed = 2933, DualGPUMaxSlotSize = 0, Overclockable = false, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 2933, MinRamSpeed = 2133 }; motherboards.Add(MAG_B460M_BAZOOKA);
            Motherboard MAG_B550_TOMAHAWK = new Motherboard() { Id = 106, Name = "MAG B550 TOMAHAWK", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 200, SellPrice = 67, LevelUnlock = 32, LevelPercent = 40, Lighting = Color.RGB, MoboChipset = B550, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 4866, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; MAG_B550_TOMAHAWK.MultiGPUs.AddRange(new[] { CrossFire }); motherboards.Add(MAG_B550_TOMAHAWK);
            Motherboard MAG_B550M_BAZOOKA = new Motherboard() { Id = 107, Name = "MAG B550M BAZOOKA", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 125, SellPrice = 42, LevelUnlock = 32, LevelPercent = 40, Lighting = null, MoboChipset = B550, CPUSocket = AM4, Size = Micro_ATX, MaxRamSpeed = 4400, DualGPUMaxSlotSize = 0, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; motherboards.Add(MAG_B550M_BAZOOKA);
            Motherboard MAG_B550M_MORTAR_WIFI = new Motherboard() { Id = 108, Name = "MAG B550M MORTAR WIFI", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 175, SellPrice = 58, LevelUnlock = 32, LevelPercent = 40, Lighting = null, MoboChipset = B550, CPUSocket = AM4, Size = Micro_ATX, MaxRamSpeed = 4400, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; MAG_B550M_MORTAR_WIFI.MultiGPUs.AddRange(new[] { CrossFire }); motherboards.Add(MAG_B550M_MORTAR_WIFI);
            Motherboard MAG_Z390_TOMAHAWK = new Motherboard() { Id = 109, Name = "MAG Z390 TOMAHAWK", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 210, SellPrice = 70, LevelUnlock = 26, LevelPercent = 20, Lighting = Color.RGB, MoboChipset = Z390, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 4400, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; MAG_Z390_TOMAHAWK.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(MAG_Z390_TOMAHAWK);
            Motherboard MAG_Z590_TOMAHAWK_WIFI = new Motherboard() { Id = 110, Name = "MAG Z590 TOMAHAWK WIFI", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 285, SellPrice = 95, LevelUnlock = 34, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = Z590, CPUSocket = LGA_1200, Size = S_ATX, MaxRamSpeed = 5333, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 2933, MinRamSpeed = 2133 }; MAG_Z590_TOMAHAWK_WIFI.MultiGPUs.AddRange(new[] { CrossFire }); motherboards.Add(MAG_Z590_TOMAHAWK_WIFI);
            Motherboard MAG_Z590_TORPEDO = new Motherboard() { Id = 111, Name = "MAG Z590 TORPEDO", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 240, SellPrice = 80, LevelUnlock = 34, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = Z590, CPUSocket = LGA_1200, Size = S_ATX, MaxRamSpeed = 5333, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2933, MinRamSpeed = 2166 }; MAG_Z590_TORPEDO.MultiGPUs.AddRange(new[] { CrossFire }); motherboards.Add(MAG_Z590_TORPEDO);
            Motherboard MEG_B550_UNIFY_X = new Motherboard() { Id = 112, Name = "MEG B550 UNIFY-X", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 300, SellPrice = 100, LevelUnlock = 32, LevelPercent = 40, Lighting = null, MoboChipset = B550, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 5300, DualGPUMaxSlotSize = 0, Overclockable = true, M2Slots = 4, M2SlotsSupportingHeatsinks = 0, RamSlots = 2, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2667 }; MEG_B550_UNIFY_X.MultiGPUs.AddRange(new[] { CrossFire }); motherboards.Add(MEG_B550_UNIFY_X);
            Motherboard MEG_X570_ACE = new Motherboard() { Id = 113, Name = "MEG X570 ACE", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 370, SellPrice = 123, LevelUnlock = 32, LevelPercent = 60, Lighting = Color.RGB, MoboChipset = X570, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 5000, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 1866 }; MEG_X570_ACE.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(MEG_X570_ACE);
            Motherboard MEG_X570_Godlike = new Motherboard() { Id = 114, Name = "MEG X570 Godlike", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 700, SellPrice = 233, LevelUnlock = 32, LevelPercent = 20, Lighting = Color.RGB, MoboChipset = X570, CPUSocket = AM4, Size = E_ATX, MaxRamSpeed = 5000, DualGPUMaxSlotSize = 4, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; MEG_X570_Godlike.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(MEG_X570_Godlike);
            Motherboard MEG_X570_UNIFY = new Motherboard() { Id = 115, Name = "MEG X570 UNIFY", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 300, SellPrice = 100, LevelUnlock = 32, LevelPercent = 60, Lighting = null, MoboChipset = X570, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 5000, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 1866 }; MEG_X570_UNIFY.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(MEG_X570_UNIFY);
            Motherboard MEG_Z390_ACE = new Motherboard() { Id = 116, Name = "MEG Z390 ACE", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 280, SellPrice = 93, LevelUnlock = 26, LevelPercent = 20, Lighting = Color.RGB, MoboChipset = Z390, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 4500, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 2, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; MEG_Z390_ACE.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(MEG_Z390_ACE);
            Motherboard MEG_Z490I_Unify = new Motherboard() { Id = 117, Name = "MEG Z490I Unify", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 270, SellPrice = 90, LevelUnlock = 32, LevelPercent = 40, Lighting = null, MoboChipset = Z490, CPUSocket = LGA_1200, Size = Mini_ITX, MaxRamSpeed = 5000, DualGPUMaxSlotSize = 0, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 2, SATASlots = 2, IncludesCPUBlock = false, DefaultRamSpeed = 2933, MinRamSpeed = 2133 }; motherboards.Add(MEG_Z490I_Unify);
            Motherboard MEG_Z590_ACE = new Motherboard() { Id = 118, Name = "MEG Z590 ACE", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 500, SellPrice = 167, LevelUnlock = 34, LevelPercent = 30, Lighting = Color.RGB, MoboChipset = Z590, CPUSocket = LGA_1200, Size = S_ATX, MaxRamSpeed = 5600, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 4, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2933, MinRamSpeed = 2133 }; MEG_Z590_ACE.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(MEG_Z590_ACE);
            Motherboard MPG_B550_GAMING_CARBON_WIFI = new Motherboard() { Id = 119, Name = "MPG B550 GAMING CARBON WIFI", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 230, SellPrice = 77, LevelUnlock = 32, LevelPercent = 40, Lighting = Color.RGB, MoboChipset = B550, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 5100, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 1866 }; MPG_B550_GAMING_CARBON_WIFI.MultiGPUs.AddRange(new[] { CrossFire }); motherboards.Add(MPG_B550_GAMING_CARBON_WIFI);
            Motherboard MPG_B550_Gaming_EDGE_Wifi = new Motherboard() { Id = 120, Name = "MPG B550 Gaming EDGE Wifi", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 190, SellPrice = 63, LevelUnlock = 32, LevelPercent = 30, Lighting = Color.RGB, MoboChipset = B550, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 5100, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 1866 }; MPG_B550_Gaming_EDGE_Wifi.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(MPG_B550_Gaming_EDGE_Wifi);
            Motherboard MPG_B550I_GAMING_EDGE_WIFI = new Motherboard() { Id = 121, Name = "MPG B550I GAMING EDGE WIFI", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 200, SellPrice = 67, LevelUnlock = 32, LevelPercent = 40, Lighting = null, MoboChipset = B550, CPUSocket = AM4, Size = Mini_ITX, MaxRamSpeed = 4600, DualGPUMaxSlotSize = 0, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 2, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 1866 }; motherboards.Add(MPG_B550I_GAMING_EDGE_WIFI);
            Motherboard MPG_X570_GAMING_EDGE_WIFI = new Motherboard() { Id = 122, Name = "MPG X570 GAMING EDGE WIFI", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 360, SellPrice = 120, LevelUnlock = 31, LevelPercent = 20, Lighting = Color.RGB, MoboChipset = X570, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 4400, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; MPG_X570_GAMING_EDGE_WIFI.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(MPG_X570_GAMING_EDGE_WIFI);
            Motherboard MPG_X570_Gaming_Plus = new Motherboard() { Id = 123, Name = "MPG X570 Gaming Plus", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 170, SellPrice = 57, LevelUnlock = 32, LevelPercent = 60, Lighting = null, MoboChipset = X570, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 4400, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 1866 }; MPG_X570_Gaming_Plus.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(MPG_X570_Gaming_Plus);
            Motherboard MPG_X570_GAMING_PRO_CARBON_WIFI = new Motherboard() { Id = 124, Name = "MPG X570 GAMING PRO CARBON WIFI", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 375, SellPrice = 125, LevelUnlock = 31, LevelPercent = 20, Lighting = Color.RGB, MoboChipset = X570, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 4400, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; MPG_X570_GAMING_PRO_CARBON_WIFI.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(MPG_X570_GAMING_PRO_CARBON_WIFI);
            Motherboard MPG_Z390_GAMING_EDGE_AC = new Motherboard() { Id = 125, Name = "MPG Z390 GAMING EDGE AC", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 190, SellPrice = 63, LevelUnlock = 26, LevelPercent = 20, Lighting = Color.RGB, MoboChipset = Z390, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 4400, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 2, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; MPG_Z390_GAMING_EDGE_AC.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(MPG_Z390_GAMING_EDGE_AC);
            Motherboard MPG_Z390_GAMING_PRO_CARBON = new Motherboard() { Id = 126, Name = "MPG Z390 GAMING PRO CARBON", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 200, SellPrice = 67, LevelUnlock = 21, LevelPercent = 20, Lighting = Color.RGB, MoboChipset = Z390, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 4400, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; MPG_Z390_GAMING_PRO_CARBON.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(MPG_Z390_GAMING_PRO_CARBON);
            Motherboard MPG_Z490_Gaming_Carbon_Wifi = new Motherboard() { Id = 127, Name = "MPG Z490 Gaming Carbon Wifi", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 270, SellPrice = 90, LevelUnlock = 32, LevelPercent = 40, Lighting = Color.RGB, MoboChipset = Z490, CPUSocket = LGA_1200, Size = S_ATX, MaxRamSpeed = 5000, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2933, MinRamSpeed = 2133 }; MPG_Z490_Gaming_Carbon_Wifi.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(MPG_Z490_Gaming_Carbon_Wifi);
            Motherboard MPG_Z490M_Gaming_Edge_Wifi = new Motherboard() { Id = 128, Name = "MPG Z490M Gaming Edge Wifi", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 190, SellPrice = 63, LevelUnlock = 32, LevelPercent = 40, Lighting = Color.RGB, MoboChipset = Z490, CPUSocket = LGA_1200, Size = Micro_ATX, MaxRamSpeed = 4800, DualGPUMaxSlotSize = 2, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 2, RamSlots = 4, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 2933, MinRamSpeed = 2133 }; MPG_Z490M_Gaming_Edge_Wifi.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(MPG_Z490M_Gaming_Edge_Wifi);
            Motherboard MPG_Z590_CARBON_EK_X = new Motherboard() { Id = 129, Name = "MPG Z590 CARBON EK X", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 510, SellPrice = 170, LevelUnlock = 34, LevelPercent = 80, Lighting = Color.RGB, MoboChipset = Z590, CPUSocket = LGA_1200, Size = S_ATX, MaxRamSpeed = 5333, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = true, DefaultRamSpeed = 2933, MinRamSpeed = 2133 }; MPG_Z590_CARBON_EK_X.MultiGPUs.AddRange(new[] { CrossFire }); motherboards.Add(MPG_Z590_CARBON_EK_X);
            Motherboard MPG_Z590_GAMING_CARBON_WIFI = new Motherboard() { Id = 130, Name = "MPG Z590 GAMING CARBON WIFI", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 425, SellPrice = 142, LevelUnlock = 34, LevelPercent = 30, Lighting = Color.RGB, MoboChipset = Z590, CPUSocket = LGA_1200, Size = S_ATX, MaxRamSpeed = 5333, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2933, MinRamSpeed = 2133 }; MPG_Z590_GAMING_CARBON_WIFI.MultiGPUs.AddRange(new[] { CrossFire }); motherboards.Add(MPG_Z590_GAMING_CARBON_WIFI);
            Motherboard Prestige_X570_Creation = new Motherboard() { Id = 131, Name = "Prestige X570 Creation", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 500, SellPrice = 167, LevelUnlock = 32, LevelPercent = 70, Lighting = Color.RGB, MoboChipset = X570, CPUSocket = AM4, Size = E_ATX, MaxRamSpeed = 5000, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 1866 }; Prestige_X570_Creation.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(Prestige_X570_Creation);
            Motherboard TRX40_PRO_10G = new Motherboard() { Id = 132, Name = "TRX40 PRO 10G", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 450, SellPrice = 150, LevelUnlock = 32, LevelPercent = 80, Lighting = null, MoboChipset = TRX40, CPUSocket = sTRX4, Size = S_ATX, MaxRamSpeed = 4666, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 8, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; TRX40_PRO_10G.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(TRX40_PRO_10G);
            Motherboard TRX40_PRO_Wifi = new Motherboard() { Id = 133, Name = "TRX40 PRO Wifi", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 400, SellPrice = 133, LevelUnlock = 31, LevelPercent = 80, Lighting = null, MoboChipset = TRX40, CPUSocket = sTRX4, Size = S_ATX, MaxRamSpeed = 4666, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 8, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 2133 }; TRX40_PRO_Wifi.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(TRX40_PRO_Wifi);
            Motherboard X399_Gaming_Pro_Carbon_AC = new Motherboard() { Id = 134, Name = "X399 Gaming Pro Carbon AC", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 380, SellPrice = 126, LevelUnlock = 22, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = X399, CPUSocket = TR4, Size = S_ATX, MaxRamSpeed = 3600, DualGPUMaxSlotSize = 4, Overclockable = true, M2Slots = 3, M2SlotsSupportingHeatsinks = 3, RamSlots = 8, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; X399_Gaming_Pro_Carbon_AC.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(X399_Gaming_Pro_Carbon_AC);
            Motherboard X570_A_PRO = new Motherboard() { Id = 135, Name = "X570-A PRO", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 160, SellPrice = 53, LevelUnlock = 30, LevelPercent = 1, Lighting = null, MoboChipset = X570, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 4400, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 2, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 3200, MinRamSpeed = 1866 }; X570_A_PRO.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(X570_A_PRO);
            Motherboard Z270_Gaming_Pro_Carbon = new Motherboard() { Id = 136, Name = "Z270 Gaming Pro Carbon", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 175, SellPrice = 58, LevelUnlock = 7, LevelPercent = 1, Lighting = Color.RGB, MoboChipset = Z270, CPUSocket = LGA_1151__Kaby_Lake_, Size = S_ATX, MaxRamSpeed = 3800, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 2, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2400, MinRamSpeed = 2133 }; Z270_Gaming_Pro_Carbon.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(Z270_Gaming_Pro_Carbon);
            Motherboard Z370_Gaming_Pro_Carbon = new Motherboard() { Id = 137, Name = "Z370 Gaming Pro Carbon", PartType = PartType.Motherboard, Manufacturer = MSI, Price = 190, SellPrice = 63, LevelUnlock = 17, LevelPercent = 45, Lighting = Color.RGB, MoboChipset = Z370, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 4000, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 2, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; Z370_Gaming_Pro_Carbon.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(Z370_Gaming_Pro_Carbon);
            Motherboard N7_B550__Black_ = new Motherboard() { Id = 138, Name = "N7 B550 (Black)", PartType = PartType.Motherboard, Manufacturer = NZXT, Price = 250, SellPrice = 83, LevelUnlock = 34, LevelPercent = 1, Lighting = null, MoboChipset = B550, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 4733, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2933, MinRamSpeed = 2133 }; N7_B550__Black_.MultiGPUs.AddRange(new[] { CrossFire }); motherboards.Add(N7_B550__Black_);
            Motherboard N7_B550__White_ = new Motherboard() { Id = 139, Name = "N7 B550 (White)", PartType = PartType.Motherboard, Manufacturer = NZXT, Price = 250, SellPrice = 83, LevelUnlock = 34, LevelPercent = 1, Lighting = null, MoboChipset = B550, CPUSocket = AM4, Size = S_ATX, MaxRamSpeed = 4733, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 6, IncludesCPUBlock = false, DefaultRamSpeed = 2933, MinRamSpeed = 2133 }; N7_B550__White_.MultiGPUs.AddRange(new[] { CrossFire }); motherboards.Add(N7_B550__White_);
            Motherboard N7_Z370__Black_ = new Motherboard() { Id = 140, Name = "N7 Z370 (Black)", PartType = PartType.Motherboard, Manufacturer = NZXT, Price = 240, SellPrice = 80, LevelUnlock = 16, LevelPercent = 60, Lighting = null, MoboChipset = Z370, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 3866, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 2, RamSlots = 4, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; N7_Z370__Black_.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(N7_Z370__Black_);
            Motherboard N7_Z370__White_ = new Motherboard() { Id = 141, Name = "N7 Z370 (White)", PartType = PartType.Motherboard, Manufacturer = NZXT, Price = 240, SellPrice = 80, LevelUnlock = 16, LevelPercent = 40, Lighting = null, MoboChipset = Z370, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 3866, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 2, RamSlots = 4, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; N7_Z370__White_.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(N7_Z370__White_);
            Motherboard N7_Z390__Black_ = new Motherboard() { Id = 142, Name = "N7 Z390 (Black)", PartType = PartType.Motherboard, Manufacturer = NZXT, Price = 275, SellPrice = 92, LevelUnlock = 20, LevelPercent = 1, Lighting = null, MoboChipset = Z390, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 3866, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; N7_Z390__Black_.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(N7_Z390__Black_);
            Motherboard N7_Z390__White_ = new Motherboard() { Id = 143, Name = "N7 Z390 (White)", PartType = PartType.Motherboard, Manufacturer = NZXT, Price = 275, SellPrice = 92, LevelUnlock = 20, LevelPercent = 20, Lighting = null, MoboChipset = Z390, CPUSocket = LGA_1151__Coffee_Lake_, Size = S_ATX, MaxRamSpeed = 3866, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 1, RamSlots = 4, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 2666, MinRamSpeed = 2133 }; N7_Z390__White_.MultiGPUs.AddRange(new[] { CrossFire, SLI }); motherboards.Add(N7_Z390__White_);
            Motherboard N7_Z590__Black_ = new Motherboard() { Id = 144, Name = "N7 Z590 (Black)", PartType = PartType.Motherboard, Manufacturer = NZXT, Price = 300, SellPrice = 100, LevelUnlock = 34, LevelPercent = 1, Lighting = null, MoboChipset = Z590, CPUSocket = LGA_1200, Size = S_ATX, MaxRamSpeed = 4600, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 2933, MinRamSpeed = 2133 }; N7_Z590__Black_.MultiGPUs.AddRange(new[] { CrossFire }); motherboards.Add(N7_Z590__Black_);
            Motherboard N7_Z590__White_ = new Motherboard() { Id = 145, Name = "N7 Z590 (White)", PartType = PartType.Motherboard, Manufacturer = NZXT, Price = 300, SellPrice = 100, LevelUnlock = 34, LevelPercent = 1, Lighting = null, MoboChipset = Z590, CPUSocket = LGA_1200, Size = S_ATX, MaxRamSpeed = 4600, DualGPUMaxSlotSize = 3, Overclockable = true, M2Slots = 2, M2SlotsSupportingHeatsinks = 0, RamSlots = 4, SATASlots = 4, IncludesCPUBlock = false, DefaultRamSpeed = 2933, MinRamSpeed = 2133 }; N7_Z590__White_.MultiGPUs.AddRange(new[] { CrossFire }); motherboards.Add(N7_Z590__White_);
            #endregion
            _context.Motherboard.AddRange(motherboards);
            #region PSU
            List<PSU> psus = new List<PSU>();
            PSU XPG_Core_Reactor_650W = new PSU() { Id = 1, Name = "XPG Core Reactor 650W", PartType = PartType.PSU, Manufacturer = ADATA, Price = 80, SellPrice = 27, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Wattage = 650, Length = 140, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(XPG_Core_Reactor_650W);
            PSU XPG_Core_Reactor_750W = new PSU() { Id = 2, Name = "XPG Core Reactor 750W", PartType = PartType.PSU, Manufacturer = ADATA, Price = 100, SellPrice = 33, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Wattage = 750, Length = 140, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(XPG_Core_Reactor_750W);
            PSU XPG_Core_Reactor_850W = new PSU() { Id = 3, Name = "XPG Core Reactor 850W", PartType = PartType.PSU, Manufacturer = ADATA, Price = 120, SellPrice = 40, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Wattage = 850, Length = 140, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(XPG_Core_Reactor_850W);
            PSU XPG_Pylon_450W = new PSU() { Id = 4, Name = "XPG Pylon 450W", PartType = PartType.PSU, Manufacturer = ADATA, Price = 100, SellPrice = 33, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Wattage = 450, Length = 150, Type = PSUType.Non_Modular, PSUSize = ATX }; psus.Add(XPG_Pylon_450W);
            PSU XPG_Pylon_550W = new PSU() { Id = 5, Name = "XPG Pylon 550W", PartType = PartType.PSU, Manufacturer = ADATA, Price = 115, SellPrice = 38, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Wattage = 550, Length = 150, Type = PSUType.Non_Modular, PSUSize = ATX }; psus.Add(XPG_Pylon_550W);
            PSU XPG_Pylon_650W = new PSU() { Id = 6, Name = "XPG Pylon 650W", PartType = PartType.PSU, Manufacturer = ADATA, Price = 130, SellPrice = 43, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Wattage = 650, Length = 150, Type = PSUType.Non_Modular, PSUSize = ATX }; psus.Add(XPG_Pylon_650W);
            PSU XPG_Pylon_750W = new PSU() { Id = 7, Name = "XPG Pylon 750W", PartType = PartType.PSU, Manufacturer = ADATA, Price = 145, SellPrice = 48, LevelUnlock = 28, LevelPercent = 1, Lighting = null, Wattage = 750, Length = 150, Type = PSUType.Non_Modular, PSUSize = ATX }; psus.Add(XPG_Pylon_750W);
            PSU High_Current_Gamer_650W = new PSU() { Id = 8, Name = "High Current Gamer 650W", PartType = PartType.PSU, Manufacturer = Antec, Price = 100, SellPrice = 33, LevelUnlock = 27, LevelPercent = 30, Lighting = null, Wattage = 650, Length = 140, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(High_Current_Gamer_650W);
            PSU High_Current_Gamer_750W = new PSU() { Id = 9, Name = "High Current Gamer 750W", PartType = PartType.PSU, Manufacturer = Antec, Price = 125, SellPrice = 42, LevelUnlock = 27, LevelPercent = 40, Lighting = null, Wattage = 750, Length = 140, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(High_Current_Gamer_750W);
            PSU High_Current_Gamer_850W = new PSU() { Id = 10, Name = "High Current Gamer 850W", PartType = PartType.PSU, Manufacturer = Antec, Price = 150, SellPrice = 50, LevelUnlock = 27, LevelPercent = 50, Lighting = null, Wattage = 850, Length = 140, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(High_Current_Gamer_850W);
            PSU High_Current_Gamer_Extreme_Series_1000W = new PSU() { Id = 11, Name = "High Current Gamer Extreme Series 1000W", PartType = PartType.PSU, Manufacturer = Antec, Price = 250, SellPrice = 83, LevelUnlock = 27, LevelPercent = 70, Lighting = null, Wattage = 1000, Length = 160, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(High_Current_Gamer_Extreme_Series_1000W);
            PSU High_Current_Gamer_Extreme_Series_850W = new PSU() { Id = 12, Name = "High Current Gamer Extreme Series 850W", PartType = PartType.PSU, Manufacturer = Antec, Price = 200, SellPrice = 67, LevelUnlock = 27, LevelPercent = 60, Lighting = null, Wattage = 850, Length = 160, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(High_Current_Gamer_Extreme_Series_850W);
            PSU SIGNATURE_1000_PLATINUM = new PSU() { Id = 13, Name = "SIGNATURE 1000 PLATINUM", PartType = PartType.PSU, Manufacturer = Antec, Price = 365, SellPrice = 122, LevelUnlock = 32, LevelPercent = 1, Lighting = null, Wattage = 1000, Length = 170, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(SIGNATURE_1000_PLATINUM);
            PSU SIGNATURE_1000_TITANIUM = new PSU() { Id = 14, Name = "SIGNATURE 1000 TITANIUM", PartType = PartType.PSU, Manufacturer = Antec, Price = 405, SellPrice = 135, LevelUnlock = 32, LevelPercent = 1, Lighting = null, Wattage = 1000, Length = 170, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(SIGNATURE_1000_TITANIUM);
            PSU SIGNATURE_1300_PLATINUM = new PSU() { Id = 15, Name = "SIGNATURE 1300 PLATINUM", PartType = PartType.PSU, Manufacturer = Antec, Price = 490, SellPrice = 163, LevelUnlock = 32, LevelPercent = 1, Lighting = null, Wattage = 1300, Length = 170, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(SIGNATURE_1300_PLATINUM);
            PSU MasterWatt_Maker_1200_MIJ = new PSU() { Id = 16, Name = "MasterWatt Maker 1200 MIJ", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 999, SellPrice = 333, LevelUnlock = 23, LevelPercent = 1, Lighting = null, Wattage = 1200, Length = 224, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(MasterWatt_Maker_1200_MIJ);
            PSU MWE_450_Bronze___V2 = new PSU() { Id = 17, Name = "MWE 450 Bronze - V2", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 50, SellPrice = 17, LevelUnlock = 22, LevelPercent = 70, Lighting = null, Wattage = 450, Length = 140, Type = PSUType.Non_Modular, PSUSize = ATX }; psus.Add(MWE_450_Bronze___V2);
            PSU MWE_450_White___V2 = new PSU() { Id = 18, Name = "MWE 450 White - V2", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 55, SellPrice = 18, LevelUnlock = 22, LevelPercent = 70, Lighting = null, Wattage = 450, Length = 140, Type = PSUType.Non_Modular, PSUSize = ATX }; psus.Add(MWE_450_White___V2);
            PSU MWE_500_Bronze___V2 = new PSU() { Id = 19, Name = "MWE 500 Bronze - V2", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 55, SellPrice = 18, LevelUnlock = 22, LevelPercent = 70, Lighting = null, Wattage = 500, Length = 140, Type = PSUType.Non_Modular, PSUSize = ATX }; psus.Add(MWE_500_Bronze___V2);
            PSU MWE_550_Bronze___V2 = new PSU() { Id = 20, Name = "MWE 550 Bronze - V2", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 60, SellPrice = 20, LevelUnlock = 22, LevelPercent = 70, Lighting = null, Wattage = 550, Length = 140, Type = PSUType.Non_Modular, PSUSize = ATX }; psus.Add(MWE_550_Bronze___V2);
            PSU MWE_550_White___V2 = new PSU() { Id = 21, Name = "MWE 550 White - V2", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 65, SellPrice = 22, LevelUnlock = 22, LevelPercent = 70, Lighting = null, Wattage = 550, Length = 140, Type = PSUType.Non_Modular, PSUSize = ATX }; psus.Add(MWE_550_White___V2);
            PSU MWE_600_Bronze___V2 = new PSU() { Id = 22, Name = "MWE 600 Bronze - V2", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 65, SellPrice = 22, LevelUnlock = 22, LevelPercent = 70, Lighting = null, Wattage = 600, Length = 140, Type = PSUType.Non_Modular, PSUSize = ATX }; psus.Add(MWE_600_Bronze___V2);
            PSU MWE_650_Bronze___V2 = new PSU() { Id = 23, Name = "MWE 650 Bronze - V2", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 70, SellPrice = 23, LevelUnlock = 22, LevelPercent = 70, Lighting = null, Wattage = 650, Length = 140, Type = PSUType.Non_Modular, PSUSize = ATX }; psus.Add(MWE_650_Bronze___V2);
            PSU MWE_650_White___V2 = new PSU() { Id = 24, Name = "MWE 650 White - V2", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 75, SellPrice = 25, LevelUnlock = 22, LevelPercent = 70, Lighting = null, Wattage = 650, Length = 140, Type = PSUType.Non_Modular, PSUSize = ATX }; psus.Add(MWE_650_White___V2);
            PSU MWE_700_Bronze___V2 = new PSU() { Id = 25, Name = "MWE 700 Bronze - V2", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 80, SellPrice = 27, LevelUnlock = 22, LevelPercent = 70, Lighting = null, Wattage = 700, Length = 140, Type = PSUType.Non_Modular, PSUSize = ATX }; psus.Add(MWE_700_Bronze___V2);
            PSU MWE_750_Bronze___V2 = new PSU() { Id = 26, Name = "MWE 750 Bronze - V2", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 90, SellPrice = 30, LevelUnlock = 22, LevelPercent = 70, Lighting = null, Wattage = 750, Length = 140, Type = PSUType.Non_Modular, PSUSize = ATX }; psus.Add(MWE_750_Bronze___V2);
            PSU MWE_750_White___V2 = new PSU() { Id = 27, Name = "MWE 750 White - V2", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 95, SellPrice = 32, LevelUnlock = 22, LevelPercent = 70, Lighting = null, Wattage = 750, Length = 140, Type = PSUType.Non_Modular, PSUSize = ATX }; psus.Add(MWE_750_White___V2);
            PSU MWE_Bronze_450 = new PSU() { Id = 28, Name = "MWE Bronze 450", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 50, SellPrice = 17, LevelUnlock = 4, LevelPercent = 1, Lighting = null, Wattage = 450, Length = 140, Type = PSUType.Non_Modular, PSUSize = ATX }; psus.Add(MWE_Bronze_450);
            PSU MWE_Bronze_500 = new PSU() { Id = 29, Name = "MWE Bronze 500", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 55, SellPrice = 18, LevelUnlock = 4, LevelPercent = 1, Lighting = null, Wattage = 500, Length = 140, Type = PSUType.Non_Modular, PSUSize = ATX }; psus.Add(MWE_Bronze_500);
            PSU MWE_Bronze_550 = new PSU() { Id = 30, Name = "MWE Bronze 550", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 60, SellPrice = 20, LevelUnlock = 4, LevelPercent = 68, Lighting = null, Wattage = 550, Length = 140, Type = PSUType.Non_Modular, PSUSize = ATX }; psus.Add(MWE_Bronze_550);
            PSU MWE_Bronze_600 = new PSU() { Id = 31, Name = "MWE Bronze 600", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 65, SellPrice = 22, LevelUnlock = 10, LevelPercent = 60, Lighting = null, Wattage = 600, Length = 140, Type = PSUType.Non_Modular, PSUSize = ATX }; psus.Add(MWE_Bronze_600);
            PSU MWE_Bronze_650 = new PSU() { Id = 32, Name = "MWE Bronze 650", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 70, SellPrice = 23, LevelUnlock = 12, LevelPercent = 34, Lighting = null, Wattage = 650, Length = 140, Type = PSUType.Non_Modular, PSUSize = ATX }; psus.Add(MWE_Bronze_650);
            PSU V1300_Platinum = new PSU() { Id = 33, Name = "V1300 Platinum", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 500, SellPrice = 167, LevelUnlock = 33, LevelPercent = 1, Lighting = null, Wattage = 1300, Length = 201, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(V1300_Platinum);
            PSU V550_GOLD = new PSU() { Id = 34, Name = "V550 GOLD", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 110, SellPrice = 37, LevelUnlock = 25, LevelPercent = 70, Lighting = null, Wattage = 550, Length = 160, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(V550_GOLD);
            PSU V550_Gold_V2 = new PSU() { Id = 35, Name = "V550 Gold V2", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 120, SellPrice = 40, LevelUnlock = 33, LevelPercent = 1, Lighting = null, Wattage = 550, Length = 160, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(V550_Gold_V2);
            PSU V550_Gold_V2_White = new PSU() { Id = 36, Name = "V550 Gold V2 White", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 120, SellPrice = 40, LevelUnlock = 33, LevelPercent = 1, Lighting = null, Wattage = 550, Length = 160, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(V550_Gold_V2_White);
            PSU V550_SFX_Gold = new PSU() { Id = 37, Name = "V550 SFX Gold", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 120, SellPrice = 40, LevelUnlock = 33, LevelPercent = 1, Lighting = null, Wattage = 550, Length = 100, Type = PSUType.Modular, PSUSize = SFX }; psus.Add(V550_SFX_Gold);
            PSU V650_GOLD = new PSU() { Id = 38, Name = "V650 GOLD", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 130, SellPrice = 43, LevelUnlock = 25, LevelPercent = 70, Lighting = null, Wattage = 650, Length = 160, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(V650_GOLD);
            PSU V650_Gold_V2 = new PSU() { Id = 39, Name = "V650 Gold V2", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 130, SellPrice = 43, LevelUnlock = 33, LevelPercent = 1, Lighting = null, Wattage = 650, Length = 160, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(V650_Gold_V2);
            PSU V650_Gold_V2_White = new PSU() { Id = 40, Name = "V650 Gold V2 White", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 130, SellPrice = 43, LevelUnlock = 33, LevelPercent = 1, Lighting = null, Wattage = 650, Length = 160, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(V650_Gold_V2_White);
            PSU V650_SFX_Gold = new PSU() { Id = 41, Name = "V650 SFX Gold", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 130, SellPrice = 43, LevelUnlock = 33, LevelPercent = 1, Lighting = null, Wattage = 650, Length = 100, Type = PSUType.Modular, PSUSize = SFX }; psus.Add(V650_SFX_Gold);
            PSU V750 = new PSU() { Id = 42, Name = "V750", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 140, SellPrice = 47, LevelUnlock = 15, LevelPercent = 65, Lighting = null, Wattage = 750, Length = 140, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(V750);
            PSU V750_GOLD = new PSU() { Id = 43, Name = "V750 GOLD", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 150, SellPrice = 50, LevelUnlock = 25, LevelPercent = 70, Lighting = null, Wattage = 750, Length = 160, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(V750_GOLD);
            PSU V750_Gold_V2 = new PSU() { Id = 44, Name = "V750 Gold V2", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 140, SellPrice = 47, LevelUnlock = 33, LevelPercent = 1, Lighting = null, Wattage = 750, Length = 160, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(V750_Gold_V2);
            PSU V750_Gold_V2_White = new PSU() { Id = 45, Name = "V750 Gold V2 White", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 140, SellPrice = 47, LevelUnlock = 33, LevelPercent = 1, Lighting = null, Wattage = 750, Length = 160, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(V750_Gold_V2_White);
            PSU V750_SFX_Gold = new PSU() { Id = 46, Name = "V750 SFX Gold", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 140, SellPrice = 47, LevelUnlock = 33, LevelPercent = 1, Lighting = null, Wattage = 750, Length = 100, Type = PSUType.Modular, PSUSize = SFX }; psus.Add(V750_SFX_Gold);
            PSU V850_GOLD = new PSU() { Id = 47, Name = "V850 GOLD", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 170, SellPrice = 57, LevelUnlock = 25, LevelPercent = 70, Lighting = null, Wattage = 850, Length = 160, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(V850_GOLD);
            PSU V850_Gold_V2 = new PSU() { Id = 48, Name = "V850 Gold V2", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 150, SellPrice = 50, LevelUnlock = 33, LevelPercent = 1, Lighting = null, Wattage = 850, Length = 160, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(V850_Gold_V2);
            PSU V850_Gold_V2_White = new PSU() { Id = 49, Name = "V850 Gold V2 White", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 150, SellPrice = 50, LevelUnlock = 33, LevelPercent = 1, Lighting = null, Wattage = 850, Length = 160, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(V850_Gold_V2_White);
            PSU V850_SFX_Gold = new PSU() { Id = 50, Name = "V850 SFX Gold", PartType = PartType.PSU, Manufacturer = Cooler_Master, Price = 150, SellPrice = 50, LevelUnlock = 33, LevelPercent = 1, Lighting = null, Wattage = 850, Length = 100, Type = PSUType.Modular, PSUSize = SFX }; psus.Add(V850_SFX_Gold);
            PSU AX1600i = new PSU() { Id = 51, Name = "AX1600i", PartType = PartType.PSU, Manufacturer = CORSAIR, Price = 450, SellPrice = 150, LevelUnlock = 26, LevelPercent = 1, Lighting = null, Wattage = 1600, Length = 200, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(AX1600i);
            PSU HX1000 = new PSU() { Id = 52, Name = "HX1000", PartType = PartType.PSU, Manufacturer = CORSAIR, Price = 180, SellPrice = 60, LevelUnlock = 29, LevelPercent = 1, Lighting = null, Wattage = 1000, Length = 180, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(HX1000);
            PSU RM1000x = new PSU() { Id = 53, Name = "RM1000x", PartType = PartType.PSU, Manufacturer = CORSAIR, Price = 500, SellPrice = 167, LevelUnlock = 21, LevelPercent = 65, Lighting = null, Wattage = 1000, Length = 180, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(RM1000x);
            PSU RM550x = new PSU() { Id = 54, Name = "RM550x", PartType = PartType.PSU, Manufacturer = CORSAIR, Price = 130, SellPrice = 43, LevelUnlock = 21, LevelPercent = 65, Lighting = null, Wattage = 550, Length = 160, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(RM550x);
            PSU RM650 = new PSU() { Id = 55, Name = "RM650", PartType = PartType.PSU, Manufacturer = CORSAIR, Price = 140, SellPrice = 47, LevelUnlock = 21, LevelPercent = 65, Lighting = null, Wattage = 650, Length = 160, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(RM650);
            PSU RM650x = new PSU() { Id = 56, Name = "RM650x", PartType = PartType.PSU, Manufacturer = CORSAIR, Price = 160, SellPrice = 53, LevelUnlock = 21, LevelPercent = 65, Lighting = null, Wattage = 650, Length = 160, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(RM650x);
            PSU RM750 = new PSU() { Id = 57, Name = "RM750", PartType = PartType.PSU, Manufacturer = CORSAIR, Price = 170, SellPrice = 57, LevelUnlock = 21, LevelPercent = 65, Lighting = null, Wattage = 750, Length = 160, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(RM750);
            PSU RM750i = new PSU() { Id = 58, Name = "RM750i", PartType = PartType.PSU, Manufacturer = CORSAIR, Price = 120, SellPrice = 40, LevelUnlock = 13, LevelPercent = 80, Lighting = null, Wattage = 750, Length = 180, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(RM750i);
            PSU RM750x = new PSU() { Id = 59, Name = "RM750x", PartType = PartType.PSU, Manufacturer = CORSAIR, Price = 190, SellPrice = 63, LevelUnlock = 21, LevelPercent = 65, Lighting = null, Wattage = 750, Length = 160, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(RM750x);
            PSU RM850 = new PSU() { Id = 60, Name = "RM850", PartType = PartType.PSU, Manufacturer = CORSAIR, Price = 200, SellPrice = 67, LevelUnlock = 21, LevelPercent = 65, Lighting = null, Wattage = 850, Length = 160, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(RM850);
            PSU RM850x = new PSU() { Id = 61, Name = "RM850x", PartType = PartType.PSU, Manufacturer = CORSAIR, Price = 140, SellPrice = 47, LevelUnlock = 13, LevelPercent = 80, Lighting = null, Wattage = 850, Length = 160, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(RM850x);
            PSU TX550M = new PSU() { Id = 62, Name = "TX550M", PartType = PartType.PSU, Manufacturer = CORSAIR, Price = 80, SellPrice = 27, LevelUnlock = 5, LevelPercent = 5, Lighting = null, Wattage = 550, Length = 140, Type = PSUType.Semi_Modular, PSUSize = ATX }; psus.Add(TX550M);
            PSU TX650M = new PSU() { Id = 63, Name = "TX650M", PartType = PartType.PSU, Manufacturer = CORSAIR, Price = 90, SellPrice = 30, LevelUnlock = 13, LevelPercent = 91, Lighting = null, Wattage = 650, Length = 140, Type = PSUType.Semi_Modular, PSUSize = ATX }; psus.Add(TX650M);
            PSU TX750M = new PSU() { Id = 64, Name = "TX750M", PartType = PartType.PSU, Manufacturer = CORSAIR, Price = 110, SellPrice = 37, LevelUnlock = 15, LevelPercent = 5, Lighting = null, Wattage = 750, Length = 140, Type = PSUType.Semi_Modular, PSUSize = ATX }; psus.Add(TX750M);
            PSU TX850M = new PSU() { Id = 65, Name = "TX850M", PartType = PartType.PSU, Manufacturer = CORSAIR, Price = 130, SellPrice = 43, LevelUnlock = 19, LevelPercent = 68, Lighting = null, Wattage = 850, Length = 160, Type = PSUType.Semi_Modular, PSUSize = ATX }; psus.Add(TX850M);
            PSU N50_B3 = new PSU() { Id = 66, Name = "450 B3", PartType = PartType.PSU, Manufacturer = EVGA, Price = 50, SellPrice = 17, LevelUnlock = 6, LevelPercent = 45, Lighting = null, Wattage = 450, Length = 150, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(N50_B3);
            PSU SuperNOVA_1000_T2 = new PSU() { Id = 67, Name = "SuperNOVA 1000 T2", PartType = PartType.PSU, Manufacturer = EVGA, Price = 310, SellPrice = 103, LevelUnlock = 20, LevelPercent = 70, Lighting = null, Wattage = 1000, Length = 180, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(SuperNOVA_1000_T2);
            PSU SuperNOVA_1050_GS = new PSU() { Id = 68, Name = "SuperNOVA 1050 GS", PartType = PartType.PSU, Manufacturer = EVGA, Price = 180, SellPrice = 60, LevelUnlock = 20, LevelPercent = 70, Lighting = null, Wattage = 1050, Length = 170, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(SuperNOVA_1050_GS);
            PSU SuperNOVA_1200_P2 = new PSU() { Id = 69, Name = "SuperNOVA 1200 P2", PartType = PartType.PSU, Manufacturer = EVGA, Price = 300, SellPrice = 100, LevelUnlock = 23, LevelPercent = 25, Lighting = null, Wattage = 1200, Length = 200, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(SuperNOVA_1200_P2);
            PSU SuperNOVA_1300_G2 = new PSU() { Id = 70, Name = "SuperNOVA 1300 G2", PartType = PartType.PSU, Manufacturer = EVGA, Price = 270, SellPrice = 90, LevelUnlock = 25, LevelPercent = 1, Lighting = null, Wattage = 1300, Length = 200, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(SuperNOVA_1300_G2);
            PSU SuperNOVA_1600_G2 = new PSU() { Id = 71, Name = "SuperNOVA 1600 G2", PartType = PartType.PSU, Manufacturer = EVGA, Price = 450, SellPrice = 150, LevelUnlock = 33, LevelPercent = 1, Lighting = null, Wattage = 1600, Length = 220, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(SuperNOVA_1600_G2);
            PSU SuperNOVA_1600_P2 = new PSU() { Id = 72, Name = "SuperNOVA 1600 P2", PartType = PartType.PSU, Manufacturer = EVGA, Price = 910, SellPrice = 303, LevelUnlock = 33, LevelPercent = 1, Lighting = null, Wattage = 1600, Length = 225, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(SuperNOVA_1600_P2);
            PSU SuperNOVA_1600_T2 = new PSU() { Id = 73, Name = "SuperNOVA 1600 T2", PartType = PartType.PSU, Manufacturer = EVGA, Price = 940, SellPrice = 313, LevelUnlock = 30, LevelPercent = 85, Lighting = null, Wattage = 1600, Length = 225, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(SuperNOVA_1600_T2);
            PSU SuperNOVA_550_G3 = new PSU() { Id = 74, Name = "SuperNOVA 550 G3", PartType = PartType.PSU, Manufacturer = EVGA, Price = 100, SellPrice = 33, LevelUnlock = 9, LevelPercent = 1, Lighting = null, Wattage = 550, Length = 150, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(SuperNOVA_550_G3);
            PSU SuperNOVA_650_P2 = new PSU() { Id = 75, Name = "SuperNOVA 650 P2", PartType = PartType.PSU, Manufacturer = EVGA, Price = 130, SellPrice = 43, LevelUnlock = 12, LevelPercent = 10, Lighting = null, Wattage = 650, Length = 165, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(SuperNOVA_650_P2);
            PSU SuperNOVA_750_T2 = new PSU() { Id = 76, Name = "SuperNOVA 750 T2", PartType = PartType.PSU, Manufacturer = EVGA, Price = 150, SellPrice = 50, LevelUnlock = 17, LevelPercent = 40, Lighting = null, Wattage = 750, Length = 180, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(SuperNOVA_750_T2);
            PSU SuperNOVA_850_T2 = new PSU() { Id = 77, Name = "SuperNOVA 850 T2", PartType = PartType.PSU, Manufacturer = EVGA, Price = 230, SellPrice = 77, LevelUnlock = 19, LevelPercent = 55, Lighting = null, Wattage = 850, Length = 180, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(SuperNOVA_850_T2);
            PSU Ion_SFX_L_Gold_500W = new PSU() { Id = 78, Name = "Ion SFX-L Gold 500W", PartType = PartType.PSU, Manufacturer = Fractal_Design, Price = 100, SellPrice = 33, LevelUnlock = 26, LevelPercent = 30, Lighting = null, Wattage = 500, Length = 125, Type = PSUType.Modular, PSUSize = SFX }; psus.Add(Ion_SFX_L_Gold_500W);
            PSU Ion_SFX_L_Gold_650W = new PSU() { Id = 79, Name = "Ion SFX-L Gold 650W", PartType = PartType.PSU, Manufacturer = Fractal_Design, Price = 115, SellPrice = 38, LevelUnlock = 26, LevelPercent = 30, Lighting = null, Wattage = 650, Length = 125, Type = PSUType.Modular, PSUSize = SFX }; psus.Add(Ion_SFX_L_Gold_650W);
            PSU Ion__Platinum_560W = new PSU() { Id = 80, Name = "Ion+ Platinum 560W", PartType = PartType.PSU, Manufacturer = Fractal_Design, Price = 100, SellPrice = 33, LevelUnlock = 26, LevelPercent = 30, Lighting = null, Wattage = 560, Length = 150, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(Ion__Platinum_560W);
            PSU Ion__Platinum_660W = new PSU() { Id = 81, Name = "Ion+ Platinum 660W", PartType = PartType.PSU, Manufacturer = Fractal_Design, Price = 120, SellPrice = 40, LevelUnlock = 26, LevelPercent = 30, Lighting = null, Wattage = 660, Length = 150, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(Ion__Platinum_660W);
            PSU Ion__Platinum_760W = new PSU() { Id = 82, Name = "Ion+ Platinum 760W", PartType = PartType.PSU, Manufacturer = Fractal_Design, Price = 130, SellPrice = 43, LevelUnlock = 26, LevelPercent = 30, Lighting = null, Wattage = 760, Length = 150, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(Ion__Platinum_760W);
            PSU Ion__Platinum_860W = new PSU() { Id = 83, Name = "Ion+ Platinum 860W", PartType = PartType.PSU, Manufacturer = Fractal_Design, Price = 140, SellPrice = 47, LevelUnlock = 26, LevelPercent = 30, Lighting = null, Wattage = 860, Length = 150, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(Ion__Platinum_860W);
            PSU Dagger_Pro_550W = new PSU() { Id = 84, Name = "Dagger Pro 550W", PartType = PartType.PSU, Manufacturer = FSP, Price = 115, SellPrice = 38, LevelUnlock = 6, LevelPercent = 40, Lighting = null, Wattage = 550, Length = 100, Type = PSUType.Modular, PSUSize = SFX }; psus.Add(Dagger_Pro_550W);
            PSU Dagger_Pro_650W = new PSU() { Id = 85, Name = "Dagger Pro 650W", PartType = PartType.PSU, Manufacturer = FSP, Price = 115, SellPrice = 38, LevelUnlock = 6, LevelPercent = 40, Lighting = null, Wattage = 650, Length = 100, Type = PSUType.Modular, PSUSize = SFX }; psus.Add(Dagger_Pro_650W);
            PSU Hydro_G_650 = new PSU() { Id = 86, Name = "Hydro G 650", PartType = PartType.PSU, Manufacturer = FSP, Price = 100, SellPrice = 33, LevelUnlock = 13, LevelPercent = 40, Lighting = null, Wattage = 650, Length = 170, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(Hydro_G_650);
            PSU Hydro_G_750 = new PSU() { Id = 87, Name = "Hydro G 750", PartType = PartType.PSU, Manufacturer = FSP, Price = 120, SellPrice = 40, LevelUnlock = 13, LevelPercent = 40, Lighting = null, Wattage = 750, Length = 170, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(Hydro_G_750);
            PSU Hydro_G_850 = new PSU() { Id = 88, Name = "Hydro G 850", PartType = PartType.PSU, Manufacturer = FSP, Price = 140, SellPrice = 47, LevelUnlock = 13, LevelPercent = 40, Lighting = null, Wattage = 850, Length = 170, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(Hydro_G_850);
            PSU Hydro_PTM_550W = new PSU() { Id = 89, Name = "Hydro PTM 550W", PartType = PartType.PSU, Manufacturer = FSP, Price = 110, SellPrice = 37, LevelUnlock = 8, LevelPercent = 40, Lighting = null, Wattage = 550, Length = 170, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(Hydro_PTM_550W);
            PSU Hydro_PTM_550W__Red_ = new PSU() { Id = 90, Name = "Hydro PTM 550W (Red)", PartType = PartType.PSU, Manufacturer = FSP, Price = 110, SellPrice = 37, LevelUnlock = 8, LevelPercent = 40, Lighting = null, Wattage = 550, Length = 170, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(Hydro_PTM_550W__Red_);
            PSU Hydro_PTM_650W = new PSU() { Id = 91, Name = "Hydro PTM 650W", PartType = PartType.PSU, Manufacturer = FSP, Price = 125, SellPrice = 42, LevelUnlock = 8, LevelPercent = 40, Lighting = null, Wattage = 650, Length = 170, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(Hydro_PTM_650W);
            PSU Hydro_PTM_650W__Red_ = new PSU() { Id = 92, Name = "Hydro PTM 650W (Red)", PartType = PartType.PSU, Manufacturer = FSP, Price = 125, SellPrice = 42, LevelUnlock = 8, LevelPercent = 40, Lighting = null, Wattage = 650, Length = 170, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(Hydro_PTM_650W__Red_);
            PSU Hydro_PTM_750W = new PSU() { Id = 93, Name = "Hydro PTM 750W", PartType = PartType.PSU, Manufacturer = FSP, Price = 140, SellPrice = 47, LevelUnlock = 8, LevelPercent = 40, Lighting = null, Wattage = 750, Length = 170, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(Hydro_PTM_750W);
            PSU Hydro_PTM_750W__Red_ = new PSU() { Id = 94, Name = "Hydro PTM 750W (Red)", PartType = PartType.PSU, Manufacturer = FSP, Price = 140, SellPrice = 47, LevelUnlock = 8, LevelPercent = 40, Lighting = null, Wattage = 750, Length = 170, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(Hydro_PTM_750W__Red_);
            PSU DQ650_M = new PSU() { Id = 95, Name = "DQ650-M", PartType = PartType.PSU, Manufacturer = GamerStorm, Price = 100, SellPrice = 33, LevelUnlock = 24, LevelPercent = 25, Lighting = null, Wattage = 650, Length = 160, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(DQ650_M);
            PSU DQ750_M = new PSU() { Id = 96, Name = "DQ750-M", PartType = PartType.PSU, Manufacturer = GamerStorm, Price = 120, SellPrice = 40, LevelUnlock = 24, LevelPercent = 25, Lighting = null, Wattage = 750, Length = 160, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(DQ750_M);
            PSU DQ850_M = new PSU() { Id = 97, Name = "DQ850-M", PartType = PartType.PSU, Manufacturer = GamerStorm, Price = 150, SellPrice = 50, LevelUnlock = 24, LevelPercent = 25, Lighting = null, Wattage = 850, Length = 160, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(DQ850_M);
            PSU AORUS_P750W = new PSU() { Id = 98, Name = "AORUS P750W", PartType = PartType.PSU, Manufacturer = GIGABYTE, Price = 120, SellPrice = 40, LevelUnlock = 14, LevelPercent = 60, Lighting = null, Wattage = 750, Length = 160, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(AORUS_P750W);
            PSU AORUS_P850W = new PSU() { Id = 99, Name = "AORUS P850W", PartType = PartType.PSU, Manufacturer = GIGABYTE, Price = 150, SellPrice = 50, LevelUnlock = 14, LevelPercent = 60, Lighting = null, Wattage = 850, Length = 160, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(AORUS_P850W);
            PSU Powerking_250 = new PSU() { Id = 100, Name = "Powerking 250", PartType = PartType.PSU, Manufacturer = Shean, Price = 20, SellPrice = 7, LevelUnlock = 1, LevelPercent = 1, Lighting = null, Wattage = 250, Length = 140, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(Powerking_250);
            PSU Powerking_300 = new PSU() { Id = 101, Name = "Powerking 300", PartType = PartType.PSU, Manufacturer = Shean, Price = 30, SellPrice = 10, LevelUnlock = 1, LevelPercent = 1, Lighting = null, Wattage = 300, Length = 140, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(Powerking_300);
            PSU Powerking_350 = new PSU() { Id = 102, Name = "Powerking 350", PartType = PartType.PSU, Manufacturer = Shean, Price = 40, SellPrice = 13, LevelUnlock = 1, LevelPercent = 1, Lighting = null, Wattage = 350, Length = 140, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(Powerking_350);
            PSU Powerking_400 = new PSU() { Id = 103, Name = "Powerking 400", PartType = PartType.PSU, Manufacturer = Shean, Price = 50, SellPrice = 17, LevelUnlock = 1, LevelPercent = 1, Lighting = null, Wattage = 400, Length = 140, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(Powerking_400);
            PSU Powerking_600 = new PSU() { Id = 104, Name = "Powerking 600", PartType = PartType.PSU, Manufacturer = Shean, Price = 80, SellPrice = 26, LevelUnlock = 1, LevelPercent = 1, Lighting = null, Wattage = 600, Length = 140, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(Powerking_600);
            PSU ET550_B = new PSU() { Id = 105, Name = "ET550-B", PartType = PartType.PSU, Manufacturer = SilverStone, Price = 55, SellPrice = 18, LevelUnlock = 2, LevelPercent = 1, Lighting = null, Wattage = 550, Length = 140, Type = PSUType.Non_Modular, PSUSize = ATX }; psus.Add(ET550_B);
            PSU ET550_G = new PSU() { Id = 106, Name = "ET550-G", PartType = PartType.PSU, Manufacturer = SilverStone, Price = 75, SellPrice = 25, LevelUnlock = 7, LevelPercent = 35, Lighting = null, Wattage = 550, Length = 140, Type = PSUType.Non_Modular, PSUSize = ATX }; psus.Add(ET550_G);
            PSU ET650_B = new PSU() { Id = 107, Name = "ET650-B", PartType = PartType.PSU, Manufacturer = SilverStone, Price = 60, SellPrice = 20, LevelUnlock = 11, LevelPercent = 1, Lighting = null, Wattage = 650, Length = 140, Type = PSUType.Non_Modular, PSUSize = ATX }; psus.Add(ET650_B);
            PSU ET650_G = new PSU() { Id = 108, Name = "ET650-G", PartType = PartType.PSU, Manufacturer = SilverStone, Price = 85, SellPrice = 28, LevelUnlock = 13, LevelPercent = 72, Lighting = null, Wattage = 650, Length = 140, Type = PSUType.Non_Modular, PSUSize = ATX }; psus.Add(ET650_G);
            PSU ET700_MG = new PSU() { Id = 109, Name = "ET700-MG", PartType = PartType.PSU, Manufacturer = SilverStone, Price = 90, SellPrice = 30, LevelUnlock = 21, LevelPercent = 1, Lighting = null, Wattage = 700, Length = 165, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(ET700_MG);
            PSU ET750_G = new PSU() { Id = 110, Name = "ET750-G", PartType = PartType.PSU, Manufacturer = SilverStone, Price = 95, SellPrice = 32, LevelUnlock = 17, LevelPercent = 18, Lighting = null, Wattage = 750, Length = 140, Type = PSUType.Non_Modular, PSUSize = ATX }; psus.Add(ET750_G);
            PSU NJ520 = new PSU() { Id = 111, Name = "NJ520", PartType = PartType.PSU, Manufacturer = SilverStone, Price = 140, SellPrice = 47, LevelUnlock = 7, LevelPercent = 79, Lighting = null, Wattage = 520, Length = 160, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(NJ520);
            PSU NJ700 = new PSU() { Id = 112, Name = "NJ700", PartType = PartType.PSU, Manufacturer = SilverStone, Price = 320, SellPrice = 107, LevelUnlock = 34, LevelPercent = 1, Lighting = null, Wattage = 700, Length = 170, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(NJ700);
            PSU ST1000_PT = new PSU() { Id = 113, Name = "ST1000-PT", PartType = PartType.PSU, Manufacturer = SilverStone, Price = 205, SellPrice = 68, LevelUnlock = 20, LevelPercent = 24, Lighting = null, Wattage = 1000, Length = 180, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(ST1000_PT);
            PSU ST1100_TI = new PSU() { Id = 114, Name = "ST1100-TI", PartType = PartType.PSU, Manufacturer = SilverStone, Price = 280, SellPrice = 93, LevelUnlock = 21, LevelPercent = 10, Lighting = null, Wattage = 1100, Length = 180, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(ST1100_TI);
            PSU ST1200_PT = new PSU() { Id = 115, Name = "ST1200-PT", PartType = PartType.PSU, Manufacturer = SilverStone, Price = 260, SellPrice = 87, LevelUnlock = 22, LevelPercent = 32, Lighting = null, Wattage = 1200, Length = 180, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(ST1200_PT);
            PSU ST1300_TI = new PSU() { Id = 116, Name = "ST1300-TI", PartType = PartType.PSU, Manufacturer = SilverStone, Price = 300, SellPrice = 100, LevelUnlock = 24, LevelPercent = 38, Lighting = null, Wattage = 1300, Length = 180, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(ST1300_TI);
            PSU ST1500_TI = new PSU() { Id = 117, Name = "ST1500-TI", PartType = PartType.PSU, Manufacturer = SilverStone, Price = 360, SellPrice = 120, LevelUnlock = 28, LevelPercent = 28, Lighting = null, Wattage = 1500, Length = 180, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(ST1500_TI);
            PSU ST55F_PT = new PSU() { Id = 118, Name = "ST55F-PT", PartType = PartType.PSU, Manufacturer = SilverStone, Price = 110, SellPrice = 37, LevelUnlock = 8, LevelPercent = 58, Lighting = null, Wattage = 550, Length = 140, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(ST55F_PT);
            PSU ST60F_TI = new PSU() { Id = 119, Name = "ST60F-TI", PartType = PartType.PSU, Manufacturer = SilverStone, Price = 130, SellPrice = 43, LevelUnlock = 9, LevelPercent = 1, Lighting = null, Wattage = 600, Length = 150, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(ST60F_TI);
            PSU ST65F_PT = new PSU() { Id = 120, Name = "ST65F-PT", PartType = PartType.PSU, Manufacturer = SilverStone, Price = 115, SellPrice = 38, LevelUnlock = 11, LevelPercent = 1, Lighting = null, Wattage = 650, Length = 140, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(ST65F_PT);
            PSU ST70F_TI = new PSU() { Id = 121, Name = "ST70F-TI", PartType = PartType.PSU, Manufacturer = SilverStone, Price = 150, SellPrice = 50, LevelUnlock = 14, LevelPercent = 26, Lighting = null, Wattage = 700, Length = 150, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(ST70F_TI);
            PSU ST75F_PT = new PSU() { Id = 122, Name = "ST75F-PT", PartType = PartType.PSU, Manufacturer = SilverStone, Price = 135, SellPrice = 45, LevelUnlock = 17, LevelPercent = 89, Lighting = null, Wattage = 750, Length = 140, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(ST75F_PT);
            PSU ST80F_TI = new PSU() { Id = 123, Name = "ST80F-TI", PartType = PartType.PSU, Manufacturer = SilverStone, Price = 160, SellPrice = 53, LevelUnlock = 18, LevelPercent = 30, Lighting = null, Wattage = 800, Length = 150, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(ST80F_TI);
            PSU ST85F_PT = new PSU() { Id = 124, Name = "ST85F-PT", PartType = PartType.PSU, Manufacturer = SilverStone, Price = 150, SellPrice = 50, LevelUnlock = 19, LevelPercent = 1, Lighting = null, Wattage = 850, Length = 140, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(ST85F_PT);
            PSU SX500_G = new PSU() { Id = 125, Name = "SX500-G", PartType = PartType.PSU, Manufacturer = SilverStone, Price = 115, SellPrice = 38, LevelUnlock = 12, LevelPercent = 50, Lighting = null, Wattage = 500, Length = 100, Type = PSUType.Modular, PSUSize = SFX }; psus.Add(SX500_G);
            PSU SX650_G = new PSU() { Id = 126, Name = "SX650-G", PartType = PartType.PSU, Manufacturer = SilverStone, Price = 125, SellPrice = 42, LevelUnlock = 12, LevelPercent = 50, Lighting = null, Wattage = 650, Length = 100, Type = PSUType.Modular, PSUSize = SFX }; psus.Add(SX650_G);
            PSU Smart_Pro_RGB_850W = new PSU() { Id = 127, Name = "Smart Pro RGB 850W", PartType = PartType.PSU, Manufacturer = Thermaltake, Price = 110, SellPrice = 37, LevelUnlock = 26, LevelPercent = 1, Lighting = null, Wattage = 850, Length = 170, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(Smart_Pro_RGB_850W);
            PSU Toughpower_iRGB_PLUS_1200W = new PSU() { Id = 128, Name = "Toughpower iRGB PLUS 1200W", PartType = PartType.PSU, Manufacturer = Thermaltake, Price = 270, SellPrice = 90, LevelUnlock = 29, LevelPercent = 1, Lighting = null, Wattage = 1200, Length = 180, Type = PSUType.Modular, PSUSize = ATX }; psus.Add(Toughpower_iRGB_PLUS_1200W);
            #endregion
            _context.PSU.AddRange(psus);
            #region Storage
            List<Storage> storages = new List<Storage>();
            Storage EZStore_120GB = new Storage() { Id = 1, Name = "EZStore 120GB", PartType = PartType.Storage, Manufacturer = Mortoni, Price = 20, SellPrice = 7, LevelUnlock = 1, LevelPercent = 1, Lighting = null, Type = StorageType.HDD, Size = 120, Speed = 160, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(EZStore_120GB);
            Storage EZStore_250GB = new Storage() { Id = 2, Name = "EZStore 250GB", PartType = PartType.Storage, Manufacturer = Mortoni, Price = 30, SellPrice = 10, LevelUnlock = 1, LevelPercent = 1, Lighting = null, Type = StorageType.HDD, Size = 250, Speed = 150, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(EZStore_250GB);
            Storage EZStore_320GB = new Storage() { Id = 3, Name = "EZStore 320GB", PartType = PartType.Storage, Manufacturer = Mortoni, Price = 40, SellPrice = 13, LevelUnlock = 1, LevelPercent = 1, Lighting = null, Type = StorageType.HDD, Size = 320, Speed = 150, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(EZStore_320GB);
            Storage EZStore_500GB = new Storage() { Id = 4, Name = "EZStore 500GB", PartType = PartType.Storage, Manufacturer = Mortoni, Price = 50, SellPrice = 17, LevelUnlock = 1, LevelPercent = 1, Lighting = null, Type = StorageType.HDD, Size = 500, Speed = 140, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(EZStore_500GB);
            Storage BarraCuda_1TB_64MB_Cache = new Storage() { Id = 5, Name = "BarraCuda 1TB 64MB Cache", PartType = PartType.Storage, Manufacturer = Seagate, Price = 60, SellPrice = 20, LevelUnlock = 3, LevelPercent = 1, Lighting = null, Type = StorageType.HDD, Size = 1000, Speed = 210, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(BarraCuda_1TB_64MB_Cache);
            Storage BarraCuda_2TB_64MB_Cache = new Storage() { Id = 6, Name = "BarraCuda 2TB 64MB Cache", PartType = PartType.Storage, Manufacturer = Seagate, Price = 70, SellPrice = 23, LevelUnlock = 3, LevelPercent = 1, Lighting = null, Type = StorageType.HDD, Size = 2000, Speed = 210, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(BarraCuda_2TB_64MB_Cache);
            Storage BarraCuda_3TB_64MB_Cache = new Storage() { Id = 7, Name = "BarraCuda 3TB 64MB Cache", PartType = PartType.Storage, Manufacturer = Seagate, Price = 90, SellPrice = 30, LevelUnlock = 3, LevelPercent = 1, Lighting = null, Type = StorageType.HDD, Size = 3000, Speed = 210, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(BarraCuda_3TB_64MB_Cache);
            Storage BarraCuda_4TB_256MB_Cache = new Storage() { Id = 8, Name = "BarraCuda 4TB 256MB Cache", PartType = PartType.Storage, Manufacturer = Seagate, Price = 130, SellPrice = 43, LevelUnlock = 3, LevelPercent = 1, Lighting = null, Type = StorageType.HDD, Size = 4000, Speed = 190, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(BarraCuda_4TB_256MB_Cache);
            Storage BarraCuda_500GB_32MB_Cache = new Storage() { Id = 9, Name = "BarraCuda 500GB 32MB Cache", PartType = PartType.Storage, Manufacturer = Seagate, Price = 50, SellPrice = 17, LevelUnlock = 3, LevelPercent = 1, Lighting = null, Type = StorageType.HDD, Size = 500, Speed = 210, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(BarraCuda_500GB_32MB_Cache);
            Storage XPG_GAMMIX_S11_M_2_240GB = new Storage() { Id = 10, Name = "XPG GAMMIX S11 M.2 240GB", PartType = PartType.Storage, Manufacturer = ADATA, Price = 130, SellPrice = 43, LevelUnlock = 19, LevelPercent = 1, Lighting = null, Type = StorageType.M_2, Size = 240, Speed = 1950, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(XPG_GAMMIX_S11_M_2_240GB);
            Storage XPG_GAMMIX_S11_M_2_480GB = new Storage() { Id = 11, Name = "XPG GAMMIX S11 M.2 480GB", PartType = PartType.Storage, Manufacturer = ADATA, Price = 210, SellPrice = 70, LevelUnlock = 19, LevelPercent = 1, Lighting = null, Type = StorageType.M_2, Size = 480, Speed = 1950, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(XPG_GAMMIX_S11_M_2_480GB);
            Storage XPG_GAMMIX_S11_M_2_960GB = new Storage() { Id = 12, Name = "XPG GAMMIX S11 M.2 960GB", PartType = PartType.Storage, Manufacturer = ADATA, Price = 400, SellPrice = 133, LevelUnlock = 19, LevelPercent = 1, Lighting = null, Type = StorageType.M_2, Size = 960, Speed = 1950, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(XPG_GAMMIX_S11_M_2_960GB);
            Storage XPG_SPECTRIX_S40G_RGB_M_2_1TB = new Storage() { Id = 13, Name = "XPG SPECTRIX S40G RGB M.2 1TB", PartType = PartType.Storage, Manufacturer = ADATA, Price = 370, SellPrice = 123, LevelUnlock = 18, LevelPercent = 45, Lighting = Color.RGB, Type = StorageType.M_2, Size = 1000, Speed = 3250, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(XPG_SPECTRIX_S40G_RGB_M_2_1TB);
            Storage XPG_SPECTRIX_S40G_RGB_M_2_256GB = new Storage() { Id = 14, Name = "XPG SPECTRIX S40G RGB M.2 256GB", PartType = PartType.Storage, Manufacturer = ADATA, Price = 160, SellPrice = 53, LevelUnlock = 18, LevelPercent = 45, Lighting = Color.RGB, Type = StorageType.M_2, Size = 256, Speed = 3250, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(XPG_SPECTRIX_S40G_RGB_M_2_256GB);
            Storage XPG_SPECTRIX_S40G_RGB_M_2_2TB = new Storage() { Id = 15, Name = "XPG SPECTRIX S40G RGB M.2 2TB", PartType = PartType.Storage, Manufacturer = ADATA, Price = 440, SellPrice = 147, LevelUnlock = 18, LevelPercent = 45, Lighting = Color.RGB, Type = StorageType.M_2, Size = 2000, Speed = 3250, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(XPG_SPECTRIX_S40G_RGB_M_2_2TB);
            Storage XPG_SPECTRIX_S40G_RGB_M_2_512GB = new Storage() { Id = 16, Name = "XPG SPECTRIX S40G RGB M.2 512GB", PartType = PartType.Storage, Manufacturer = ADATA, Price = 240, SellPrice = 80, LevelUnlock = 18, LevelPercent = 45, Lighting = Color.RGB, Type = StorageType.M_2, Size = 512, Speed = 3250, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(XPG_SPECTRIX_S40G_RGB_M_2_512GB);
            Storage XPG_SX6000_M_2_128GB = new Storage() { Id = 17, Name = "XPG SX6000 M.2 128GB", PartType = PartType.Storage, Manufacturer = ADATA, Price = 100, SellPrice = 33, LevelUnlock = 12, LevelPercent = 1, Lighting = null, Type = StorageType.M_2, Size = 128, Speed = 900, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(XPG_SX6000_M_2_128GB);
            Storage XPG_SX6000_M_2_1TB = new Storage() { Id = 18, Name = "XPG SX6000 M.2 1TB", PartType = PartType.Storage, Manufacturer = ADATA, Price = 380, SellPrice = 127, LevelUnlock = 12, LevelPercent = 58, Lighting = null, Type = StorageType.M_2, Size = 1000, Speed = 900, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(XPG_SX6000_M_2_1TB);
            Storage XPG_SX6000_M_2_256GB = new Storage() { Id = 19, Name = "XPG SX6000 M.2 256GB", PartType = PartType.Storage, Manufacturer = ADATA, Price = 150, SellPrice = 50, LevelUnlock = 12, LevelPercent = 18, Lighting = null, Type = StorageType.M_2, Size = 256, Speed = 900, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(XPG_SX6000_M_2_256GB);
            Storage XPG_SX6000_M_2_512GB = new Storage() { Id = 20, Name = "XPG SX6000 M.2 512GB", PartType = PartType.Storage, Manufacturer = ADATA, Price = 200, SellPrice = 67, LevelUnlock = 12, LevelPercent = 38, Lighting = null, Type = StorageType.M_2, Size = 512, Speed = 900, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(XPG_SX6000_M_2_512GB);
            Storage Force_Series___MP500_M_2_120GB = new Storage() { Id = 21, Name = "Force Series - MP500 M.2 120GB", PartType = PartType.Storage, Manufacturer = CORSAIR, Price = 150, SellPrice = 50, LevelUnlock = 29, LevelPercent = 1, Lighting = null, Type = StorageType.M_2, Size = 120, Speed = 2700, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(Force_Series___MP500_M_2_120GB);
            Storage Force_Series___MP500_M_2_240GB = new Storage() { Id = 22, Name = "Force Series - MP500 M.2 240GB", PartType = PartType.Storage, Manufacturer = CORSAIR, Price = 200, SellPrice = 67, LevelUnlock = 29, LevelPercent = 15, Lighting = null, Type = StorageType.M_2, Size = 240, Speed = 2700, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(Force_Series___MP500_M_2_240GB);
            Storage Force_Series___MP500_M_2_480GB = new Storage() { Id = 23, Name = "Force Series - MP500 M.2 480GB", PartType = PartType.Storage, Manufacturer = CORSAIR, Price = 300, SellPrice = 100, LevelUnlock = 29, LevelPercent = 30, Lighting = null, Type = StorageType.M_2, Size = 480, Speed = 2700, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(Force_Series___MP500_M_2_480GB);
            Storage Force_Series___MP500_M_2_960GB = new Storage() { Id = 24, Name = "Force Series - MP500 M.2 960GB", PartType = PartType.Storage, Manufacturer = CORSAIR, Price = 500, SellPrice = 167, LevelUnlock = 29, LevelPercent = 45, Lighting = null, Type = StorageType.M_2, Size = 960, Speed = 2650, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(Force_Series___MP500_M_2_960GB);
            Storage Force_Series___MP600_M_2_1TB = new Storage() { Id = 25, Name = "Force Series - MP600 M.2 1TB", PartType = PartType.Storage, Manufacturer = CORSAIR, Price = 370, SellPrice = 123, LevelUnlock = 20, LevelPercent = 1, Lighting = null, Type = StorageType.M_2, Size = 1000, Speed = 4600, IncludesHeatsink = true, HeatsinkThickness = 0.064 }; storages.Add(Force_Series___MP600_M_2_1TB);
            Storage Force_Series___MP600_M_2_2TB = new Storage() { Id = 26, Name = "Force Series - MP600 M.2 2TB", PartType = PartType.Storage, Manufacturer = CORSAIR, Price = 440, SellPrice = 147, LevelUnlock = 20, LevelPercent = 1, Lighting = null, Type = StorageType.M_2, Size = 2000, Speed = 4600, IncludesHeatsink = true, HeatsinkThickness = 0.064 }; storages.Add(Force_Series___MP600_M_2_2TB);
            Storage Force_Series___MP600_M_2_512GB = new Storage() { Id = 27, Name = "Force Series - MP600 M.2 512GB", PartType = PartType.Storage, Manufacturer = CORSAIR, Price = 240, SellPrice = 80, LevelUnlock = 20, LevelPercent = 1, Lighting = null, Type = StorageType.M_2, Size = 512, Speed = 3800, IncludesHeatsink = true, HeatsinkThickness = 0.064 }; storages.Add(Force_Series___MP600_M_2_512GB);
            Storage AORUS_NVMe_Gen4_SSD_1TB = new Storage() { Id = 28, Name = "AORUS NVMe Gen4 SSD 1TB", PartType = PartType.Storage, Manufacturer = GIGABYTE, Price = 240, SellPrice = 80, LevelUnlock = 22, LevelPercent = 70, Lighting = null, Type = StorageType.M_2, Size = 1000, Speed = 4700, IncludesHeatsink = true, HeatsinkThickness = 0.049 }; storages.Add(AORUS_NVMe_Gen4_SSD_1TB);
            Storage AORUS_NVMe_Gen4_SSD_2TB = new Storage() { Id = 29, Name = "AORUS NVMe Gen4 SSD 2TB", PartType = PartType.Storage, Manufacturer = GIGABYTE, Price = 410, SellPrice = 137, LevelUnlock = 22, LevelPercent = 70, Lighting = null, Type = StorageType.M_2, Size = 2000, Speed = 4700, IncludesHeatsink = true, HeatsinkThickness = 0.049 }; storages.Add(AORUS_NVMe_Gen4_SSD_2TB);
            Storage AORUS_RGB_M_2_NVMe_SSD_256GB = new Storage() { Id = 30, Name = "AORUS RGB M.2 NVMe SSD 256GB", PartType = PartType.Storage, Manufacturer = GIGABYTE, Price = 80, SellPrice = 27, LevelUnlock = 22, LevelPercent = 50, Lighting = Color.RGB, Type = StorageType.M_2, Size = 256, Speed = 1875, IncludesHeatsink = true, HeatsinkThickness = 0.024 }; storages.Add(AORUS_RGB_M_2_NVMe_SSD_256GB);
            Storage AORUS_RGB_M_2_NVMe_SSD_512GB = new Storage() { Id = 31, Name = "AORUS RGB M.2 NVMe SSD 512GB", PartType = PartType.Storage, Manufacturer = GIGABYTE, Price = 140, SellPrice = 47, LevelUnlock = 22, LevelPercent = 50, Lighting = Color.RGB, Type = StorageType.M_2, Size = 512, Speed = 2740, IncludesHeatsink = true, HeatsinkThickness = 0.024 }; storages.Add(AORUS_RGB_M_2_NVMe_SSD_512GB);
            Storage M_2_PCIe_SSD_128GB = new Storage() { Id = 32, Name = "M.2 PCIe SSD 128GB", PartType = PartType.Storage, Manufacturer = GIGABYTE, Price = 30, SellPrice = 10, LevelUnlock = 22, LevelPercent = 10, Lighting = null, Type = StorageType.M_2, Size = 128, Speed = 800, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(M_2_PCIe_SSD_128GB);
            Storage M_2_PCIe_SSD_256GB = new Storage() { Id = 33, Name = "M.2 PCIe SSD 256GB", PartType = PartType.Storage, Manufacturer = GIGABYTE, Price = 60, SellPrice = 20, LevelUnlock = 22, LevelPercent = 10, Lighting = null, Type = StorageType.M_2, Size = 256, Speed = 1000, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(M_2_PCIe_SSD_256GB);
            Storage M_2_PCIe_SSD_512GB = new Storage() { Id = 34, Name = "M.2 PCIe SSD 512GB", PartType = PartType.Storage, Manufacturer = GIGABYTE, Price = 120, SellPrice = 40, LevelUnlock = 22, LevelPercent = 50, Lighting = null, Type = StorageType.M_2, Size = 512, Speed = 1200, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(M_2_PCIe_SSD_512GB);
            Storage A2000_NVMe_PCIe_SSD_1000GB = new Storage() { Id = 35, Name = "A2000 NVMe PCIe SSD 1000GB", PartType = PartType.Storage, Manufacturer = Kingston, Price = 125, SellPrice = 42, LevelUnlock = 30, LevelPercent = 1, Lighting = null, Type = StorageType.M_2, Size = 1000, Speed = 2100, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(A2000_NVMe_PCIe_SSD_1000GB);
            Storage A2000_NVMe_PCIe_SSD_250GB = new Storage() { Id = 36, Name = "A2000 NVMe PCIe SSD 250GB", PartType = PartType.Storage, Manufacturer = Kingston, Price = 50, SellPrice = 17, LevelUnlock = 30, LevelPercent = 1, Lighting = null, Type = StorageType.M_2, Size = 250, Speed = 2100, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(A2000_NVMe_PCIe_SSD_250GB);
            Storage A2000_NVMe_PCIe_SSD_500GB = new Storage() { Id = 37, Name = "A2000 NVMe PCIe SSD 500GB", PartType = PartType.Storage, Manufacturer = Kingston, Price = 80, SellPrice = 27, LevelUnlock = 30, LevelPercent = 1, Lighting = null, Type = StorageType.M_2, Size = 500, Speed = 2100, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(A2000_NVMe_PCIe_SSD_500GB);
            Storage KC2000_NVMe_PCIe_SSD_1000GB = new Storage() { Id = 38, Name = "KC2000 NVMe PCIe SSD 1000GB", PartType = PartType.Storage, Manufacturer = Kingston, Price = 200, SellPrice = 67, LevelUnlock = 30, LevelPercent = 1, Lighting = null, Type = StorageType.M_2, Size = 1000, Speed = 2800, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(KC2000_NVMe_PCIe_SSD_1000GB);
            Storage KC2000_NVMe_PCIe_SSD_2000GB = new Storage() { Id = 39, Name = "KC2000 NVMe PCIe SSD 2000GB", PartType = PartType.Storage, Manufacturer = Kingston, Price = 350, SellPrice = 117, LevelUnlock = 30, LevelPercent = 1, Lighting = null, Type = StorageType.M_2, Size = 2000, Speed = 2800, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(KC2000_NVMe_PCIe_SSD_2000GB);
            Storage KC2000_NVMe_PCIe_SSD_250GB = new Storage() { Id = 40, Name = "KC2000 NVMe PCIe SSD 250GB", PartType = PartType.Storage, Manufacturer = Kingston, Price = 80, SellPrice = 27, LevelUnlock = 30, LevelPercent = 1, Lighting = null, Type = StorageType.M_2, Size = 250, Speed = 2800, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(KC2000_NVMe_PCIe_SSD_250GB);
            Storage KC2000_NVMe_PCIe_SSD_500GB = new Storage() { Id = 41, Name = "KC2000 NVMe PCIe SSD 500GB", PartType = PartType.Storage, Manufacturer = Kingston, Price = 125, SellPrice = 42, LevelUnlock = 30, LevelPercent = 1, Lighting = null, Type = StorageType.M_2, Size = 500, Speed = 2800, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(KC2000_NVMe_PCIe_SSD_500GB);
            Storage Scorch_M_2_128GB = new Storage() { Id = 42, Name = "Scorch M.2 128GB", PartType = PartType.Storage, Manufacturer = Patriot, Price = 110, SellPrice = 37, LevelUnlock = 15, LevelPercent = 1, Lighting = null, Type = StorageType.M_2, Size = 128, Speed = 1240, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(Scorch_M_2_128GB);
            Storage Scorch_M_2_256GB = new Storage() { Id = 43, Name = "Scorch M.2 256GB", PartType = PartType.Storage, Manufacturer = Patriot, Price = 160, SellPrice = 53, LevelUnlock = 15, LevelPercent = 1, Lighting = null, Type = StorageType.M_2, Size = 256, Speed = 1050, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(Scorch_M_2_256GB);
            Storage Scorch_M_2_512GB = new Storage() { Id = 44, Name = "Scorch M.2 512GB", PartType = PartType.Storage, Manufacturer = Patriot, Price = 240, SellPrice = 80, LevelUnlock = 15, LevelPercent = 1, Lighting = null, Type = StorageType.M_2, Size = 512, Speed = 1325, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(Scorch_M_2_512GB);
            Storage Viper_VP4100_M_2_1TB = new Storage() { Id = 45, Name = "Viper VP4100 M.2 1TB", PartType = PartType.Storage, Manufacturer = Patriot, Price = 400, SellPrice = 133, LevelUnlock = 17, LevelPercent = 35, Lighting = null, Type = StorageType.M_2, Size = 1000, Speed = 4800, IncludesHeatsink = true, HeatsinkThickness = 0.024 }; storages.Add(Viper_VP4100_M_2_1TB);
            Storage Viper_VP4100_M_2_2TB = new Storage() { Id = 46, Name = "Viper VP4100 M.2 2TB", PartType = PartType.Storage, Manufacturer = Patriot, Price = 500, SellPrice = 167, LevelUnlock = 17, LevelPercent = 35, Lighting = null, Type = StorageType.M_2, Size = 2000, Speed = 4800, IncludesHeatsink = true, HeatsinkThickness = 0.024 }; storages.Add(Viper_VP4100_M_2_2TB);
            Storage Viper_VP4300_M_2_1TB__Aluminum_heatshield_ = new Storage() { Id = 47, Name = "Viper VP4300 M.2 1TB (Aluminum heatshield)", PartType = PartType.Storage, Manufacturer = Patriot, Price = 200, SellPrice = 67, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Type = StorageType.M_2, Size = 1000, Speed = 6600, IncludesHeatsink = true, HeatsinkThickness = 0.028 }; storages.Add(Viper_VP4300_M_2_1TB__Aluminum_heatshield_);
            Storage Viper_VP4300_M_2_1TB__Graphene_heatshield_ = new Storage() { Id = 48, Name = "Viper VP4300 M.2 1TB (Graphene heatshield)", PartType = PartType.Storage, Manufacturer = Patriot, Price = 200, SellPrice = 67, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Type = StorageType.M_2, Size = 1000, Speed = 6600, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(Viper_VP4300_M_2_1TB__Graphene_heatshield_);
            Storage Viper_VP4300_M_2_2TB__Aluminum_heatshield_ = new Storage() { Id = 49, Name = "Viper VP4300 M.2 2TB (Aluminum heatshield)", PartType = PartType.Storage, Manufacturer = Patriot, Price = 400, SellPrice = 133, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Type = StorageType.M_2, Size = 2000, Speed = 7100, IncludesHeatsink = true, HeatsinkThickness = 0.028 }; storages.Add(Viper_VP4300_M_2_2TB__Aluminum_heatshield_);
            Storage Viper_VP4300_M_2_2TB__Graphene_heatshield_ = new Storage() { Id = 50, Name = "Viper VP4300 M.2 2TB (Graphene heatshield)", PartType = PartType.Storage, Manufacturer = Patriot, Price = 400, SellPrice = 133, LevelUnlock = 31, LevelPercent = 1, Lighting = null, Type = StorageType.M_2, Size = 2000, Speed = 7100, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(Viper_VP4300_M_2_2TB__Graphene_heatshield_);
            Storage Viper_VPN100_M_2_1TB = new Storage() { Id = 51, Name = "Viper VPN100 M.2 1TB", PartType = PartType.Storage, Manufacturer = Patriot, Price = 370, SellPrice = 123, LevelUnlock = 17, LevelPercent = 20, Lighting = null, Type = StorageType.M_2, Size = 1000, Speed = 3200, IncludesHeatsink = true, HeatsinkThickness = 0.046 }; storages.Add(Viper_VPN100_M_2_1TB);
            Storage Viper_VPN100_M_2_256GB = new Storage() { Id = 52, Name = "Viper VPN100 M.2 256GB", PartType = PartType.Storage, Manufacturer = Patriot, Price = 160, SellPrice = 53, LevelUnlock = 17, LevelPercent = 20, Lighting = null, Type = StorageType.M_2, Size = 256, Speed = 3200, IncludesHeatsink = true, HeatsinkThickness = 0.046 }; storages.Add(Viper_VPN100_M_2_256GB);
            Storage Viper_VPN100_M_2_2TB = new Storage() { Id = 53, Name = "Viper VPN100 M.2 2TB", PartType = PartType.Storage, Manufacturer = Patriot, Price = 440, SellPrice = 147, LevelUnlock = 17, LevelPercent = 20, Lighting = null, Type = StorageType.M_2, Size = 2000, Speed = 3200, IncludesHeatsink = true, HeatsinkThickness = 0.046 }; storages.Add(Viper_VPN100_M_2_2TB);
            Storage Viper_VPN100_M_2_512GB = new Storage() { Id = 54, Name = "Viper VPN100 M.2 512GB", PartType = PartType.Storage, Manufacturer = Patriot, Price = 240, SellPrice = 80, LevelUnlock = 17, LevelPercent = 20, Lighting = null, Type = StorageType.M_2, Size = 512, Speed = 3200, IncludesHeatsink = true, HeatsinkThickness = 0.046 }; storages.Add(Viper_VPN100_M_2_512GB);
            Storage Viper_VPR100_M_2_1TB = new Storage() { Id = 55, Name = "Viper VPR100 M.2 1TB", PartType = PartType.Storage, Manufacturer = Patriot, Price = 350, SellPrice = 117, LevelUnlock = 17, LevelPercent = 20, Lighting = Color.RGB, Type = StorageType.M_2, Size = 1000, Speed = 3100, IncludesHeatsink = true, HeatsinkThickness = 0.028 }; storages.Add(Viper_VPR100_M_2_1TB);
            Storage Viper_VPR100_M_2_256GB = new Storage() { Id = 56, Name = "Viper VPR100 M.2 256GB", PartType = PartType.Storage, Manufacturer = Patriot, Price = 150, SellPrice = 50, LevelUnlock = 17, LevelPercent = 20, Lighting = Color.RGB, Type = StorageType.M_2, Size = 256, Speed = 2200, IncludesHeatsink = true, HeatsinkThickness = 0.028 }; storages.Add(Viper_VPR100_M_2_256GB);
            Storage Viper_VPR100_M_2_2TB = new Storage() { Id = 57, Name = "Viper VPR100 M.2 2TB", PartType = PartType.Storage, Manufacturer = Patriot, Price = 420, SellPrice = 140, LevelUnlock = 17, LevelPercent = 20, Lighting = Color.RGB, Type = StorageType.M_2, Size = 2000, Speed = 3100, IncludesHeatsink = true, HeatsinkThickness = 0.028 }; storages.Add(Viper_VPR100_M_2_2TB);
            Storage Viper_VPR100_M_2_512GB = new Storage() { Id = 58, Name = "Viper VPR100 M.2 512GB", PartType = PartType.Storage, Manufacturer = Patriot, Price = 230, SellPrice = 77, LevelUnlock = 17, LevelPercent = 20, Lighting = Color.RGB, Type = StorageType.M_2, Size = 512, Speed = 2700, IncludesHeatsink = true, HeatsinkThickness = 0.028 }; storages.Add(Viper_VPR100_M_2_512GB);
            Storage CARDEA_M_2_240GB = new Storage() { Id = 59, Name = "CARDEA M.2 240GB", PartType = PartType.Storage, Manufacturer = Team_Group, Price = 140, SellPrice = 47, LevelUnlock = 26, LevelPercent = 1, Lighting = null, Type = StorageType.M_2, Size = 240, Speed = 2000, IncludesHeatsink = true, HeatsinkThickness = 0.054 }; storages.Add(CARDEA_M_2_240GB);
            Storage CARDEA_M_2_480GB = new Storage() { Id = 60, Name = "CARDEA M.2 480GB", PartType = PartType.Storage, Manufacturer = Team_Group, Price = 220, SellPrice = 73, LevelUnlock = 26, LevelPercent = 1, Lighting = null, Type = StorageType.M_2, Size = 480, Speed = 2000, IncludesHeatsink = true, HeatsinkThickness = 0.054 }; storages.Add(CARDEA_M_2_480GB);
            Storage CARDEA_ZERO_Z340_M_2_PCIe_SSD_1TB = new Storage() { Id = 61, Name = "CARDEA ZERO Z340 M.2 PCIe SSD 1TB", PartType = PartType.Storage, Manufacturer = Team_Group, Price = 210, SellPrice = 70, LevelUnlock = 32, LevelPercent = 1, Lighting = null, Type = StorageType.M_2, Size = 1000, Speed = 3200, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(CARDEA_ZERO_Z340_M_2_PCIe_SSD_1TB);
            Storage CARDEA_ZERO_Z340_M_2_PCIe_SSD_256GB = new Storage() { Id = 62, Name = "CARDEA ZERO Z340 M.2 PCIe SSD 256GB", PartType = PartType.Storage, Manufacturer = Team_Group, Price = 100, SellPrice = 33, LevelUnlock = 32, LevelPercent = 1, Lighting = null, Type = StorageType.M_2, Size = 256, Speed = 2000, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(CARDEA_ZERO_Z340_M_2_PCIe_SSD_256GB);
            Storage CARDEA_ZERO_Z340_M_2_PCIe_SSD_4TB = new Storage() { Id = 63, Name = "CARDEA ZERO Z340 M.2 PCIe SSD 4TB", PartType = PartType.Storage, Manufacturer = Team_Group, Price = 750, SellPrice = 250, LevelUnlock = 32, LevelPercent = 1, Lighting = null, Type = StorageType.M_2, Size = 4000, Speed = 3200, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(CARDEA_ZERO_Z340_M_2_PCIe_SSD_4TB);
            Storage CARDEA_ZERO_Z340_M_2_PCIe_SSD_512GB = new Storage() { Id = 64, Name = "CARDEA ZERO Z340 M.2 PCIe SSD 512GB", PartType = PartType.Storage, Manufacturer = Team_Group, Price = 140, SellPrice = 47, LevelUnlock = 32, LevelPercent = 1, Lighting = null, Type = StorageType.M_2, Size = 512, Speed = 2700, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(CARDEA_ZERO_Z340_M_2_PCIe_SSD_512GB);
            Storage Ultimate_SU650_120GB = new Storage() { Id = 65, Name = "Ultimate SU650 120GB", PartType = PartType.Storage, Manufacturer = ADATA, Price = 80, SellPrice = 27, LevelUnlock = 4, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 120, Speed = 485, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(Ultimate_SU650_120GB);
            Storage Ultimate_SU650_240GB = new Storage() { Id = 66, Name = "Ultimate SU650 240GB", PartType = PartType.Storage, Manufacturer = ADATA, Price = 100, SellPrice = 33, LevelUnlock = 4, LevelPercent = 18, Lighting = null, Type = StorageType.SSD, Size = 240, Speed = 485, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(Ultimate_SU650_240GB);
            Storage Ultimate_SU650_480GB = new Storage() { Id = 67, Name = "Ultimate SU650 480GB", PartType = PartType.Storage, Manufacturer = ADATA, Price = 180, SellPrice = 60, LevelUnlock = 4, LevelPercent = 38, Lighting = null, Type = StorageType.SSD, Size = 480, Speed = 485, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(Ultimate_SU650_480GB);
            Storage Ultimate_SU650_960GB = new Storage() { Id = 68, Name = "Ultimate SU650 960GB", PartType = PartType.Storage, Manufacturer = ADATA, Price = 330, SellPrice = 110, LevelUnlock = 4, LevelPercent = 58, Lighting = null, Type = StorageType.SSD, Size = 960, Speed = 485, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(Ultimate_SU650_960GB);
            Storage XPG_SX950U_120GB = new Storage() { Id = 69, Name = "XPG SX950U 120GB", PartType = PartType.Storage, Manufacturer = ADATA, Price = 90, SellPrice = 30, LevelUnlock = 10, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 120, Speed = 540, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(XPG_SX950U_120GB);
            Storage XPG_SX950U_240GB = new Storage() { Id = 70, Name = "XPG SX950U 240GB", PartType = PartType.Storage, Manufacturer = ADATA, Price = 105, SellPrice = 35, LevelUnlock = 10, LevelPercent = 18, Lighting = null, Type = StorageType.SSD, Size = 240, Speed = 540, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(XPG_SX950U_240GB);
            Storage XPG_SX950U_480GB = new Storage() { Id = 71, Name = "XPG SX950U 480GB", PartType = PartType.Storage, Manufacturer = ADATA, Price = 190, SellPrice = 63, LevelUnlock = 10, LevelPercent = 38, Lighting = null, Type = StorageType.SSD, Size = 480, Speed = 540, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(XPG_SX950U_480GB);
            Storage XPG_SX950U_960GB = new Storage() { Id = 72, Name = "XPG SX950U 960GB", PartType = PartType.Storage, Manufacturer = ADATA, Price = 340, SellPrice = 113, LevelUnlock = 10, LevelPercent = 58, Lighting = null, Type = StorageType.SSD, Size = 960, Speed = 540, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(XPG_SX950U_960GB);
            Storage SL500_1TB = new Storage() { Id = 73, Name = "SL500 1TB", PartType = PartType.Storage, Manufacturer = Colorful, Price = 360, SellPrice = 120, LevelUnlock = 33, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 1000, Speed = 450, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(SL500_1TB);
            Storage SL500_1TB_DDR = new Storage() { Id = 74, Name = "SL500 1TB DDR", PartType = PartType.Storage, Manufacturer = Colorful, Price = 360, SellPrice = 120, LevelUnlock = 33, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 1000, Speed = 450, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(SL500_1TB_DDR);
            Storage SL500_240GB = new Storage() { Id = 75, Name = "SL500 240GB", PartType = PartType.Storage, Manufacturer = Colorful, Price = 105, SellPrice = 35, LevelUnlock = 33, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 240, Speed = 450, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(SL500_240GB);
            Storage SL500_256GB = new Storage() { Id = 76, Name = "SL500 256GB", PartType = PartType.Storage, Manufacturer = Colorful, Price = 115, SellPrice = 38, LevelUnlock = 33, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 256, Speed = 450, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(SL500_256GB);
            Storage SL500_360GB = new Storage() { Id = 77, Name = "SL500 360GB", PartType = PartType.Storage, Manufacturer = Colorful, Price = 130, SellPrice = 43, LevelUnlock = 33, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 360, Speed = 450, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(SL500_360GB);
            Storage SL500_480GB = new Storage() { Id = 78, Name = "SL500 480GB", PartType = PartType.Storage, Manufacturer = Colorful, Price = 160, SellPrice = 53, LevelUnlock = 33, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 480, Speed = 450, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(SL500_480GB);
            Storage SL500_512GB = new Storage() { Id = 79, Name = "SL500 512GB", PartType = PartType.Storage, Manufacturer = Colorful, Price = 180, SellPrice = 60, LevelUnlock = 33, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 512, Speed = 450, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(SL500_512GB);
            Storage SL500_512GB_DDR = new Storage() { Id = 80, Name = "SL500 512GB DDR", PartType = PartType.Storage, Manufacturer = Colorful, Price = 180, SellPrice = 60, LevelUnlock = 33, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 512, Speed = 450, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(SL500_512GB_DDR);
            Storage SL500_720GB = new Storage() { Id = 81, Name = "SL500 720GB", PartType = PartType.Storage, Manufacturer = Colorful, Price = 250, SellPrice = 83, LevelUnlock = 33, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 720, Speed = 450, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(SL500_720GB);
            Storage SL500_960GB = new Storage() { Id = 82, Name = "SL500 960GB", PartType = PartType.Storage, Manufacturer = Colorful, Price = 330, SellPrice = 110, LevelUnlock = 33, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 960, Speed = 450, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(SL500_960GB);
            Storage SL500_960GB_Blue_L_E = new Storage() { Id = 83, Name = "SL500 960GB Blue.L.E", PartType = PartType.Storage, Manufacturer = Colorful, Price = 330, SellPrice = 110, LevelUnlock = 33, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 960, Speed = 450, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(SL500_960GB_Blue_L_E);
            Storage Force_Series___LE200_120GB = new Storage() { Id = 84, Name = "Force Series - LE200 120GB", PartType = PartType.Storage, Manufacturer = CORSAIR, Price = 90, SellPrice = 30, LevelUnlock = 8, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 120, Speed = 525, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(Force_Series___LE200_120GB);
            Storage Force_Series___LE200_240GB = new Storage() { Id = 85, Name = "Force Series - LE200 240GB", PartType = PartType.Storage, Manufacturer = CORSAIR, Price = 105, SellPrice = 35, LevelUnlock = 8, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 240, Speed = 525, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(Force_Series___LE200_240GB);
            Storage Force_Series___LE200_480GB = new Storage() { Id = 86, Name = "Force Series - LE200 480GB", PartType = PartType.Storage, Manufacturer = CORSAIR, Price = 190, SellPrice = 63, LevelUnlock = 8, LevelPercent = 15, Lighting = null, Type = StorageType.SSD, Size = 480, Speed = 525, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(Force_Series___LE200_480GB);
            Storage Force_Series___LE200_960GB = new Storage() { Id = 87, Name = "Force Series - LE200 960GB", PartType = PartType.Storage, Manufacturer = CORSAIR, Price = 350, SellPrice = 117, LevelUnlock = 8, LevelPercent = 30, Lighting = null, Type = StorageType.SSD, Size = 960, Speed = 525, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(Force_Series___LE200_960GB);
            Storage SSD_120GB = new Storage() { Id = 88, Name = "SSD 120GB", PartType = PartType.Storage, Manufacturer = GIGABYTE, Price = 35, SellPrice = 12, LevelUnlock = 13, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 120, Speed = 440, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(SSD_120GB);
            Storage SSD_1TB = new Storage() { Id = 89, Name = "SSD 1TB", PartType = PartType.Storage, Manufacturer = GIGABYTE, Price = 90, SellPrice = 30, LevelUnlock = 13, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 1000, Speed = 525, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(SSD_1TB);
            Storage SSD_240GB = new Storage() { Id = 90, Name = "SSD 240GB", PartType = PartType.Storage, Manufacturer = GIGABYTE, Price = 40, SellPrice = 13, LevelUnlock = 13, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 240, Speed = 460, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(SSD_240GB);
            Storage SSD_256GB = new Storage() { Id = 91, Name = "SSD 256GB", PartType = PartType.Storage, Manufacturer = GIGABYTE, Price = 50, SellPrice = 17, LevelUnlock = 13, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 256, Speed = 510, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(SSD_256GB);
            Storage SSD_480GB = new Storage() { Id = 92, Name = "SSD 480GB", PartType = PartType.Storage, Manufacturer = GIGABYTE, Price = 60, SellPrice = 20, LevelUnlock = 13, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 480, Speed = 515, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(SSD_480GB);
            Storage UD_PRO_256GB = new Storage() { Id = 93, Name = "UD PRO 256GB", PartType = PartType.Storage, Manufacturer = GIGABYTE, Price = 60, SellPrice = 20, LevelUnlock = 13, LevelPercent = 15, Lighting = null, Type = StorageType.SSD, Size = 256, Speed = 515, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(UD_PRO_256GB);
            Storage UD_PRO_512GB = new Storage() { Id = 94, Name = "UD PRO 512GB", PartType = PartType.Storage, Manufacturer = GIGABYTE, Price = 150, SellPrice = 50, LevelUnlock = 13, LevelPercent = 15, Lighting = null, Type = StorageType.SSD, Size = 512, Speed = 515, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(UD_PRO_512GB);
            Storage FURY_RGB_240GB = new Storage() { Id = 95, Name = "FURY RGB 240GB", PartType = PartType.Storage, Manufacturer = HyperX, Price = 100, SellPrice = 33, LevelUnlock = 11, LevelPercent = 40, Lighting = Color.RGB, Type = StorageType.SSD, Size = 240, Speed = 530, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(FURY_RGB_240GB);
            Storage FURY_RGB_480GB = new Storage() { Id = 96, Name = "FURY RGB 480GB", PartType = PartType.Storage, Manufacturer = HyperX, Price = 180, SellPrice = 60, LevelUnlock = 11, LevelPercent = 40, Lighting = Color.RGB, Type = StorageType.SSD, Size = 480, Speed = 530, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(FURY_RGB_480GB);
            Storage FURY_RGB_960GB = new Storage() { Id = 97, Name = "FURY RGB 960GB", PartType = PartType.Storage, Manufacturer = HyperX, Price = 310, SellPrice = 103, LevelUnlock = 11, LevelPercent = 40, Lighting = Color.RGB, Type = StorageType.SSD, Size = 960, Speed = 530, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(FURY_RGB_960GB);
            Storage A400_SATA_SSD_120GB = new Storage() { Id = 98, Name = "A400 SATA SSD 120GB", PartType = PartType.Storage, Manufacturer = Kingston, Price = 30, SellPrice = 10, LevelUnlock = 30, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 120, Speed = 535, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(A400_SATA_SSD_120GB);
            Storage A400_SATA_SSD_240GB = new Storage() { Id = 99, Name = "A400 SATA SSD 240GB", PartType = PartType.Storage, Manufacturer = Kingston, Price = 50, SellPrice = 17, LevelUnlock = 30, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 240, Speed = 535, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(A400_SATA_SSD_240GB);
            Storage A400_SATA_SSD_480GB = new Storage() { Id = 100, Name = "A400 SATA SSD 480GB", PartType = PartType.Storage, Manufacturer = Kingston, Price = 75, SellPrice = 25, LevelUnlock = 30, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 480, Speed = 535, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(A400_SATA_SSD_480GB);
            Storage A400_SATA_SSD_960GB = new Storage() { Id = 101, Name = "A400 SATA SSD 960GB", PartType = PartType.Storage, Manufacturer = Kingston, Price = 90, SellPrice = 30, LevelUnlock = 30, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 960, Speed = 535, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(A400_SATA_SSD_960GB);
            Storage KC600_SATA_SSD_1024GB = new Storage() { Id = 102, Name = "KC600 SATA SSD 1024GB", PartType = PartType.Storage, Manufacturer = Kingston, Price = 90, SellPrice = 30, LevelUnlock = 30, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 1024, Speed = 535, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(KC600_SATA_SSD_1024GB);
            Storage KC600_SATA_SSD_2048GB = new Storage() { Id = 103, Name = "KC600 SATA SSD 2048GB", PartType = PartType.Storage, Manufacturer = Kingston, Price = 110, SellPrice = 37, LevelUnlock = 30, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 2048, Speed = 535, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(KC600_SATA_SSD_2048GB);
            Storage KC600_SATA_SSD_256GB = new Storage() { Id = 104, Name = "KC600 SATA SSD 256GB", PartType = PartType.Storage, Manufacturer = Kingston, Price = 50, SellPrice = 17, LevelUnlock = 30, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 256, Speed = 525, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(KC600_SATA_SSD_256GB);
            Storage KC600_SATA_SSD_512GB = new Storage() { Id = 105, Name = "KC600 SATA SSD 512GB", PartType = PartType.Storage, Manufacturer = Kingston, Price = 75, SellPrice = 25, LevelUnlock = 30, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 512, Speed = 535, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(KC600_SATA_SSD_512GB);
            Storage Burst_120GB = new Storage() { Id = 106, Name = "Burst 120GB", PartType = PartType.Storage, Manufacturer = Patriot, Price = 90, SellPrice = 30, LevelUnlock = 14, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 120, Speed = 550, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(Burst_120GB);
            Storage Burst_240GB = new Storage() { Id = 107, Name = "Burst 240GB", PartType = PartType.Storage, Manufacturer = Patriot, Price = 105, SellPrice = 35, LevelUnlock = 14, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 240, Speed = 525, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(Burst_240GB);
            Storage Burst_480GB = new Storage() { Id = 108, Name = "Burst 480GB", PartType = PartType.Storage, Manufacturer = Patriot, Price = 190, SellPrice = 63, LevelUnlock = 14, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 480, Speed = 550, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(Burst_480GB);
            Storage Mega_120GB = new Storage() { Id = 109, Name = "Mega 120GB", PartType = PartType.Storage, Manufacturer = Shean, Price = 80, SellPrice = 27, LevelUnlock = 1, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 120, Speed = 480, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(Mega_120GB);
            Storage Mega_250GB = new Storage() { Id = 110, Name = "Mega 250GB", PartType = PartType.Storage, Manufacturer = Shean, Price = 110, SellPrice = 37, LevelUnlock = 1, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 250, Speed = 480, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(Mega_250GB);
            Storage Mega_60GB = new Storage() { Id = 111, Name = "Mega 60GB", PartType = PartType.Storage, Manufacturer = Shean, Price = 60, SellPrice = 20, LevelUnlock = 1, LevelPercent = 1, Lighting = null, Type = StorageType.SSD, Size = 60, Speed = 480, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(Mega_60GB);
            Storage DELTA_Phantom_Gaming_RGB_1TB = new Storage() { Id = 112, Name = "DELTA Phantom Gaming RGB 1TB", PartType = PartType.Storage, Manufacturer = Team_Group, Price = 120, SellPrice = 40, LevelUnlock = 32, LevelPercent = 1, Lighting = Color.RGB, Type = StorageType.SSD, Size = 1000, Speed = 535, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(DELTA_Phantom_Gaming_RGB_1TB);
            Storage DELTA_Phantom_Gaming_RGB_500GB = new Storage() { Id = 113, Name = "DELTA Phantom Gaming RGB 500GB", PartType = PartType.Storage, Manufacturer = Team_Group, Price = 75, SellPrice = 25, LevelUnlock = 32, LevelPercent = 1, Lighting = Color.RGB, Type = StorageType.SSD, Size = 500, Speed = 535, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(DELTA_Phantom_Gaming_RGB_500GB);
            Storage DELTA_TUF_Gaming_Alliance_RGB_1TB = new Storage() { Id = 114, Name = "DELTA TUF Gaming Alliance RGB 1TB", PartType = PartType.Storage, Manufacturer = Team_Group, Price = 120, SellPrice = 40, LevelUnlock = 32, LevelPercent = 1, Lighting = Color.RGB, Type = StorageType.SSD, Size = 1000, Speed = 535, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(DELTA_TUF_Gaming_Alliance_RGB_1TB);
            Storage DELTA_TUF_Gaming_Alliance_RGB_500GB = new Storage() { Id = 115, Name = "DELTA TUF Gaming Alliance RGB 500GB", PartType = PartType.Storage, Manufacturer = Team_Group, Price = 75, SellPrice = 25, LevelUnlock = 32, LevelPercent = 1, Lighting = Color.RGB, Type = StorageType.SSD, Size = 500, Speed = 535, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(DELTA_TUF_Gaming_Alliance_RGB_500GB);
            Storage T_FORCE_Delta_MAX_1TB = new Storage() { Id = 116, Name = "T-FORCE Delta MAX 1TB", PartType = PartType.Storage, Manufacturer = Team_Group, Price = 150, SellPrice = 50, LevelUnlock = 24, LevelPercent = 30, Lighting = Color.RGB, Type = StorageType.SSD, Size = 1000, Speed = 560, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(T_FORCE_Delta_MAX_1TB);
            Storage T_FORCE_Delta_MAX_250GB = new Storage() { Id = 117, Name = "T-FORCE Delta MAX 250GB", PartType = PartType.Storage, Manufacturer = Team_Group, Price = 80, SellPrice = 27, LevelUnlock = 24, LevelPercent = 30, Lighting = Color.RGB, Type = StorageType.SSD, Size = 250, Speed = 560, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(T_FORCE_Delta_MAX_250GB);
            Storage T_FORCE_Delta_MAX_500GB = new Storage() { Id = 118, Name = "T-FORCE Delta MAX 500GB", PartType = PartType.Storage, Manufacturer = Team_Group, Price = 110, SellPrice = 37, LevelUnlock = 24, LevelPercent = 30, Lighting = Color.RGB, Type = StorageType.SSD, Size = 500, Speed = 560, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(T_FORCE_Delta_MAX_500GB);
            Storage T_FORCE_Delta_RGB_1TB__Black_ = new Storage() { Id = 119, Name = "T-FORCE Delta RGB 1TB (Black)", PartType = PartType.Storage, Manufacturer = Team_Group, Price = 140, SellPrice = 47, LevelUnlock = 24, LevelPercent = 30, Lighting = Color.RGB, Type = StorageType.SSD, Size = 1000, Speed = 560, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(T_FORCE_Delta_RGB_1TB__Black_);
            Storage T_FORCE_Delta_RGB_1TB__White_ = new Storage() { Id = 120, Name = "T-FORCE Delta RGB 1TB (White)", PartType = PartType.Storage, Manufacturer = Team_Group, Price = 140, SellPrice = 47, LevelUnlock = 24, LevelPercent = 30, Lighting = Color.RGB, Type = StorageType.SSD, Size = 1000, Speed = 560, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(T_FORCE_Delta_RGB_1TB__White_);
            Storage T_FORCE_Delta_RGB_250GB__Black_ = new Storage() { Id = 121, Name = "T-FORCE Delta RGB 250GB (Black)", PartType = PartType.Storage, Manufacturer = Team_Group, Price = 70, SellPrice = 23, LevelUnlock = 24, LevelPercent = 30, Lighting = Color.RGB, Type = StorageType.SSD, Size = 250, Speed = 560, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(T_FORCE_Delta_RGB_250GB__Black_);
            Storage T_FORCE_Delta_RGB_250GB__White_ = new Storage() { Id = 122, Name = "T-FORCE Delta RGB 250GB (White)", PartType = PartType.Storage, Manufacturer = Team_Group, Price = 70, SellPrice = 23, LevelUnlock = 24, LevelPercent = 30, Lighting = Color.RGB, Type = StorageType.SSD, Size = 250, Speed = 560, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(T_FORCE_Delta_RGB_250GB__White_);
            Storage T_FORCE_Delta_RGB_500GB__Black_ = new Storage() { Id = 123, Name = "T-FORCE Delta RGB 500GB (Black)", PartType = PartType.Storage, Manufacturer = Team_Group, Price = 100, SellPrice = 33, LevelUnlock = 24, LevelPercent = 30, Lighting = Color.RGB, Type = StorageType.SSD, Size = 500, Speed = 560, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(T_FORCE_Delta_RGB_500GB__Black_);
            Storage T_FORCE_Delta_RGB_500GB__White_ = new Storage() { Id = 124, Name = "T-FORCE Delta RGB 500GB (White)", PartType = PartType.Storage, Manufacturer = Team_Group, Price = 100, SellPrice = 33, LevelUnlock = 24, LevelPercent = 30, Lighting = Color.RGB, Type = StorageType.SSD, Size = 500, Speed = 560, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(T_FORCE_Delta_RGB_500GB__White_);
            Storage T_FORCE_Vulcan_1TB = new Storage() { Id = 125, Name = "T-FORCE Vulcan 1TB", PartType = PartType.Storage, Manufacturer = Team_Group, Price = 130, SellPrice = 43, LevelUnlock = 24, LevelPercent = 30, Lighting = null, Type = StorageType.SSD, Size = 1000, Speed = 560, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(T_FORCE_Vulcan_1TB);
            Storage T_FORCE_Vulcan_250GB = new Storage() { Id = 126, Name = "T-FORCE Vulcan 250GB", PartType = PartType.Storage, Manufacturer = Team_Group, Price = 60, SellPrice = 20, LevelUnlock = 24, LevelPercent = 30, Lighting = null, Type = StorageType.SSD, Size = 250, Speed = 560, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(T_FORCE_Vulcan_250GB);
            Storage T_FORCE_Vulcan_500GB = new Storage() { Id = 127, Name = "T-FORCE Vulcan 500GB", PartType = PartType.Storage, Manufacturer = Team_Group, Price = 90, SellPrice = 30, LevelUnlock = 24, LevelPercent = 30, Lighting = null, Type = StorageType.SSD, Size = 500, Speed = 560, IncludesHeatsink = false, HeatsinkThickness = null }; storages.Add(T_FORCE_Vulcan_500GB);
            #endregion
            _context.Storage.AddRange(storages);
            #region WC CPU Block
            List<WC_CPU_Block> wc_cpu_blocks = new List<WC_CPU_Block>();
            WC_CPU_Block Eisblock_XPX__Black_ = new WC_CPU_Block() { Id = 1, Name = "Eisblock XPX (Black)", PartType = PartType.WC_CPU_Block, Manufacturer = Alphacool, Price = 70, SellPrice = 23, LevelUnlock = 18, LevelPercent = 20, Lighting = null, CPUSockets = new List<CPUSocket>() { LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200 } }; wc_cpu_blocks.Add(Eisblock_XPX__Black_);
            WC_CPU_Block Eisblock_XPX__Blue_ = new WC_CPU_Block() { Id = 2, Name = "Eisblock XPX (Blue)", PartType = PartType.WC_CPU_Block, Manufacturer = Alphacool, Price = 70, SellPrice = 23, LevelUnlock = 18, LevelPercent = 20, Lighting = null, CPUSockets = new List<CPUSocket>() { LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200 } }; wc_cpu_blocks.Add(Eisblock_XPX__Blue_);
            WC_CPU_Block Eisblock_XPX__Grey_ = new WC_CPU_Block() { Id = 3, Name = "Eisblock XPX (Grey)", PartType = PartType.WC_CPU_Block, Manufacturer = Alphacool, Price = 70, SellPrice = 23, LevelUnlock = 18, LevelPercent = 20, Lighting = null, CPUSockets = new List<CPUSocket>() { LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200 } }; wc_cpu_blocks.Add(Eisblock_XPX__Grey_);
            WC_CPU_Block Eisblock_XPX__Matte_Grey_ = new WC_CPU_Block() { Id = 4, Name = "Eisblock XPX (Matte Grey)", PartType = PartType.WC_CPU_Block, Manufacturer = Alphacool, Price = 70, SellPrice = 23, LevelUnlock = 18, LevelPercent = 20, Lighting = null, CPUSockets = new List<CPUSocket>() { AM4 } }; wc_cpu_blocks.Add(Eisblock_XPX__Matte_Grey_);
            WC_CPU_Block Eisblock_XPX__Red_ = new WC_CPU_Block() { Id = 5, Name = "Eisblock XPX (Red)", PartType = PartType.WC_CPU_Block, Manufacturer = Alphacool, Price = 70, SellPrice = 23, LevelUnlock = 18, LevelPercent = 20, Lighting = null, CPUSockets = new List<CPUSocket>() { AM4 } }; wc_cpu_blocks.Add(Eisblock_XPX__Red_);
            WC_CPU_Block Eisblock_XPX__Silver_ = new WC_CPU_Block() { Id = 6, Name = "Eisblock XPX (Silver)", PartType = PartType.WC_CPU_Block, Manufacturer = Alphacool, Price = 70, SellPrice = 23, LevelUnlock = 18, LevelPercent = 20, Lighting = null, CPUSockets = new List<CPUSocket>() { AM3_, AM4 } }; wc_cpu_blocks.Add(Eisblock_XPX__Silver_);
            WC_CPU_Block Eisblock_XPX_Pro_1U__LGA_2066_ = new WC_CPU_Block() { Id = 7, Name = "Eisblock XPX Pro 1U (LGA 2066)", PartType = PartType.WC_CPU_Block, Manufacturer = Alphacool, Price = 80, SellPrice = 27, LevelUnlock = 24, LevelPercent = 1, Lighting = null, CPUSockets = new List<CPUSocket>() { LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200 } }; wc_cpu_blocks.Add(Eisblock_XPX_Pro_1U__LGA_2066_);
            WC_CPU_Block Eisblock_XPX_Pro_1U__TR4_ = new WC_CPU_Block() { Id = 8, Name = "Eisblock XPX Pro 1U (TR4)", PartType = PartType.WC_CPU_Block, Manufacturer = Alphacool, Price = 80, SellPrice = 27, LevelUnlock = 22, LevelPercent = 1, Lighting = null, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(Eisblock_XPX_Pro_1U__TR4_);
            WC_CPU_Block Hydro_X_Series_XC7_RGB_115X_AM4__Black_ = new WC_CPU_Block() { Id = 9, Name = "Hydro X Series XC7 RGB 115X/AM4 (Black)", PartType = PartType.WC_CPU_Block, Manufacturer = CORSAIR, Price = 70, SellPrice = 23, LevelUnlock = 25, LevelPercent = 10, Lighting = Color.RGB, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(Hydro_X_Series_XC7_RGB_115X_AM4__Black_);
            WC_CPU_Block Hydro_X_Series_XC7_RGB_115X_AM4__White_ = new WC_CPU_Block() { Id = 10, Name = "Hydro X Series XC7 RGB 115X/AM4 (White)", PartType = PartType.WC_CPU_Block, Manufacturer = CORSAIR, Price = 70, SellPrice = 23, LevelUnlock = 25, LevelPercent = 10, Lighting = Color.RGB, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(Hydro_X_Series_XC7_RGB_115X_AM4__White_);
            WC_CPU_Block Hydro_X_Series_XC7_RGB_2066__Black_ = new WC_CPU_Block() { Id = 11, Name = "Hydro X Series XC7 RGB 2066 (Black)", PartType = PartType.WC_CPU_Block, Manufacturer = CORSAIR, Price = 70, SellPrice = 23, LevelUnlock = 25, LevelPercent = 10, Lighting = Color.RGB, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(Hydro_X_Series_XC7_RGB_2066__Black_);
            WC_CPU_Block Hydro_X_Series_XC7_RGB_2066__White_ = new WC_CPU_Block() { Id = 12, Name = "Hydro X Series XC7 RGB 2066 (White)", PartType = PartType.WC_CPU_Block, Manufacturer = CORSAIR, Price = 70, SellPrice = 23, LevelUnlock = 25, LevelPercent = 10, Lighting = Color.RGB, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(Hydro_X_Series_XC7_RGB_2066__White_);
            WC_CPU_Block Hydro_X_Series_XC7_RGB_sTR4__Black_ = new WC_CPU_Block() { Id = 13, Name = "Hydro X Series XC7 RGB sTR4 (Black)", PartType = PartType.WC_CPU_Block, Manufacturer = CORSAIR, Price = 70, SellPrice = 23, LevelUnlock = 25, LevelPercent = 10, Lighting = Color.RGB, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(Hydro_X_Series_XC7_RGB_sTR4__Black_);
            WC_CPU_Block Hydro_X_Series_XC7_RGB_sTR4__White_ = new WC_CPU_Block() { Id = 14, Name = "Hydro X Series XC7 RGB sTR4 (White)", PartType = PartType.WC_CPU_Block, Manufacturer = CORSAIR, Price = 70, SellPrice = 23, LevelUnlock = 25, LevelPercent = 10, Lighting = Color.RGB, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(Hydro_X_Series_XC7_RGB_sTR4__White_);
            WC_CPU_Block Hydro_X_Series_XC9_RGB_2066__Black_ = new WC_CPU_Block() { Id = 15, Name = "Hydro X Series XC9 RGB 2066 (Black)", PartType = PartType.WC_CPU_Block, Manufacturer = CORSAIR, Price = 75, SellPrice = 25, LevelUnlock = 25, LevelPercent = 40, Lighting = Color.RGB, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(Hydro_X_Series_XC9_RGB_2066__Black_);
            WC_CPU_Block Hydro_X_Series_XC9_RGB_2066__White_ = new WC_CPU_Block() { Id = 16, Name = "Hydro X Series XC9 RGB 2066 (White)", PartType = PartType.WC_CPU_Block, Manufacturer = CORSAIR, Price = 75, SellPrice = 25, LevelUnlock = 25, LevelPercent = 40, Lighting = Color.RGB, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(Hydro_X_Series_XC9_RGB_2066__White_);
            WC_CPU_Block Hydro_X_Series_XC9_RGB_sTR4__Black_ = new WC_CPU_Block() { Id = 17, Name = "Hydro X Series XC9 RGB sTR4 (Black)", PartType = PartType.WC_CPU_Block, Manufacturer = CORSAIR, Price = 75, SellPrice = 25, LevelUnlock = 25, LevelPercent = 40, Lighting = Color.RGB, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(Hydro_X_Series_XC9_RGB_sTR4__Black_);
            WC_CPU_Block Hydro_X_Series_XC9_RGB_sTR4__White_ = new WC_CPU_Block() { Id = 18, Name = "Hydro X Series XC9 RGB sTR4 (White)", PartType = PartType.WC_CPU_Block, Manufacturer = CORSAIR, Price = 75, SellPrice = 25, LevelUnlock = 25, LevelPercent = 40, Lighting = Color.RGB, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(Hydro_X_Series_XC9_RGB_sTR4__White_);
            WC_CPU_Block EK_Supremacy_Edge_Black_Acetal = new WC_CPU_Block() { Id = 19, Name = "EK-Supremacy Edge Black Acetal", PartType = PartType.WC_CPU_Block, Manufacturer = EKWB, Price = 300, SellPrice = 100, LevelUnlock = 17, LevelPercent = 1, Lighting = null, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(EK_Supremacy_Edge_Black_Acetal);
            WC_CPU_Block EK_Supremacy_Edge_Black_Plexi = new WC_CPU_Block() { Id = 20, Name = "EK-Supremacy Edge Black Plexi", PartType = PartType.WC_CPU_Block, Manufacturer = EKWB, Price = 300, SellPrice = 100, LevelUnlock = 17, LevelPercent = 1, Lighting = null, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(EK_Supremacy_Edge_Black_Plexi);
            WC_CPU_Block EK_Supremacy_Edge_Nickel_Acetal = new WC_CPU_Block() { Id = 21, Name = "EK-Supremacy Edge Nickel Acetal", PartType = PartType.WC_CPU_Block, Manufacturer = EKWB, Price = 300, SellPrice = 100, LevelUnlock = 17, LevelPercent = 1, Lighting = null, CPUSockets = new List<CPUSocket>() { AM4, LGA_2011_V3, LGA_2066, TR4, sTRX4 } }; wc_cpu_blocks.Add(EK_Supremacy_Edge_Nickel_Acetal);
            WC_CPU_Block EK_Supremacy_Edge_Nickel_Plexi = new WC_CPU_Block() { Id = 22, Name = "EK-Supremacy Edge Nickel Plexi", PartType = PartType.WC_CPU_Block, Manufacturer = EKWB, Price = 300, SellPrice = 100, LevelUnlock = 17, LevelPercent = 1, Lighting = null, CPUSockets = new List<CPUSocket>() { AM4, LGA_2011_V3, LGA_2066, TR4, sTRX4 } }; wc_cpu_blocks.Add(EK_Supremacy_Edge_Nickel_Plexi);
            WC_CPU_Block EK_Supremacy_Edge_Red_Acetal = new WC_CPU_Block() { Id = 23, Name = "EK-Supremacy Edge Red Acetal", PartType = PartType.WC_CPU_Block, Manufacturer = EKWB, Price = 300, SellPrice = 100, LevelUnlock = 17, LevelPercent = 1, Lighting = null, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(EK_Supremacy_Edge_Red_Acetal);
            WC_CPU_Block EK_Supremacy_Edge_Red_Plexi = new WC_CPU_Block() { Id = 24, Name = "EK-Supremacy Edge Red Plexi", PartType = PartType.WC_CPU_Block, Manufacturer = EKWB, Price = 300, SellPrice = 100, LevelUnlock = 17, LevelPercent = 1, Lighting = null, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(EK_Supremacy_Edge_Red_Plexi);
            WC_CPU_Block EK_Supremacy_EVO___Acetal = new WC_CPU_Block() { Id = 25, Name = "EK-Supremacy EVO - Acetal", PartType = PartType.WC_CPU_Block, Manufacturer = EKWB, Price = 300, SellPrice = 100, LevelUnlock = 16, LevelPercent = 1, Lighting = null, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(EK_Supremacy_EVO___Acetal);
            WC_CPU_Block EK_Supremacy_EVO___Full_Nickel = new WC_CPU_Block() { Id = 26, Name = "EK-Supremacy EVO - Full Nickel", PartType = PartType.WC_CPU_Block, Manufacturer = EKWB, Price = 300, SellPrice = 100, LevelUnlock = 16, LevelPercent = 1, Lighting = null, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(EK_Supremacy_EVO___Full_Nickel);
            WC_CPU_Block EK_Supremacy_EVO___Nickel = new WC_CPU_Block() { Id = 27, Name = "EK-Supremacy EVO - Nickel", PartType = PartType.WC_CPU_Block, Manufacturer = EKWB, Price = 300, SellPrice = 100, LevelUnlock = 16, LevelPercent = 1, Lighting = null, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(EK_Supremacy_EVO___Nickel);
            WC_CPU_Block EK_Supremacy_Evo_Acetal_Blue = new WC_CPU_Block() { Id = 28, Name = "EK-Supremacy Evo Acetal Blue", PartType = PartType.WC_CPU_Block, Manufacturer = EKWB, Price = 300, SellPrice = 100, LevelUnlock = 16, LevelPercent = 1, Lighting = null, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(EK_Supremacy_Evo_Acetal_Blue);
            WC_CPU_Block EK_Supremacy_Evo_Plexi_Red = new WC_CPU_Block() { Id = 29, Name = "EK-Supremacy Evo Plexi Red", PartType = PartType.WC_CPU_Block, Manufacturer = EKWB, Price = 300, SellPrice = 100, LevelUnlock = 16, LevelPercent = 1, Lighting = null, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(EK_Supremacy_Evo_Plexi_Red);
            WC_CPU_Block EK_Supremacy_EVO_RGB___Nickel = new WC_CPU_Block() { Id = 30, Name = "EK-Supremacy EVO RGB - Nickel", PartType = PartType.WC_CPU_Block, Manufacturer = EKWB, Price = 360, SellPrice = 120, LevelUnlock = 23, LevelPercent = 1, Lighting = Color.RGB, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(EK_Supremacy_EVO_RGB___Nickel);
            WC_CPU_Block EK_Supremacy_Evo_White_Acetal = new WC_CPU_Block() { Id = 31, Name = "EK-Supremacy Evo White Acetal", PartType = PartType.WC_CPU_Block, Manufacturer = EKWB, Price = 300, SellPrice = 100, LevelUnlock = 16, LevelPercent = 1, Lighting = null, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(EK_Supremacy_Evo_White_Acetal);
            WC_CPU_Block EK_Supremacy_sTR4___Full_Nickel = new WC_CPU_Block() { Id = 32, Name = "EK-Supremacy sTR4 - Full Nickel", PartType = PartType.WC_CPU_Block, Manufacturer = EKWB, Price = 300, SellPrice = 100, LevelUnlock = 22, LevelPercent = 1, Lighting = null, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(EK_Supremacy_sTR4___Full_Nickel);
            WC_CPU_Block EK_Supremacy_sTR4___Nickel = new WC_CPU_Block() { Id = 33, Name = "EK-Supremacy sTR4 - Nickel", PartType = PartType.WC_CPU_Block, Manufacturer = EKWB, Price = 300, SellPrice = 100, LevelUnlock = 22, LevelPercent = 1, Lighting = null, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(EK_Supremacy_sTR4___Nickel);
            WC_CPU_Block EK_Supremacy_sTR4___Nickel_Acetal = new WC_CPU_Block() { Id = 34, Name = "EK-Supremacy sTR4 - Nickel+Acetal", PartType = PartType.WC_CPU_Block, Manufacturer = EKWB, Price = 300, SellPrice = 100, LevelUnlock = 22, LevelPercent = 1, Lighting = null, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(EK_Supremacy_sTR4___Nickel_Acetal);
            WC_CPU_Block EK_Supremacy_sTR4_RGB___Nickel = new WC_CPU_Block() { Id = 35, Name = "EK-Supremacy sTR4 RGB - Nickel", PartType = PartType.WC_CPU_Block, Manufacturer = EKWB, Price = 360, SellPrice = 120, LevelUnlock = 23, LevelPercent = 1, Lighting = Color.RGB, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(EK_Supremacy_sTR4_RGB___Nickel);
            WC_CPU_Block EK_WB_Custom = new WC_CPU_Block() { Id = 36, Name = "EK-WB Custom", PartType = PartType.WC_CPU_Block, Manufacturer = EKWB, Price = 1, SellPrice = 0, LevelUnlock = 34, LevelPercent = 1, Lighting = Color.RGB, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(EK_WB_Custom);
            WC_CPU_Block Z490_Aorus_All_In_One_Monoblock = new WC_CPU_Block() { Id = 37, Name = "Z490 Aorus All-In-One Monoblock", PartType = PartType.WC_CPU_Block, Manufacturer = GIGABYTE, Price = 1, SellPrice = 0, LevelUnlock = 34, LevelPercent = 1, Lighting = Color.RGB, CPUSockets = new List<CPUSocket>() { AM4, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(Z490_Aorus_All_In_One_Monoblock);
            WC_CPU_Block Z590_Aorus_All_In_One_Display_Monoblock = new WC_CPU_Block() { Id = 38, Name = "Z590 Aorus All-In-One Display Monoblock", PartType = PartType.WC_CPU_Block, Manufacturer = GIGABYTE, Price = 1, SellPrice = 0, LevelUnlock = 34, LevelPercent = 1, Lighting = Color.RGB, CPUSockets = new List<CPUSocket>() { TR4, sTRX4 } }; wc_cpu_blocks.Add(Z590_Aorus_All_In_One_Display_Monoblock);
            WC_CPU_Block CWB_RGB = new WC_CPU_Block() { Id = 39, Name = "CWB-RGB", PartType = PartType.WC_CPU_Block, Manufacturer = Raijintek, Price = 420, SellPrice = 140, LevelUnlock = 27, LevelPercent = 1, Lighting = Color.RGB, CPUSockets = new List<CPUSocket>() { AM4 } }; wc_cpu_blocks.Add(CWB_RGB);
            WC_CPU_Block CWB_TR4_RBW = new WC_CPU_Block() { Id = 40, Name = "CWB-TR4 RBW", PartType = PartType.WC_CPU_Block, Manufacturer = Raijintek, Price = 420, SellPrice = 140, LevelUnlock = 27, LevelPercent = 1, Lighting = Color.RGB, CPUSockets = new List<CPUSocket>() { AM4 } }; wc_cpu_blocks.Add(CWB_TR4_RBW);
            WC_CPU_Block FORKIS_ELITE = new WC_CPU_Block() { Id = 41, Name = "FORKIS ELITE", PartType = PartType.WC_CPU_Block, Manufacturer = Raijintek, Price = 65, SellPrice = 22, LevelUnlock = 32, LevelPercent = 1, Lighting = null, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(FORKIS_ELITE);
            WC_CPU_Block FORKIS_PRO_RBW = new WC_CPU_Block() { Id = 42, Name = "FORKIS PRO RBW", PartType = PartType.WC_CPU_Block, Manufacturer = Raijintek, Price = 70, SellPrice = 23, LevelUnlock = 32, LevelPercent = 1, Lighting = Color.RGB, CPUSockets = new List<CPUSocket>() { AM3_, AM4, FM2, FM2_, LGA_1151__Coffee_Lake_, LGA_1151__Kaby_Lake_, LGA_1151__Skylake_, LGA_1200, LGA_2011_V3, LGA_2066 } }; wc_cpu_blocks.Add(FORKIS_PRO_RBW);
            #endregion
            _context.WC_CPU_Block.AddRange(wc_cpu_blocks);
            #region WC Radiator
            List<WC_Radiator> wc_radiators = new List<WC_Radiator>();
            WC_Radiator NexXxoS_ST30_120 = new WC_Radiator() { Id = 1, Name = "NexXxoS ST30 120", PartType = PartType.WC_Radiator, Manufacturer = Alphacool, Price = 130, SellPrice = 43, LevelUnlock = 19, LevelPercent = 1, Lighting = null, AirFlow = 75, RadiatorSize = 120, RadiatorSlots = 1, RadiatorThickness = 0.277, AirPresure = 2.93 }; wc_radiators.Add(NexXxoS_ST30_120);
            WC_Radiator NexXxoS_ST30_140 = new WC_Radiator() { Id = 2, Name = "NexXxoS ST30 140", PartType = PartType.WC_Radiator, Manufacturer = Alphacool, Price = 150, SellPrice = 50, LevelUnlock = 19, LevelPercent = 1, Lighting = null, AirFlow = 90, RadiatorSize = 140, RadiatorSlots = 1, RadiatorThickness = 0.298, AirPresure = 2.71 }; wc_radiators.Add(NexXxoS_ST30_140);
            WC_Radiator NexXxoS_ST30_240 = new WC_Radiator() { Id = 3, Name = "NexXxoS ST30 240", PartType = PartType.WC_Radiator, Manufacturer = Alphacool, Price = 230, SellPrice = 77, LevelUnlock = 19, LevelPercent = 1, Lighting = null, AirFlow = 110, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.277, AirPresure = 2.93 }; wc_radiators.Add(NexXxoS_ST30_240);
            WC_Radiator NexXxoS_ST30_280 = new WC_Radiator() { Id = 4, Name = "NexXxoS ST30 280", PartType = PartType.WC_Radiator, Manufacturer = Alphacool, Price = 280, SellPrice = 93, LevelUnlock = 19, LevelPercent = 1, Lighting = null, AirFlow = 130, RadiatorSize = 280, RadiatorSlots = 2, RadiatorThickness = 0.299, AirPresure = 2.71 }; wc_radiators.Add(NexXxoS_ST30_280);
            WC_Radiator NexXxoS_ST30_360 = new WC_Radiator() { Id = 5, Name = "NexXxoS ST30 360", PartType = PartType.WC_Radiator, Manufacturer = Alphacool, Price = 300, SellPrice = 100, LevelUnlock = 19, LevelPercent = 1, Lighting = null, AirFlow = 150, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.273, AirPresure = 2.93 }; wc_radiators.Add(NexXxoS_ST30_360);
            WC_Radiator Hydro_X_Series_XR5_120 = new WC_Radiator() { Id = 6, Name = "Hydro X Series XR5 120", PartType = PartType.WC_Radiator, Manufacturer = CORSAIR, Price = 150, SellPrice = 50, LevelUnlock = 25, LevelPercent = 10, Lighting = null, AirFlow = 75, RadiatorSize = 120, RadiatorSlots = 1, RadiatorThickness = 0.257, AirPresure = 2.2 }; wc_radiators.Add(Hydro_X_Series_XR5_120);
            WC_Radiator Hydro_X_Series_XR5_140 = new WC_Radiator() { Id = 7, Name = "Hydro X Series XR5 140", PartType = PartType.WC_Radiator, Manufacturer = CORSAIR, Price = 180, SellPrice = 60, LevelUnlock = 25, LevelPercent = 10, Lighting = null, AirFlow = 90, RadiatorSize = 140, RadiatorSlots = 1, RadiatorThickness = 0.277, AirPresure = 2.2 }; wc_radiators.Add(Hydro_X_Series_XR5_140);
            WC_Radiator Hydro_X_Series_XR5_240 = new WC_Radiator() { Id = 8, Name = "Hydro X Series XR5 240", PartType = PartType.WC_Radiator, Manufacturer = CORSAIR, Price = 250, SellPrice = 83, LevelUnlock = 25, LevelPercent = 10, Lighting = null, AirFlow = 110, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.254, AirPresure = 2.2 }; wc_radiators.Add(Hydro_X_Series_XR5_240);
            WC_Radiator Hydro_X_Series_XR5_280 = new WC_Radiator() { Id = 9, Name = "Hydro X Series XR5 280", PartType = PartType.WC_Radiator, Manufacturer = CORSAIR, Price = 320, SellPrice = 107, LevelUnlock = 25, LevelPercent = 10, Lighting = null, AirFlow = 130, RadiatorSize = 280, RadiatorSlots = 2, RadiatorThickness = 0.277, AirPresure = 2.2 }; wc_radiators.Add(Hydro_X_Series_XR5_280);
            WC_Radiator Hydro_X_Series_XR5_360 = new WC_Radiator() { Id = 10, Name = "Hydro X Series XR5 360", PartType = PartType.WC_Radiator, Manufacturer = CORSAIR, Price = 370, SellPrice = 123, LevelUnlock = 25, LevelPercent = 10, Lighting = null, AirFlow = 150, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.257, AirPresure = 2.2 }; wc_radiators.Add(Hydro_X_Series_XR5_360);
            WC_Radiator Hydro_X_Series_XR5_420 = new WC_Radiator() { Id = 11, Name = "Hydro X Series XR5 420", PartType = PartType.WC_Radiator, Manufacturer = CORSAIR, Price = 450, SellPrice = 150, LevelUnlock = 25, LevelPercent = 10, Lighting = null, AirFlow = 160, RadiatorSize = 420, RadiatorSlots = 3, RadiatorThickness = 0.277, AirPresure = 2.2 }; wc_radiators.Add(Hydro_X_Series_XR5_420);
            WC_Radiator Hydro_X_Series_XR7_240 = new WC_Radiator() { Id = 12, Name = "Hydro X Series XR7 240", PartType = PartType.WC_Radiator, Manufacturer = CORSAIR, Price = 250, SellPrice = 83, LevelUnlock = 25, LevelPercent = 40, Lighting = null, AirFlow = 110, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.38, AirPresure = 2.2 }; wc_radiators.Add(Hydro_X_Series_XR7_240);
            WC_Radiator Hydro_X_Series_XR7_360 = new WC_Radiator() { Id = 13, Name = "Hydro X Series XR7 360", PartType = PartType.WC_Radiator, Manufacturer = CORSAIR, Price = 370, SellPrice = 123, LevelUnlock = 25, LevelPercent = 40, Lighting = null, AirFlow = 150, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.38, AirPresure = 2.2 }; wc_radiators.Add(Hydro_X_Series_XR7_360);
            WC_Radiator Hydro_X_Series_XR7_480 = new WC_Radiator() { Id = 14, Name = "Hydro X Series XR7 480", PartType = PartType.WC_Radiator, Manufacturer = CORSAIR, Price = 450, SellPrice = 150, LevelUnlock = 25, LevelPercent = 40, Lighting = null, AirFlow = 170, RadiatorSize = 480, RadiatorSlots = 4, RadiatorThickness = 0.38, AirPresure = 2.2 }; wc_radiators.Add(Hydro_X_Series_XR7_480);
            WC_Radiator EK_CoolStream_SE_120 = new WC_Radiator() { Id = 15, Name = "EK-CoolStream SE 120", PartType = PartType.WC_Radiator, Manufacturer = EKWB, Price = 130, SellPrice = 43, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 75, RadiatorSize = 120, RadiatorSlots = 1, RadiatorThickness = 0.274, AirPresure = 2.93 }; wc_radiators.Add(EK_CoolStream_SE_120);
            WC_Radiator EK_CoolStream_SE_120_RGB = new WC_Radiator() { Id = 16, Name = "EK-CoolStream SE 120 RGB", PartType = PartType.WC_Radiator, Manufacturer = EKWB, Price = 280, SellPrice = 93, LevelUnlock = 23, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 75, RadiatorSize = 120, RadiatorSlots = 1, RadiatorThickness = 0.274, AirPresure = 2.93 }; wc_radiators.Add(EK_CoolStream_SE_120_RGB);
            WC_Radiator EK_CoolStream_SE_140 = new WC_Radiator() { Id = 17, Name = "EK-CoolStream SE 140", PartType = PartType.WC_Radiator, Manufacturer = EKWB, Price = 150, SellPrice = 50, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 90, RadiatorSize = 140, RadiatorSlots = 1, RadiatorThickness = 0.274, AirPresure = 2.71 }; wc_radiators.Add(EK_CoolStream_SE_140);
            WC_Radiator EK_CoolStream_SE_240 = new WC_Radiator() { Id = 18, Name = "EK-CoolStream SE 240", PartType = PartType.WC_Radiator, Manufacturer = EKWB, Price = 230, SellPrice = 77, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 110, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.274, AirPresure = 2.93 }; wc_radiators.Add(EK_CoolStream_SE_240);
            WC_Radiator EK_CoolStream_SE_240_RGB = new WC_Radiator() { Id = 19, Name = "EK-CoolStream SE 240 RGB", PartType = PartType.WC_Radiator, Manufacturer = EKWB, Price = 270, SellPrice = 90, LevelUnlock = 23, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 110, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.274, AirPresure = 2.93 }; wc_radiators.Add(EK_CoolStream_SE_240_RGB);
            WC_Radiator EK_CoolStream_SE_280 = new WC_Radiator() { Id = 20, Name = "EK-CoolStream SE 280", PartType = PartType.WC_Radiator, Manufacturer = EKWB, Price = 280, SellPrice = 93, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 130, RadiatorSize = 280, RadiatorSlots = 2, RadiatorThickness = 0.274, AirPresure = 2.71 }; wc_radiators.Add(EK_CoolStream_SE_280);
            WC_Radiator EK_CoolStream_SE_360 = new WC_Radiator() { Id = 21, Name = "EK-CoolStream SE 360", PartType = PartType.WC_Radiator, Manufacturer = EKWB, Price = 300, SellPrice = 100, LevelUnlock = 16, LevelPercent = 1, Lighting = null, AirFlow = 150, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.274, AirPresure = 2.93 }; wc_radiators.Add(EK_CoolStream_SE_360);
            WC_Radiator EK_CoolStream_SE_360_RGB = new WC_Radiator() { Id = 22, Name = "EK-CoolStream SE 360 RGB", PartType = PartType.WC_Radiator, Manufacturer = EKWB, Price = 350, SellPrice = 117, LevelUnlock = 23, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 150, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.274, AirPresure = 2.93 }; wc_radiators.Add(EK_CoolStream_SE_360_RGB);
            WC_Radiator CALORE_C240D = new WC_Radiator() { Id = 23, Name = "CALORE C240D", PartType = PartType.WC_Radiator, Manufacturer = Raijintek, Price = 300, SellPrice = 100, LevelUnlock = 27, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 120, RadiatorSize = 240, RadiatorSlots = 2, RadiatorThickness = 0.451, AirPresure = 2.93 }; wc_radiators.Add(CALORE_C240D);
            WC_Radiator CALORE_C360D = new WC_Radiator() { Id = 24, Name = "CALORE C360D", PartType = PartType.WC_Radiator, Manufacturer = Raijintek, Price = 400, SellPrice = 133, LevelUnlock = 27, LevelPercent = 1, Lighting = Color.RGB, AirFlow = 150, RadiatorSize = 360, RadiatorSlots = 3, RadiatorThickness = 0.461, AirPresure = 2.93 }; wc_radiators.Add(CALORE_C360D);
            #endregion
            _context.WC_Radiator.AddRange(wc_radiators);
            #region WC Reservoir
            List<WC_Reservoir> wc_reservoirs = new List<WC_Reservoir>();
            WC_Reservoir Eisbecher_D5_250mm_Acetal = new WC_Reservoir() { Id = 1, Name = "Eisbecher D5 250mm Acetal", PartType = PartType.WC_Reservoir, Manufacturer = Alphacool, Price = 420, SellPrice = 140, LevelUnlock = 27, LevelPercent = 30, Lighting = null, Height = 1.58 }; wc_reservoirs.Add(Eisbecher_D5_250mm_Acetal);
            WC_Reservoir Eisbecher_DDC_150mm_Acetal = new WC_Reservoir() { Id = 2, Name = "Eisbecher DDC 150mm Acetal", PartType = PartType.WC_Reservoir, Manufacturer = Alphacool, Price = 380, SellPrice = 127, LevelUnlock = 27, LevelPercent = 30, Lighting = null, Height = 0.94 }; wc_reservoirs.Add(Eisbecher_DDC_150mm_Acetal);
            WC_Reservoir Eisstation_DC_Ultra = new WC_Reservoir() { Id = 3, Name = "Eisstation DC-Ultra", PartType = PartType.WC_Reservoir, Manufacturer = Alphacool, Price = 150, SellPrice = 50, LevelUnlock = 27, LevelPercent = 30, Lighting = Color.RGB, Height = 0.45 }; wc_reservoirs.Add(Eisstation_DC_Ultra);
            WC_Reservoir XD3_RGB_Combo = new WC_Reservoir() { Id = 4, Name = "XD3 RGB Combo", PartType = PartType.WC_Reservoir, Manufacturer = CORSAIR, Price = 150, SellPrice = 50, LevelUnlock = 25, LevelPercent = 10, Lighting = Color.RGB, Height = 0.5 }; wc_reservoirs.Add(XD3_RGB_Combo);
            WC_Reservoir XD5_RGB_Combo__Black_ = new WC_Reservoir() { Id = 5, Name = "XD5 RGB Combo (Black)", PartType = PartType.WC_Reservoir, Manufacturer = CORSAIR, Price = 150, SellPrice = 50, LevelUnlock = 25, LevelPercent = 10, Lighting = Color.RGB, Height = 1.16 }; wc_reservoirs.Add(XD5_RGB_Combo__Black_);
            WC_Reservoir XD5_RGB_Combo__White_ = new WC_Reservoir() { Id = 6, Name = "XD5 RGB Combo (White)", PartType = PartType.WC_Reservoir, Manufacturer = CORSAIR, Price = 150, SellPrice = 50, LevelUnlock = 25, LevelPercent = 10, Lighting = Color.RGB, Height = 1.16 }; wc_reservoirs.Add(XD5_RGB_Combo__White_);
            WC_Reservoir EK_XRES_100_Revo_D5 = new WC_Reservoir() { Id = 7, Name = "EK-XRES 100 Revo D5", PartType = PartType.WC_Reservoir, Manufacturer = EKWB, Price = 220, SellPrice = 73, LevelUnlock = 16, LevelPercent = 1, Lighting = null, Height = 0.74 }; wc_reservoirs.Add(EK_XRES_100_Revo_D5);
            WC_Reservoir EK_XRES_140_Revo_D5 = new WC_Reservoir() { Id = 8, Name = "EK-XRES 140 Revo D5", PartType = PartType.WC_Reservoir, Manufacturer = EKWB, Price = 250, SellPrice = 83, LevelUnlock = 16, LevelPercent = 1, Lighting = null, Height = 0.9 }; wc_reservoirs.Add(EK_XRES_140_Revo_D5);
            WC_Reservoir EK_XRES_140_Revo_D5___Plexi = new WC_Reservoir() { Id = 9, Name = "EK-XRES 140 Revo D5 - Plexi", PartType = PartType.WC_Reservoir, Manufacturer = EKWB, Price = 250, SellPrice = 83, LevelUnlock = 16, LevelPercent = 1, Lighting = null, Height = 0.9 }; wc_reservoirs.Add(EK_XRES_140_Revo_D5___Plexi);
            WC_Reservoir EK_XRES_140_Revo_D5_RGB = new WC_Reservoir() { Id = 10, Name = "EK-XRES 140 Revo D5 RGB", PartType = PartType.WC_Reservoir, Manufacturer = EKWB, Price = 320, SellPrice = 107, LevelUnlock = 23, LevelPercent = 1, Lighting = Color.RGB, Height = 0.9 }; wc_reservoirs.Add(EK_XRES_140_Revo_D5_RGB);
            WC_Reservoir Antila_D5_RBW = new WC_Reservoir() { Id = 11, Name = "Antila D5 RBW", PartType = PartType.WC_Reservoir, Manufacturer = Raijintek, Price = 340, SellPrice = 113, LevelUnlock = 26, LevelPercent = 50, Lighting = Color.RGB, Height = 1.47 }; wc_reservoirs.Add(Antila_D5_RBW);
            #endregion
            _context.WC_Reservoir.AddRange(wc_reservoirs);
            _context.SaveChanges();
        }
    }
}
